%!PS-Adobe-2.0
%%Creator: dvips(k) 5.86 Copyright 1999 Radical Eye Software
%%Title: Hlee_SurvivableLT.dvi
%%CreationDate: Sat Jun 08 20:49:06 2002
%%Pages: 13
%%PageOrder: Ascend
%%BoundingBox: 0 0 596 842
%%DocumentPaperSizes: a4
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips Hlee_SurvivableLT.dvi
%DVIPSParameters: dpi=600, compressed
%DVIPSSource:  TeX output 2002.06.08:2049
%%BeginProcSet: texc.pro
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/id 0 N/rw 0 N/rc 0 N/gp 0 N/cp 0 N/G 0 N/CharBuilder{save 3
1 roll S A/base get 2 index get S/BitMaps get S get/Cd X pop/ctr 0 N Cdx
0 Cx Cy Ch sub Cx Cw add Cy setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx
sub Cy .1 sub]/id Ci N/rw Cw 7 add 8 idiv string N/rc 0 N/gp 0 N/cp 0 N{
rc 0 ne{rc 1 sub/rc X rw}{G}ifelse}imagemask restore}B/G{{id gp get/gp
gp 1 add N A 18 mod S 18 idiv pl S get exec}loop}B/adv{cp add/cp X}B
/chg{rw cp id gp 4 index getinterval putinterval A gp add/gp X adv}B/nd{
/cp 0 N rw exit}B/lsh{rw cp 2 copy get A 0 eq{pop 1}{A 255 eq{pop 254}{
A A add 255 and S 1 and or}ifelse}ifelse put 1 adv}B/rsh{rw cp 2 copy
get A 0 eq{pop 128}{A 255 eq{pop 127}{A 2 idiv S 128 and or}ifelse}
ifelse put 1 adv}B/clr{rw cp 2 index string putinterval adv}B/set{rw cp
fillstr 0 4 index getinterval putinterval adv}B/fillstr 18 string 0 1 17
{2 copy 255 put pop}for N/pl[{adv 1 chg}{adv 1 chg nd}{1 add chg}{1 add
chg nd}{adv lsh}{adv lsh nd}{adv rsh}{adv rsh nd}{1 add adv}{/rc X nd}{
1 add set}{1 add clr}{adv 2 chg}{adv 2 chg nd}{pop nd}]A{bind pop}
forall N/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/p{show}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0 N/Ry 0 N/V{}B/RV/v{
/Ry X/Rx X V}B statusdict begin/product where{pop false[(Display)(NeXT)
(LaserWriter 16/600)]{A length product length le{A length product exch 0
exch getinterval eq{pop true exit}if}{pop}ifelse}forall}{false}ifelse
end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{BDot}imagemask
grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat{BDot}
imagemask grestore}}ifelse B/QV{gsave newpath transform round exch round
exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0 rlineto
fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B/M{S p
delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}B/g{0 M}
B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p -3 w}B/n{
p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{0 S
rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: special.pro
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/psfts{S 65781.76 div N}N/startTexFig{/psf$SavedState
save N userdict maxlength dict begin/magscale true def normalscale
currentpoint TR/psf$ury psfts/psf$urx psfts/psf$lly psfts/psf$llx psfts
/psf$y psfts/psf$x psfts currentpoint/psf$cy X/psf$cx X/psf$sx psf$x
psf$urx psf$llx sub div N/psf$sy psf$y psf$ury psf$lly sub div N psf$sx
psf$sy scale psf$cx psf$sx div psf$llx sub psf$cy psf$sy div psf$ury sub
TR/showpage{}N/erasepage{}N/copypage{}N/p 3 def @MacSetUp}N/doclip{
psf$llx psf$lly psf$urx psf$ury currentpoint 6 2 roll newpath 4 copy 4 2
roll moveto 6 -1 roll S lineto S lineto S lineto closepath clip newpath
moveto}N/endTexFig{end psf$SavedState restore}N/@beginspecial{SDict
begin/SpecialSave save N gsave normalscale currentpoint TR
@SpecialDefaults count/ocount X/dcount countdictstack N}N/@setspecial{
CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto 0 vs rlineto hs neg 0 rlineto
closepath clip}if ho vo TR hsc vsc scale ang rotate rwiSeen{rwi urx llx
sub div rhiSeen{rhi ury lly sub div}{dup}ifelse scale llx neg lly neg TR
}{rhiSeen{rhi ury lly sub div dup scale llx neg lly neg TR}if}ifelse
CLIP 2 eq{newpath llx lly moveto urx lly lineto urx ury lineto llx ury
lineto closepath clip}if/showpage{}N/erasepage{}N/copypage{}N newpath}N
/@endspecial{count ocount sub{pop}repeat countdictstack dcount sub{end}
repeat grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
TeXDict begin 39158280 55380996 1000 600 600 (Hlee_SurvivableLT.dvi)
@start
%DVIPSBitmapFont: Fa cmmi6 6 1
/Fa 1 110 df<000F017E13FC3A1F81FF83FF3B31C383C707803A61EE03CC039026EC01
F813C0D8C1F813F013F001E013E00003903903C0078013C0A2EE0F003907800780A2EE1E
041706270F000F00130C163C1718A2001E011EEB1C70EE1FE0000C010CEB07802F177D95
36>109 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fb cmex10 10 4
/Fb 4 63 df<EC01F01407140F143F147F903801FFC0491380491300495A495A495A495A
5C495A485B5A91C7FC485AA2485AA2485AA2123F5BA2127F5BA412FF5BB3B3A71C4B607E
4A>56 D<EAFFC0B3B3A77F127FA47F123FA27F121FA26C7EA26C7EA26C7E807E6C7F6D7E
806D7E6D7E6D7E6D7E6D13806D13C09038007FF0143F140F140714011C4B60804A>58
D<EC1FF8B3B3A7143F15F0A4EC7FE0A315C014FFA2491380A215005B5C1307495A5C131F
495A5C495A495A4890C7FC485A485A485A485AEA7FE0EAFF8090C8FC12FCB4FC7FEA7FE0
EA1FF06C7E6C7E6C7E6C7E6C7F6D7E6D7E806D7E130F806D7E1303807F1580A26D13C0A2
147F15E0A3EC3FF0A415F8141FB3B3A71D9773804A>60 D<EAFFC0B3A90A1B60804A>62
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fc cmmi8 8 8
/Fc 8 117 df<EB03F8EB0FFE90383E0780EBF803D801F013C03803E001EA07C0000F13
03D81F8013801407393F000F00141E387F01FCEBFFF091C7FC007EC8FC12FE5AA4127C15
6015E0EC01C06CEB0380EC0F006C131C380F81F83803FFE0C648C7FC1B1F7D9D21>101
D<1307EB0F80EB1FC0A2EB0F80EB070090C7FCA9EA01E0EA07F8EA0E3CEA1C3E12381230
1270EA607EEAE07C12C013FC485A120012015B12035BA21207EBC04014C0120F13801381
381F01801303EB0700EA0F06131EEA07F8EA01F0122E7EAC18>105
D<15E0EC01F01403A3EC01C091C7FCA9147CEB03FE9038078F80EB0E07131C013813C013
30EB700F0160138013E013C0EB801F13001500A25CA2143EA2147EA2147CA214FCA25CA2
1301A25CA21303A25CA2130700385BEAFC0F5C49C7FCEAF83EEAF0F8EA7FF0EA1F801C3B
81AC1D>I<131FEA03FFA2EA003FA2133EA2137EA2137CA213FCA25BA2120115F89038F0
03FCEC0F0E0003EB1C1EEC387EEBE07014E03807E1C09038E3803849C7FC13CEEA0FDC13
F8A2EBFF80381F9FE0EB83F0EB01F81300481404150C123EA2007E141C1518007CEBF038
ECF83000FC1470EC78E048EB3FC00070EB0F801F2F7DAD25>I<27078007F0137E3C1FE0
1FFC03FF803C18F0781F0783E03B3878E00F1E01263079C001B87F26707F8013B0006001
0013F001FE14E000E015C0485A4914800081021F130300015F491400A200034A13076049
133E170F0007027EEC8080188149017C131F1801000F02FCEB3F03053E130049495C180E
001F0101EC1E0C183C010049EB0FF0000E6D48EB03E0391F7E9D3E>109
D<3907C007E0391FE03FF83918F8783E393879E01E39307B801F38707F00126013FEEAE0
FC12C05B00815C0001143E5BA20003147E157C5B15FC0007ECF8081618EBC00115F0000F
1538913803E0300180147016E0001F010113C015E390C7EAFF00000E143E251F7E9D2B>
I<EB01F8EB0FFF90383F078090387C03C0D801F813E03903F001F0EA07E0D80FC013F8EB
8000121F48C7FC14015A127EA2140300FE14F05AA2EC07E0A2EC0FC0A2007CEB1F801500
143E6C5B6C485A380F83E03803FF80D800FCC7FC1D1F7D9D22>I<130E131FA25BA2133E
A2137EA2137CA213FCA2B512F8A23801F800A25BA21203A25BA21207A25BA2120FA25BA2
001F1310143013001470146014E0381E01C0EB0380381F0700EA0F0EEA07FCEA01F0152B
7EA919>116 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fd cmsy8 8 2
/Fd 2 49 df<B812C0A32A037A9137>0 D<137813FE1201A3120313FCA3EA07F8A313F0
A2EA0FE0A313C0121F1380A3EA3F00A3123E127E127CA35AA35A0F227EA413>48
D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fe cmsy10 12 18
/Fe 18 107 df<007FB912E0BA12F0A26C18E03C04789A4D>0 D<121FEA3F80EA7FC0EA
FFE0A5EA7FC0EA3F80EA1F000B0B789E1C>I<49B4FC010F13E0013F13F8497F48B6FC48
15804815C04815E04815F0A24815F8A24815FCA3B712FEA96C15FCA36C15F8A26C15F0A2
6C15E06C15C06C15806C15006C6C13FC6D5B010F13E0010190C7FC27277BAB32>15
D<19E0F003F0180FF03FE0F0FF80943803FE00EF0FF8EF3FE0EFFF80DC03FEC7FCEE0FF8
EE3FE0EEFF80DB03FEC8FCED1FF8ED7FE0913801FF80DA07FEC9FCEC1FF0EC7FC04948CA
FCEB07FCEB1FF0EB7FC04848CBFCEA07FCEA1FF0EA7FC048CCFCA2EA7FC0EA1FF0EA07FC
EA01FF38007FC0EB1FF0EB07FCEB01FF9038007FC0EC1FF0EC07FC913801FF809138007F
E0ED1FF8ED07FE923800FF80EE3FE0EE0FF8EE03FE933800FF80EF3FE0EF0FF8EF03FE94
3800FF80F03FE0F00FF01803F000E01900B0007FB912E0BA12F0A26C18E03C4E78BE4D>
20 D<127012FCB4FCEA7FC0EA1FF0EA07FCEA01FF38007FC0EB1FF0EB07FCEB01FF9038
007FC0EC1FF0EC07FC913801FF809138007FE0ED1FF8ED07FE923800FF80EE3FE0EE0FF8
EE03FE933800FF80EF3FE0EF0FF8EF03FE943800FF80F03FE0F00FF0A2F03FE0F0FF8094
3803FE00EF0FF8EF3FE0EFFF80DC03FEC7FCEE0FF8EE3FE0EEFF80DB03FEC8FCED1FF8ED
7FE0913801FF80DA07FEC9FCEC1FF0EC7FC04948CAFCEB07FCEB1FF0EB7FC04848CBFCEA
07FCEA1FF0EA7FC048CCFC12FC1270CDFCB0007FB912E0BA12F0A26C18E03C4E78BE4D>
I<037FB612E00207B712F0143F91B812E0010301C0C9FCD907FCCAFCEB0FE0EB3F8049CB
FC13FC485A485A485A5B485A121F90CCFC123EA2123C127CA2127812F8A25AA87EA21278
127CA2123C123EA27E7F120F6C7E7F6C7E6C7E6C7E137E6D7EEB1FE0EB07FC6DB47E0100
90B712E0023F16F01407020016E03C3A78B54D>26 D<92B6FC02071580143F91B7120001
030180C8FCD907FCC9FCEB1FE0EB3F80017ECAFC5B485A485A485A5B485A121F90CBFC12
3EA2123C127CA2127812F8A25AA2B9FC1880A2180000F0CBFCA27EA21278127CA2123C12
3EA27E7F120F6C7E7F6C7E6C7E6C7E137E6D7EEB1FE0EB07FC6DB47E010090B6FC023F15
80140702001500313A78B542>50 D<1706170F171FA2173EA2177CA217F8A2EE01F0A2EE
03E0A2EE07C0A2EE0F80A2EE1F00A2163EA25EA25EA24B5AA24B5AA24B5AA24B5AA24BC7
FCA2153EA25DA25DA24A5AA24A5AA24A5AA24A5AA24AC8FCA2143EA25CA25CA2495AA249
5AA2495AA2495AA249C9FCA2133EA25BA25BA2485AA2485AA2485AA2485AA248CAFCA212
3EA25AA25AA25A1260305C72C600>54 D<4B7E4B7EA21507A25EECFF8F010313EF90260F
80FFC7FC90383E003F497F49804848804848497E5B0007EC3DF049133C000FEC7CF8A248
C7EA787C15F848157E15F0A2140148157F007E4A7E1403A215C0A200FE01071480A21580
140FA21500A25CA2141E143EA2143CA2147CA21478A214F8A25C1301A2007E491400A213
03A2007F495B1307003F157E5CA2130F001F157C018FC712FCD80F9F5CA201DE13010007
5DD803FE495AA26C48495A00004A5A017C49C7FC017E133E90387F80F89038FBFFE001F8
138049C9FC1201A25BA26C5A29557CCC32>59 D<0060170C00F0171EB3B3A66C173EA200
78173C007C177C007E17FC003E17F86CEE01F06D15036C6CED07E06C6CED0FC0D803F8ED
3F80D801FEEDFF0026007FC0EB07FCD93FFCEB7FF8010FB612E001031580D9007F01FCC7
FC020713C0373D7BBA42>91 D<913807FFC0027F13FC0103B67E010F15E0903A3FFC007F
F8D97FC0EB07FCD801FEC8B4FCD803F8ED3F80D807E0ED0FC04848ED07E04848ED03F090
C91201003EEE00F8007E17FC007C177C0078173C00F8173EA248171EB3B3A60060170C37
3D7BBA42>I<126012F0B3B3B3B3B3A5B512FE14FFA26C13FE18646FCA2C>98
D<1406140FB3B3B3B3B3A5007FB5FCB6FCA26C13FE18647ECA2C>I<387FFFFEB6FCA214
FE00F0C7FCB3B3B3B3B3A5126018646FCA2C>I<387FFFFEB6FCA27EC7120FB3B3B3B3B3
A5140618647ECA2C>I<ED0FE015FF913803FC00EC0FE0EC3FC04A5A4AC7FC5C495AA249
5AB3AD495AA2495A131F495A495A01FEC8FCEA07F8EAFFE0A2EA07F8EA00FEEB7F806D7E
6D7E130F6D7EA26D7EB3AD6D7EA26D7E806E7E6E7EEC0FE0EC03FC913800FFE0150F2364
79CA32>I<12FEEAFFE0EA07F8EA00FEEB7F806D7E6D7E130F6D7EA26D7EB3AD6D7EA26D
7E806E7E6E7EEC0FE0EC03FC913800FFE0A2913803FC00EC0FE0EC3FC04A5A4AC7FC5C49
5AA2495AB3AD495AA2495A131F495A495A01FEC8FCEA07F8EAFFE048C9FC236479CA32>
I<126012F0B3B3B3B3B3A81260046474CA1C>106 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Ff cmmi12 12 24
/Ff 24 120 df<121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A0A78891B>58
D<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A312011380120313005A
1206120E5A5A5A12600B1D78891B>I<1618163C167CA2167816F8A216F01501A216E015
03A216C01507A21680150FA2ED1F00A2151E153EA2153C157CA2157815F8A25D1401A24A
5AA25D1407A25D140FA292C7FC5CA2141E143EA2143C147CA25CA25C1301A25C1303A25C
1307A25C130FA291C8FC5BA2133EA2133C137CA2137813F8A25B1201A25B1203A2485AA2
5B120FA290C9FC5AA2121E123EA2123C127CA2127812F8A25A126026647BCA31>61
D<4CB46C1318043F01F013384BB512FC0307D9007E1378DB1FF090380F80F0DB7F80EB03
C1DA01FEC7EA01C34A48EC00E7DA0FF0ED7FE04A48153F4A5A02FFC9121F494817C04948
160F495A130F4A178049481607495A137F4948170091CAFC5A485A1906485AA2485A96C7
FC121F5BA2123F5BA3127F5BA4485AA419C0A2180161127F180396C7FC6018066C6C160E
601818001F17386D5E000F5F6D4B5A6C6C4B5A00034CC8FC6C6C150E6C6C153C017F5DD9
3FC0EB01E0D91FF0EB0FC0D907FE017FC9FC0101B512FCD9003F13E0020790CAFC45487C
C546>67 D<4CB46C1318043F01F013384BB512FC0307D9007E1378DB1FF090380F80F0DB
7F80EB03C1DA01FEC7EA01C34A48EC00E7DA0FF0ED7FE04A48153F4A5A02FFC9121F4948
17C04948160F495A130F4A178049481607495A137F4948170091CAFC5A485A1906485AA2
485A96C7FC121F5BA2123F5BA3127F5BA4485A4CB612805EA293C7EBE000725AA3007F60
A218FF96C7FCA26C7E5F606C7EA2000F16036D5E6C6C15070003160F6C6C151F6C6CED3D
F8D97F8014786D6CEB01E0D91FF0903807C078D907FE90387F00700101B500FC1330D900
3F01F090C8FC020790CAFC45487CC54D>71 D<91B612F8A3020001E0C8FC6F5A4B5AA293
C9FCA35C5DA314035DA314075DA3140F5DA3141F5DA3143F5DA3147F5DA314FF92CAFCA3
5B4A16C0A21801010317804A15031900A201075E4A1506180E181E010F161C4A153C1838
1878011F16F84A4A5A1703013F150F4D5A4A14FF01FF02075BB9FCA2603A447CC342>76
D<91B712F018FF19E002009039C0003FF86F48EB07FC03FFEC01FEF0007F93C8EA3F801A
C0F11FE05C5D1AF0A214035DA30207EE3FE05DA2F17FC0020F17804B15FF1A004E5A021F
4B5A4B4A5AF00FE04E5A023F037FC7FC4BEB03FCEF1FF092B612804A4AC8FC923980007F
80EF0FC0EF07F002FF6E7E92C77F1701845B4A1400A2170113035CA2170313075CA24D5A
130F5CA3011F18185CA2013F4C13381A304A6F1370D9FFE0020314E0B600E0ED01C00501
EB0380943900FE0F00CBEA3FFEF007F045467CC34A>82 D<007FB56C91381FFFF8B65DA2
000101E0C8000313006C0180ED01FCF000F0614E5AA2017F4C5A96C7FC1806A2606E5DA2
013F5E1870186060A24D5A6E4AC8FCA2011F1506170E170C5FA26E5C5FA2010F5D16015F
4CC9FCA26E13065EA201075C5EA25E16E06E5B4B5A13034BCAFC1506A25D151CECFE185D
13015D5DA26E5AA292CBFC5C13005C5CA25CA25C45467BC339>86
D<EC0FC0EC7FF0903901F8381C903907E01C7E90380FC00E90393F0007FE496D5A13FE48
5A49130100035D485A120F491303001F5DA2485A1507007F5D5BA2150F00FF5D90C7FCA2
151F5E5AA2033F1330EE00701760A24B13E017C015FE007E130102031301003ED9073E13
80003F010E13036C011C14006C6C486C5A3A07C0F00F0E3A01FFC007FC3A007F0001F02C
2D7CAB33>97 D<EB0FE0EA07FFA338001FC0130F131FA25CA3133F91C8FCA35B137EA313
FE5BA312015BEC0FC0EC3FF00003EBF07C9038F3C03E9038F7001F01FE14804848130F49
14C05B16E0485A5BA3121F5BA2151F123F90C7FCA2153F4815C0127EA2157F16805A1600
5DA24A5A007C5CA24A5A4A5A5D003C130F003E495A001E495A001F017EC7FC6C5B3807C1
F03801FFC06C6CC8FC23467CC429>I<EC07F8EC3FFF9138FC07C0903903F000E0494813
70D91F80133049C71270017EEB03F801FE1307485A4848EB0FF012075B000FEC07C04848
90C7FCA2485AA2127F5BA312FF90C9FCA45AA5161816381670007E15E0ED01C06CEC0380
ED07006C6C131E000F14383907C001F03903F00FC02600FFFEC7FCEB1FF0252D7CAB2A>
I<EE01FC16FFA3EE03F816011603A217F0A21607A217E0A2160FA217C0A2161FA21780A2
163FA21700EC0FC091387FF07F903801F838903907E01C7E90380FC00E90393F0007FE49
130301FE5C485A491301120348485C120F491303121F5E485A1507127F495CA2150F12FF
90C75BA2151FA2485DA2033F13301770EE0060A24B13E017C015FE007E13010203130100
3ED9073E1380003F010E13036C011C14006C6C486C5A3A07C0F00F0E3A01FFC007FC3A00
7F0001F02E467CC433>I<EC07F8EC3FFE903901FC0780903903F003C090390FC001E090
381F8000017FC7FC01FE1470485A484814F0000715E05B000F1401484814C015034848EB
0780ED1F0015FC007FEB1FF090B5128002F0C7FC0180C8FC12FF90C9FCA55AA41618007E
15381670007F15E06CEC01C0ED03806CEC07006C6C131E6D13383907E001F03901F00FC0
26007FFEC7FCEB1FF0252D7CAB2D>I<141E143F5C5CA3147E143891C7FCAE133EEBFF80
3801C3C0380781E0380601F0120E121CEA180312381230A2EA700700605BA2EAE00F00C0
5BEA001F5CA2133F91C7FCA25B137E13FE5BA212015BEC03800003140013F01207495A14
06140E140CEBC01C141814385C00035BEBE1C0C6B45A013EC7FC19437DC121>105
D<163C16FEA21501A316FCED00701600AE15FCEC03FF91380F0780021C13C091383803E0
147014E014C01301EC8007130314005B0106130F130E010C14C090C7FC151FA21680A215
3FA21600A25DA2157EA215FEA25DA21401A25DA21403A25DA21407A25DA2140FA25DA214
1F5DA2143F001C91C7FC127F48137E5CA248485AEB03E038F807C038781F80D83FFEC8FC
EA07F0275681C128>I<14FE137FA3EB01FC13001301A25CA21303A25CA21307A25CA213
0FA25CA2131FA25C163F013FECFFC0923803C0E09138000703ED1E0F491338ED701F017E
13E0EC01C001FE018013C00203EB07004948C8FC140E00015B5C495A5C3803FBC001FFC9
FC8014F83807F1FE9038F03F809038E00FE06E7E000F130381EBC001A2001FED01C01780
1380A2003F15031700010013F05E481506160E007E150C161C00FE01005BED787048EC3F
E00038EC0F802B467BC433>I<01F8D903FCEC7F80D803FED91FFF903803FFE0D8071F90
3B7C0FC00F81F83E0E0F80E007E01C00FC001C9026C3C0030178137C271807C700D9F0E0
137E02CE902601F1C0133E003801DCDAFB80133F003001D892C7FCD90FF814FF0070495C
0060495CA200E04949485CD8C01F187E4A5C1200040715FE013F6091C75BA2040F140149
60017E5D1903041F5D13FE494B130762043F160E0001060F130C4992C713C0191F4CED80
1C00031A1849027E1638F2003004FE167000071A60494A16E0F201C0030192380F038000
0FF18700494AEC03FED80380D90070EC00F84F2D7DAB55>109 D<01F8EB03FCD803FEEB
1FFFD8071F90387C0FC03B0E0F80E007E03A0C07C3C003001CD9C7007F001801CE130100
3801DC80003013D8EB0FF800705B00605BA200E0491303D8C01F5D5C12001607013F5D91
C7FCA2160F495D137E161F5F13FE49143F94C7FC187000014B136049147E16FE4C13E000
0317C049150104F81380170300071700495D170EEE781C000FED7C3849EC1FF0D80380EC
07C0342D7DAB3A>I<D903E0EB3F80D90FF8EBFFE0903A1C7C03C0F8903A383E07007C90
26703F1E137E9026601F387F5D01E00160EB1F8001C013E04A5A00014A14C0018090C7FC
A200035B1300147EC7FC02FE143FA25CA20101157F18805CA2010315FF18005C5F010714
015F4A13035F010F14075F4C5A5F496C495A4CC7FC02B8137E02985B90393F9C01F89138
8F07E0913803FF80DA00FCC8FC4990C9FCA2137EA213FEA25BA21201A25BA21203A21207
B512F0A25C323F83AB31>112 D<EC0FF0EC7FFE903901F00F809039078001C049C712E0
011E14605BED01F0491307A201F8EB0FE05B7FED03806D90C7FC7F7F14F86DB47E15E06D
13F86D7F01077F1300EC07FF140081ED3F80151F120E003FEC0F00487EA25D48C7121EA2
00FC5C12605D00705C6C495A6CEB07C0260F803FC7FC3803FFFC38007FE0242D7BAB2E>
115 D<141C147EA314FE5CA313015CA313035CA313075CA2007FB512FCB6FC15F839000F
C000A2131F5CA3133F91C7FCA35B137EA313FE5BA312015BA312035BA21570000714605B
15E015C0000F130101C013801403EC070000071306140E5C6C6C5A000113F03800FFC001
3FC7FC1E3F7EBD23>I<133ED9FF8014E02603C3C0EB03F0380703E0380601F0000E1507
121CD818035D12380030150FA2D870075D00605B161FEAE00F00C0495CEA001F4A133FA2
013F92C7FC91C7FC5E5B017E147EA216FE13FE495CA20301EB01801703484802F81300A2
5F0303130616F000001407030F130E6D010D130C017C011D131C033913186D9038F0F838
903A1F03C07870903A07FF803FE0903A01FC000F80312D7DAB38>I<013E140ED9FF80EB
3F802603C3C0137F380703E0380601F0120E121CD81803143F0038151F0030150FA2D870
07140700605BA2D8E00F150000C0497FEA001F4A5B1606133F91C7FC160E49140C137EA2
161C01FE14185B1638163016704848146016E05E150100005D15036D49C7FC1506017C13
0E017E5B6D137890380F81E06DB45AD900FEC8FC292D7DAB2F>I<013E1738D9FF80D901
C013FC2603C3C0903907E001FE380703E0380601F0000E150F001C16C0D8180316000038
187E0030031F143E00705ED86007171E5C163FD8E00F92C7121C00C049160CEA001F4A49
141C047E1418133F91C7FC04FE1438491730017E5CA20301157001FE1760495C19E019C0
A24949481301198018031900606D0107140670130E017C010F5C017E010C1418013ED91C
FC13386DD9387E13F0903B0FC0F01F01C0903B03FFC00FFF809028007F0001FEC7FC3F2D
7DAB46>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fg cmti12 12 41
/Fg 41 122 df<167016E0ED01C0ED0380ED0700150E153C5D15F85D4A5A4A5A4A5A140F
4AC7FC141E143E5C147814F8495A5C1303495AA2495AA249C8FCA25B133E137E137CA25B
A212015BA212035BA212075BA2120FA25BA2121FA290C9FCA25AA2123EA3127EA2127CA6
5AAB1278A6127C123CA47EA2120E120FA27E6C7EA26C7EA26C7E1360246472CA28>40
D<1560A2157081A281151E150E150FA2811680A3ED03C0A516E0A21501A71503A91507A2
16C0A4150FA21680A2151FA21600A25DA2153EA2157EA2157C15FCA25D1401A25D14035D
A214075D140F5DA24AC7FCA2143EA25C147814F8495AA2495A5C1307495A91C8FC131E13
3E5B13785B485A485A485A48C9FC121E5A5A12E05A23647FCA28>I<13F0EA03FC1207A2
EA0FFEA4EA07FCEA03CCEA000C131C1318A2133813301370136013E0EA01C013801203EA
0700120E5A5A5A5A5A0F1D7A891E>44 D<007FB5FCB6FCA214FEA21805789723>I<120F
EA3FC0127FA212FFA31380EA7F00123C0A0A76891E>I<16C01501A215031507ED0F8015
1F153F157F913801FF005C140F147F903807FCFEEB0FF0EB0700EB00015DA314035DA314
075DA3140F5DA3141F5DA3143F5DA3147F92C7FCA35C5CA313015CA313035CA313075CA2
130FA2131F133FB612FCA25D224276C132>49 D<ED3FC0913801FFF0913807C07C4AC67E
021CEB1F800278130F4AEB07C0494814E04A1303494814F0130749C7FCEB0E06D91E0714
F8EB1C03133C1338137813704A1307D9F00614F013E0140E020C130F0001011C14E0EBC0
180238131F4A14C06C6C48EB3F80D9E1C0137FD97F801400013EC712FE90C7485A4B5A4B
5A4B5AED1F804BC7FC15FC4A5AEC03E0EC0FC0023FC8FC147CEB01F0495AEB0780011FC9
FC133E49EC03805B49140748481500485A48485C90C8121E5A001E5D001C157CD83FFC5C
9038FFC0013A7C0FFC07F0D87803B55AEA700126F0007F5B486D90C7FCEC0FFEEC03F82D
4478C132>I<ED1FE0EDFFFC913803E03F91390F000F80023EEB07C00278EB03E05C4948
EB01F0495A495A91C713F85BEB0E0CEB1E0EEB1C061603013C15F01338A2020E1307020C
14E0141CD91C78EB0FC0D90FE0131F6D48148090C8EA3F00167E5E4B5A4B5AED0FE09138
3FFF804A48C7FC15F8EC007E151F6F7E6F7E82150382A482A34B5A121FEA7F80A2150F48
C75BA2484A5A12F800E04A5AA24BC7FC007014FE5D0078495A0038495A003CEB0FC06C49
5A260780FEC8FC3803FFF038007F802D4477C132>I<EE0380EE0FC0A2161F1780A3163F
1700A3167EA35EA34B5AA34B5AA25E1507A24B5AA24B5AA293C7FC5D153E157E157C15FC
5D4A5AA24A5A14075D4A5A16E091381F01F0EC3E03143C147CECF807D901F05B14E01303
903807C00FD90F805BEB1F00131E49131F495C5B485A3903FFC03F000F01F890C7FC4813
FF397E003FFF007801071480480101EBFFC000606D7EC8EBFE0003FEC7FC5DA314015DA3
14035DA314075DA4EC03802A557DC132>I<130FEB1FC0133FEB7FE013FFA214C0EB7F80
1400131E90C7FCB3A5120FEA3FC0127FA212FFA35B6CC7FC123C132B76AA1E>58
D<DC0FF8130393B513070307ECC00F923A1FF803E01F923A7FC000F81E4BC7EA7C3EDA03
FCEC3C7EDA0FF0EC1EFE4A48EC0FFC4A4814074AC8FC02FE1503494816F8130349481501
495A494816F0495A137F5C01FF17E04890C9FCA2485A19C0485AA2485A95C7FC121F5BA2
123F5BA3127F5BA4485AA41838A218781870A218F0007F5F1701601703003F5F17076D4B
C7FC001F160E171E6C6C5D6D5D00075E6C6C4A5A6DEC07C06C6C4A5AD8007F023EC8FCD9
3FC013FC90391FF807F00107B512C0010191C9FC9038001FF0404872C546>67
D<91B712F818FF19C00201903980003FF06E90C7EA0FF84AED03FCF000FE4B157FA2F13F
800203EE1FC05DF10FE0A214074B16F01907A2140F5D1AF8A2141F5DA2190F143F5D1AF0
A2147F4B151FA302FF17E092C9123FA34918C04A167F1A80A2010317FF4A1700A24E5A13
074A4B5A611807010F5F4A4B5A181F61011F4C5A4A4BC7FC18FE4D5A013F4B5A4A4A5A4D
5A017FED3FC005FFC8FC4AEB03FE01FFEC1FF8B812E094C9FC16F845447AC34A>I<91B9
12C0A30201902680000313806E90C8127F4A163F191F4B150FA30203EE07005DA314074B
5D190EA2140F4B1307A25F021F020E90C7FC5DA2171E023F141C4B133C177C17FC027FEB
03F892B5FCA39139FF8003F0ED00011600A2495D5CA2160101034B13705C19F061010791
C8FC4A1501611803010F5F4A150796C7FC60131F4A151E183E183C013F167C4A15FC4D5A
017F1503EF0FF04A143F01FF913803FFE0B9FCA26042447AC342>I<DC0FF81306DCFFFE
130E03079038FF801E923A1FF807E03E923A7F8001F03CDA01FEC7EA787CDA03F8EC3CFC
DA0FF0141D4A48EC1FF8DA3F80140F4AC8FCD901FE1507494816F05C01071603495A4948
16E0495A137F5C01FF17C04890C9FC5B12031980485AA2485A95C7FC121F5BA2123F5BA3
127F5BA4485A043FB512E0A39339001FF80060A360A2007F163F60A3177F003F5F7F121F
17FF6D93C7FC000F5D6C6C5C7F6C6C4A5A6C6CEC1F3E6C6C143ED93FC0EBF81E903A1FF0
07F01C0107B5EAC00C010149C9FC9038003FF03F4872C54B>71 D<91B612F0A25F020101
C0C7FC6E5B4A90C8FCA25DA314035DA314075DA3140F5DA3141F5DA3143F5DA3147F5DA3
14FF92C9FCA35B5CA3010316104A1538A21878010716705C18F018E0010F15015C18C017
03011F15074A1580170FA2013FED1F004A5C5F017F15FE16034A130F01FFEC7FFCB8FCA2
5F35447AC33D>76 D<91B712F018FEF0FF800201903980007FE06E90C7EA1FF04AED07F8
18034B15FCF001FE1403A24B15FFA21407A25DA2140FF003FE5DA2021F16FC18074B15F8
180F023F16F0F01FE04B15C0F03F80027FED7F0018FE4BEB03FCEF0FF002FFEC7FC092B6
C7FC17F892CAFC5BA25CA21303A25CA21307A25CA2130FA25CA2131FA25CA2133FA25CA2
137FA25C497EB67EA340447AC342>80 D<91B77E18F818FE020190398001FF806E90C7EA
3FC04AED1FE0F00FF04BEC07F8180319FC14034B15FEA314075DA3020FED07FC5DA2F00F
F8141F4B15F0F01FE0F03FC0023F16804BEC7F0018FEEF03F8027F4A5A4BEB1FC04CB4C7
FC92B512F891B612E092380003F8EE00FE177F496F7E4A6E7EA28413034A140FA2171F13
075CA2173F130F5CA24D5A131F5CA3013F170E5CA2017FEE801E191C4A163C496C1638B6
6C90383FC070051F13F094380FE1E0CA3803FF80943800FE003F467AC347>82
D<DB03FE130C92390FFF801C037FEBE03C9238FE03F8913A03F0007C7C4A48EB3EF84A48
131F4A48130F4AC7FC027EEC07F05C1703495A18E0495AA213074A15C0A3130F1880A280
94C7FCA280806D7EECFFE015FC6DEBFF806D14F016FC6D14FF023F80020F801403DA003F
7F150703007F163F161F160FA21607A3120716031607A2485EA2120E160F001E5EA2001F
4B5AA2484BC7FC6D143E167E6D5C007F4A5A6D495AD87CF0495AD8787CEB1F8027F03F80
7FC8FC90381FFFFCD8E00713F039C0007F80364879C537>I<48B912F85AA2913B0007FC
001FF0D807F84A130701E0010F140349160148485C90C71500A2001E021F15E05E121C12
3C0038143F4C1301007818C0127000F0147F485DA3C800FF91C7FC93C9FCA35C5DA31403
5DA314075DA3140F5DA3141F5DA3143F5DA3147F5DA314FF92CAFCA35B5CA21303A21307
497E007FB612C0A25E3D446FC346>I<EC1F80EC7FE0903901F07070903907C039F89038
0F801D90381F001F013E6D5A137E5B484813075E485A120749130F000F5DA2485A151F00
3F5D5BA2153F007F92C7FC90C7FCA25D157E12FEA29238FE0380EDFC071700A2007E1301
5E913803F80E1407003E010F131E161C6C131C02385B3A0F80F078783A07C3E07C703A01
FF801FE03A007E000780292D76AB32>97 D<EB0FE0EA07FFA338001FC0130F131FA25CA3
133F91C8FCA35B137EA313FE5BA312015BEC1F80EC7FE03903F9E0F89038F3C07C9038F7
003E13FE48487F5BA2491480485AA25BA2121F5BA2153F123F90C7FCA2157F481500127E
A25D5D5AA24A5AA24A5AA2007C5C4A5A140F5D4A5A003C49C7FC003E137E001E5B6C485A
380783E03803FF80C648C8FC214676C42D>I<EC0FE0EC7FF8903801F81E903807E00F90
390F80078090381F0003017E14C049131F0001143F5B4848EB7F801207485AED3E004848
90C7FCA2485AA2127F90C9FCA35A5AA45AA5ED0180ED03C0ED0780A2007CEC0F00007E14
1E003E147C15F06CEB03E0390F800F802607C07EC7FC3801FFF838007FC0222D75AB2D>
I<EE07F0ED03FFA39238000FE01607160FA217C0A2161FA21780A2163FA21700A25EA216
7EA216FEA25EEC1F80EC7FE1903801F071903907C039F890380F801D90381F001F013E13
0F017E5C5B48481307A248485C120749130F120F5E485A151F123F495CA2153F127F90C7
90C7FCA25DA200FE147EA29238FE0380160703FC1300A2007E13015E913803F80E140700
3E010F131E161C6C131C02385B3A0F80F078783A07C3E07C703A01FF801FE03A007E0007
802C4676C432>I<EC0FE0EC7FF8903801F83E903807C00F90391F800780EB3F00017E14
C0491303485A48481307000715805B000F140F484814005D4848133E15FCEC07F0007FEB
FFC0D9FFFEC7FC14C090C9FC5A5AA55AA4ED0180ED03C0007CEC0780A2007EEC0F00003E
141E157C6C14F06CEB03E03907800F802603C07EC7FC3801FFF838003FC0222D75AB2D>
I<EE0F80EE3FE0EEF870923801F038923803E0F8923807E1FC16C3ED0FC7A2EE87F89238
1F83F0EE81E0EE8000153F93C7FCA45D157EA415FE5DA349B512FEA390260001F8C7FCA3
14035DA414075DA4140F5DA4141F5DA4143F92C8FCA55C147EA314FE5CA413015CA4495A
A35C1307121C007F5B12FF495AA291C9FC485AEAF81E485AEA7878EA1FF0EA07C02E5A83
C51E>I<15FCEC03FF91390F83838091393E01CFC091387C00EF4A13FF4948137F010315
804948133F495A131F4A1400133F91C75A5B167E13FE16FE1201495CA215011203495CA2
1503A2495CA21507A25EA2150F151F5E0001143F157F6C6C13FF913801DF8090387C039F
90383E0F3FEB0FFCD903F090C7FC90C7FC5DA2157EA215FEA25DA2001C495A127F48495A
14074A5A485C023FC8FC00F8137E387C01F8381FFFE0000390C9FC2A407BAB2D>I<14FE
137FA3EB01FC13001301A25CA21303A25CA21307A25CA2130FA25CA2131FA25C157F9039
3F83FFC091388F81F091381E00F802387F4948137C5C4A137EA2495A91C7FCA25B484814
FE5E5BA2000314015E5BA2000714035E5B1507000F5DA249130F5E001F1678031F137049
1480A2003F023F13F0EE00E090C7FC160148023E13C01603007E1680EE070000FEEC1E0F
ED1F1E48EC0FF80038EC03E02D467AC432>I<143C147E14FE1301A3EB00FC14701400AE
137C48B4FC3803C780380703C0000F13E0120E121C13071238A21278EA700F14C0131F00
F0138012E0EA003F1400A25B137EA213FE5B12015BA212035B141E0007131C13E0A2000F
133CEBC038A21478EB807014F014E0EB81C0EA0783EBC7803803FE00EA00F8174378C11E
>I<EB03F8EA01FFA3380007F013031307A214E0A2130FA214C0A2131FA21480A2133FA2
1400A25BA2137EA213FEA25BA21201A25BA21203A25BA21207A25BA2120FA25BA2121FA2
5BA2123FA290C7FCA2387F01C01303007E1380A2130700FE130012FCA25B130EEA7C1E13
1CEA3C3CEA3E786C5AEA07C0154678C419>108 D<D801F0D90FE0EB07F0D803FCD97FF8
EB3FFC28071E01F03EEBF81F3E0E1F03C01F01E00F80271E0F8700D983807F001C018E90
390F870007003C019C148E003801B802DC8002F814FC26781FF05C0070495CA24A5C00F0
494948130FD8E03F6091C75B1200043F141F4960017E92C7FCA24C143F01FE95C7FC4914
7E6104FE147E1201494A14FE610301EE0780000305011400494A14F8A2030302035B0007
F0F00E495C1A1E0307EDE01C000F193C494A153862030F020113F0001FF0F1E0494A9038
00FF800007C7D80380023EC7FC492D78AB50>I<D801F0EB0FE0D803FCEB7FF83A071E01
F03E3A0E0F03C01F001ED987001380001C018E130F003C139C003801B814C014F838781F
F000705BA25C00F049131FD8E03F158091C7FC1200163F491500137EA25E01FE147E5B16
FE5E12014913015E170F00030203130E4914F0A20307131E0007EDE01C5B173CEEC03800
0F167849157017E0ED03C1001FEDE3C049903801FF000007C8127C302D78AB37>I<EC0F
E0EC7FFC903801F83E903907E00F8090390F8007C0EB1F00017EEB03E04914F0A2484813
01484814F81207485AA2485AA2485A1503127F90C7FCA215074815F05AA2150F16E05AED
1FC0A21680153F16005D157E5D007C495A007E495A003E5C4A5A6CEB1F80260F803EC7FC
3807C0FC3801FFF038003F80252D75AB32>I<D903E0137E903A07F801FF80903A0E3C07
83E0903A1C1E0F01F0903A3C1F1C00F801385B017849137C01705BA24A48137E01E05BA2
92C7FC00015B13C0147EC7FC02FE14FEA25CA20101140117FC5CA20103140317F85CA201
07EC07F0A24AEB0FE0A2010F15C0EE1F80163F1700496C137E5E4B5A9138B803F090393F
9C07E091389E0F80DA07FEC7FCEC01F849C9FCA2137EA213FEA25BA21201A25BA21203A2
1207B512F0A25C2F3F7FAB32>I<91381F800C91387FE01C903901F0703C903907C03878
90390F801CF890381F001D013E130F017E14F05B48481307A2484814E012075B000F140F
16C0485AA2003F141F491480A3007F143F90C71300A35D00FE147EA315FE5DA2007E1301
A24A5A1407003E130FA26C495A143B380F80F33807C3E73901FF87E038007E071300140F
5DA3141F5DA3143F92C7FCA25CA25C017F13FEA25D263F76AB2D>I<D801F0EB3F803A03
FC01FFF03A071E03C0F83A0E0F0F007C001E90389E01FC001C139CECB803003813F0A2D9
1FE013F80078EC00E00070491300A200F05BEAE03F91C8FC1200A25B137EA313FE5BA312
015BA312035BA312075BA3120F5BA3121F5B0007C9FC262D78AB29>I<EC0FE0EC7FF890
3801F01E903803C00F90390780078090380F0003011E14C0150749131FA2017CEB3F8013
78137CED0E0092C7FC137E137F14F014FF6D13C06D13F06D7F6D7F1300EC0FFE14011400
157F81120E003F141E487EA2153E48C7123CA200FC5C12705D0078495A6C495A6CEB0F80
260F803EC7FC3803FFF838007FC0222D7AAB28>I<1470EB01F8A313035CA313075CA313
0F5CA3131F5CA2007FB512E0B6FC15C0D8003FC7FCA25B137EA313FE5BA312015BA31203
5BA312075BA3120F5BA2EC0780001F140013805C140E003F131EEB001C143C14385C6C13
F0495A6C485AEB8780D807FEC7FCEA01F81B3F78BD20>I<137C48B414072603C780EB1F
80380703C0000F7F000E153F121C0107150012385E1278D8700F147E5C011F14FE00F05B
00E05DEA003FEC0001A2495C137E150313FE495CA215071201495CA2030F133800031678
49ECC070A3031F13F0EE80E0153F00011581037F13C06DEBEF8300000101148090397C03
C787903A3E0F07C70090391FFE01FE903903F000782D2D78AB34>I<017C143848B414FC
3A03C78001FE380703C0000F13E0120E001C14000107147E1238163E1278D8700F141E5C
131F00F049131C12E0EA003F91C7123C16385B137E167801FE14705BA216F0000115E05B
150116C0A24848EB0380A2ED0700A2150E12015D6D5B000014786D5B90387C01E090383F
0780D90FFFC7FCEB03F8272D78AB2D>I<017CEE038048B4020EEB0FC02603C780013FEB
1FE0380703C0000E7F5E001C037E130F01071607123804FE130300785DEA700F4A150101
1F130100F001804914C012E0EA003FDA000314034C14805B137E0307140701FE1700495C
A2030F5C0001170E495CA260A24848495A60A2601201033F5C7F4B6C485A000002F71303
6D9039E7E0078090267E01C349C7FC903A1F0781F81E903A0FFF007FF8D901FCEB0FE03B
2D78AB41>I<137C48B414072603C780EB1F80380703C0000F7F000E153F001C16001307
12385E0078157EEA700F5C011F14FE00F0495B12E0EA003FEC00015E5B137E150301FE5C
5BA2150700015D5BA2150F00035D5BA2151F5EA2153F12014BC7FC6D5B00005BEB7C0390
383E0F7EEB1FFEEB03F090C712FE5DA214015D121F397F8003F0A24A5A4848485A5D4813
1F00F049C8FC0070137E007813F8383801F0381E07C06CB4C9FCEA01FC294078AB2F>
121 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fh cmsl10 10.95 22
/Fh 22 119 df<EC07F8EC3FFF9138FC0FC0903903F003E0903907C001F0D90F8013F849
C7FC013E14FC017E147C017C147E13FC485AA20003157F5B1207A2120F5BA2121F16FF5B
A2123FA44848EB01FEA648C7EA03FCA5ED07F8A25A16F0A2150F16E0A3ED1FC0A2168000
7E143F1600157E123E003F5C4A5AD81F805B000FEB07E06C6C485A2603F03FC7FC3800FF
FCEB1FE0283F79BC2D>48 D<EC01FE91380FFFE0023F13F89138FC07FC903901E001FE90
3907C000FF49C7EA7F80011E15C0163F4915E05B0170141F13FF80A35A163FA26C90C7FC
137E0118EC7FC090C8FCEEFF80A24B1300A24B5A5E4B5A4B5A4B5A5E4B5A4BC7FC15FEEC
01F84A5A4A5A4A5A4AC8FC143E5C5CEB01E04948130E49485B49C7FC131E495C13705B48
485C484814F0000FB6FC5A485D5AB7FC5EA22B3D7CBC2D>50 D<EC03FC91381FFF809138
7C07E0903901F001F0903903C000F84948137C49C7123E131E013E141F133C137C137813
F8A3163F486C143E167E6D147C6C6C14FC6E13F89138C001F09138F003E090397FF807C0
9138FC0F0090383FFF3E6D13F86D13E06D7F01017F8101077F90391F1FFF80D93E0F13C0
EBF8072601F00113E048486C13F04848137F4848131F001FEC0FF890C71207003E1403A2
481401A300FC15F05AA3ED03E0A26CEC07C0007C1580007E140F003EEC1F00003F143E6C
6C5B6C6C485A3907F00FE00001B512806C6C48C7FCEB0FF0283F7ABC2D>56
D<013FB812F8A39026007FF0C7127F6E48140F18034B14011800A31978147F4B1570A502
FF143892C7FCA3190017784915704A14F016011603160F91B6FC495DA29138FC001F1607
1603160101075D5CA2197019F019E0010F4A5A4A90C7120119C0A218031980011F16075C
F00F00A260181E013F163E4A157E4D5A1703017F150F01FFEDFFF8B9FCA2603D3E7DBD3E
>69 D<021FB512FCA3DA000713006F5AA25EA41507A25EA4150FA25EA4151FA25EA4153F
A25EA4157FA25EA415FFA293C7FCA45C121FD87F805BEAFFC0A214035D13804A5AEAFE00
00F8495A48495A00705C6C495A6C01FEC8FC380F81FC3803FFE0C690C9FC2E407ABD2F>
74 D<013FB612FEEFFFE018F8903B007FF0000FFC6E48EB01FF7113804BEC7FC0183F19
E0F01FF0A2147F5D19F8A402FFED3FF092C8FCA219E0A2F07FC05B4AEDFF8019004D5A4D
5AEF0FF80103ED3FE04A903801FF8091B648C7FC17F002FCCAFCA213075CA5130F5CA513
1F5CA5133F5CA3137F497EB612E0A25D3D3E7DBD3E>80 D<9239FF8003800207EBF00702
1F9038FC0F0091387F00FE02FCEB1F1FD903F0EB07BF49486DB4FC49487F4A6D5A49C8FC
49157E133E137E173E49153CA57F1738A26D92C7FC808080EB7FFEECFFE06D13FEEDFFC0
6D14F06D14FC010380010080143F020380DA003F7F15031500707E163F161FA2160F121C
A31607160F003C5EA35F003E151F94C7FC007E5D007F153E6D5C16FC01E0495AD87DF049
5AD8FCFCEB0FC03AF87F803F8027F01FFFFEC8FCD8E00713F839C0007FC031427BBF33>
83 D<EB3F80EA1FFFA3C6FC137FA291C9FCA55B5BA512015BA4EC07F80003EB3FFF9039
F8F80FC09039FBE003E09039FF8001F891C77E5B4848147E49147F5B821780A2120F5B17
C0A3167F001F16805BA4EEFF00123F5B4B5AA24B5A5E007F4A5AA24B5A6D495A4BC7FCD8
7CE0137E39F87001F839F03C07E039E00FFF80260003FCC8FC2A4077BE33>98
D<EC1FF0ECFFFE903903F01F8090390FC003C0D93F0013E0017E130F49131F000115F048
48EB3FE0485AA24848EB1FC0001FEC0F004990C7FC123FA2485AA412FF90C9FCA96CEC03
80150716006C6C5B151E001F5C6C6C5B6C6C5B6C6C485A3901F80F8026007FFEC7FCEB0F
F0242A7AA828>I<EE03F8ED01FFA3ED000F1607A217F0A4160FA217E0A4161FA217C0A4
91380FF03FECFFFC902603F81F138090390FC007BF90391F8003FF90387E0001497F0001
157F48481500485A120F5B001F5D485A5E5B127FA2150112FF90C75BA41503A25EA37E15
07A26C4A5A7F001F141F6C6C133F6C6CEBFFF83B03F001EFFFC03900F80F8F90383FFE0F
D90FF0EBE0002D407ABE33>I<EC3FE0903801FFF8903807E07E90380F801F90393F000F
80017E14C049EB07E0485A12034848EB03F0485AA2121F5B123FA248481307A290B6FCA2
D8FF80C8FC90C9FCA87EED01C015036C15806D1307001FEC0F006D131E000F5C6C6C5B6C
6C485A3900FC07C0D93FFFC7FCEB07F8242A7BA828>I<1478EB01FE130314FFA25B14FE
130314FCEB00F01400ACEB03F8EA01FF14F0A2EA001F130FA314E0A5131F14C0A5133F14
80A5137F1400A55B5BA4EA03FF007F13F0A2B5FC183E7DBD1A>105
D<143FEB1FFF5BA213017FA214FEA5130114FCA5130314F8A5130714F0A5130F14E0A513
1F14C0A5133F1480A5137F1400A55B5BA4EA03FF007F13F8A2B5FC183F7DBE1A>108
D<902707F007F8EB03FCD803FFD91FFF90380FFF80913CE0781FC03C0FE09126E1E00FEB
F0073E001FE38007E1C003F090260FE700EBE38002EEDAF70013F802FC14FE02D85C14F8
4A5CA24A5C011F020F14074A4A14F0A5013F021F140F4A4A14E0A5017F023F141F91C749
14C0A549027F143F4992C71380A300014B147F486C496DEBFFC0B5D8F87FD9FC3F13FEA3
47287DA74C>I<903907F007F8D803FFEB1FFF9139E0781FC09138E1E00F3B001FE38007
E090380FE70002EE14F014FC14D814F85CA24A130F131F4A14E0A4161F133F4A14C0A416
3F137F91C71380A4167F5B491500A300015D486C491380B5D8F87F13FCA32E287DA733>
I<EC0FF0ECFFFE903903F01F8090390FC007C049C66C7E013E6D7E01FC6D7E4848804914
7C0003157E485A000F157F5B121FA2485AA2007F1680A2170048C85AA54B5AA25E5A6C4A
5A7E4B5A5E6C140F6C6C5C4B5A6C6C013EC7FC6C6C5B6C6C485A3900FC0FE090383FFF80
D90FF8C8FC292A7BA82D>I<91387F01FE903A7FFF0FFFC09139FE3E03F09238F801F890
3A03FFE000FE6D49137F4B7F92C713804A15C04A141FA218E0A20103150F5C18F0A3171F
010716E05CA3173F18C0130F4A147F1880A2EFFF004C5A011F5D16034C5A6E495AEE1FC0
6E495AD93FDC017EC7FC91388F01F8913883FFE0028090C8FC92C9FC137FA291CAFCA45B
A25BA31201487EB512F8A3343A81A733>I<903907F01F80D803FFEB7FE09138E1E1F091
38E387F839001FE707EB0FE614EE02FC13F002D813E09138F801804AC7FCA25C131FA25C
A4133F5CA5137F91C8FCA55B5BA31201487EB512FEA325287EA724>114
D<9138FF81C0010713E390381F807F90397C003F8049131F4848130F5B00031407A24848
1400A27FA27F6D90C7FCEBFF8014FC6C13FF6C14C015F06C6C7F011F7F13079038007FFE
1403140100381300157EA2123C153E157E007C147CA2007E147815F8007F495A4A5A486C
485A26F9E01FC7FC38E0FFFC38C01FE0222A7DA824>I<EB0380A4130791C7FCA25BA25B
A2133EA2137E13FE12011207001FB512C0B6FCA2D801FCC7FCA312035BA512075BA5120F
5BA41407001F130E13C0A4141E141C1380A26D5AA2000F5B14F03807E1E03801FF80D800
7EC7FC1A3978B723>I<01FE147F00FFEC7FFF4914FEA20007140300031401A34914FCA4
150312074914F8A41507120F4914F0A4150F121F4914E0A2151FA3153F4914C0157F15FF
EC01DF3A0FC003BFE09138073FFF3803F01E3801FFF826003FE01380282977A733>I<B5
39E007FFF05D17E02707FE000313006C48EB01FC6F5A5E00014A5A5EA24B5A6D13070000
92C7FC5D150E6D5B7F5DA25D1480013F5B14815D14C3011F5B02C7C8FCA214CE14EEEB0F
FCA25CA26D5A5CA25CA26D5A2C2878A630>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fi cmmi10 10.95 5
/Fi 5 111 df<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A3120113
80120313005A120E5A1218123812300B1C798919>59 D<ED0180ED03C01507A21680150F
A216005DA2151E153EA2153C157CA2157815F8A25D1401A25D1403A25D1407A25D140FA2
4AC7FCA2141E143EA2143C147CA2147814F8A25C1301A25C1303A25C1307A25C130FA291
C8FC5BA2131E133EA25BA2137813F8A25B1201A25B1203A25B1207A25B120FA290C9FC5A
A2121E123EA2123C127CA2127812F8A25A1260225B7BC32D>61 D<1403A44A7EA84A7EA4
00F0163CD8FF80EC07FCD83FFE9038C1FFF0000FB712C000031600C615FC011F14E00107
1480010149C7FC9038007FF8A24A7EA2497FA2903803FCFF4A7E49486C7EECE01F49486C
7EEC800749486C7E013E6D7E013C1300491478017014384980014014082E2C81AC2D>63
D<EC1FE0ECFFFC903803F01E90380FC00F90393F800780D97E0013C0491303EA03F81207
49130748481480121F49130F003FEC1F00153E397F8001FCEC1FF0B6128002F8C7FC90C9
FCA45AA616C01501007E1403ED07806CEC0F00151E6C5C6C6C13F83907C003E03903E03F
802600FFFEC7FCEB3FE022297CA72A>101 D<D801F0EB0FF0D807FCEB3FFED80F1FEBF0
1F000E903903C00F80271E0F87007F001C018E1307003C01DC80003813F85CEA781F0070
5B5CA200F049130F013F5D000090C7FCA2161F495D137E163F94C7FC13FE495C167EA200
019238FE03804914FCA203011307000303F813005B5FEEF00E0007161E49151C5F177800
0F6E6C5A49EC7FC0D80380021FC7FC31297EA737>110 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fj cmr12 12 73
/Fj 73 123 df<9239FFC001FC020F9038F80FFF913B3F803E3F03C0913BFC00077E07E0
D903F890390FFC0FF0494890383FF81F4948EB7FF0495A494814E049C7FCF00FE0499139
3FC0038049021F90C7FCAFB912F0A3C648C7D81FC0C7FCB3B2486CEC3FF0007FD9FC0FB5
12E0A33C467EC539>11 D<4AB4FC020F13E091387F80F8903901FC001C49487FD907E013
0F4948137F011FECFF80495A49C7FCA25B49EC7F00163E93C7FCACEE3F80B8FCA3C648C7
FC167F163FB3B0486CEC7FC0007FD9FC1FB5FCA330467EC536>I<913801FFC0020FEBFB
8091387F803F903801FC00494813FFEB07E0EB1FC0A2495A49C7FC167F49143F5BAFB8FC
A3C648C7123FB3B2486CEC7FC0007FD9FC1FB5FCA330467EC536>I<DBFF80EB3FE0020F
9039F001FFFC913B3F807C0FF01F913CFC000E3F800380D903F86D48486C7E4948D90FFC
804948D93FF8130F4948017F4A7E49485C49C75BA25B494B6D5A041F6E5A96C8FCACF107
F0BBFCA3C648C7391FC0001F190F1907B3B0486C4A6C497E007FD9FC0FB50083B512E0A3
4B467EC551>I<D91F801618D97FE0163CD9F078167C2603E01C16FC48486C4B5A260F80
0F4B5A6E6C1407271F0003E04A5A6FEC3FC0003ED901BE14FF923ACFC00FCF80007ED900
C1B5001FC7FC9238C03FF0007C92C7123E6F147E00FC0260147C601701604D5A1707604D
5A171F95C8FC173E007C02E0137E4B137C007E5E1601003E01015C4B485A6C13034B485A
6C6C48130F020E5C2607C00C49C9FC2603E01C5B2600F078133ED97FE05BD91F8001FCEB
03F090C848EB0FFC4B48EB1E0F030391387C03804CEBF801922707C001F013C0030FED00
E04C48481360DB1F0015704D481330033E1638037E010F1418157C4B5C0201171C4B011F
140C4A5A14075D4A5A141F92C7FC143E147E147C5C0101030F141C4A1718494881A24948
02071438010F18304A6E6C137049C81560496F6C13E0013EEF01C049DB00F8138001FCEE
7C034993381E0F0049EE0FFC0160EE03F046517BCA51>37 D<121EEA7F8012FF13C0A213
E0A3127FEA1E601200A413E013C0A312011380120313005A1206120E5A5A5A12600B1D78
C41B>39 D<140C141C1438147014E0EB01C01303EB0780EB0F00A2131E5BA25B13F85B12
015B1203A2485AA3485AA348C7FCA35AA2123EA2127EA4127CA312FCB3A2127CA3127EA4
123EA2123FA27EA36C7EA36C7EA36C7EA212017F12007F13787FA27F7FA2EB0780EB03C0
1301EB00E014701438141C140C166476CA26>I<12C07E12707E7E7E120F6C7E6C7EA26C
7E6C7EA21378137C133C133E131E131FA2EB0F80A3EB07C0A3EB03E0A314F0A21301A214
F8A41300A314FCB3A214F8A31301A414F0A21303A214E0A3EB07C0A3EB0F80A3EB1F00A2
131E133E133C137C13785BA2485A485AA2485A48C7FC120E5A5A5A5A5A16647BCA26>I<
16C04B7EB3AB007FBAFCBB1280A26C1900C8D801E0C9FCB3AB6F5A41407BB84C>43
D<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413E013C0A312011380120313005A
1206120E5A5A5A12600B1D78891B>I<B612C0A61A067F9721>I<121EEA7F80A2EAFFC0A4
EA7F80A2EA1E000A0A78891B>I<1618163C167CA2167816F8A216F01501A216E01503A2
16C01507A21680150FA2ED1F00A2151E153EA2153C157CA2157815F8A25D1401A24A5AA2
5D1407A25D140FA292C7FC5CA2141E143EA2143C147CA25CA25C1301A25C1303A25C1307
A25C130FA291C8FC5BA2133EA2133C137CA2137813F8A25B1201A25B1203A2485AA25B12
0FA290C9FC5AA2121E123EA2123C127CA2127812F8A25A126026647BCA31>I<14FF0107
13E090381F81F890383E007C01FC133F4848EB1F8049130F4848EB07C04848EB03E0A200
0F15F0491301001F15F8A2003F15FCA390C8FC4815FEA54815FFB3A46C15FEA56D130100
3F15FCA3001F15F8A26C6CEB03F0A36C6CEB07E0000315C06D130F6C6CEB1F806C6CEB3F
00013E137C90381F81F8903807FFE0010090C7FC28447CC131>I<143014F01301130313
1F13FFB5FC13E713071200B3B3B0497E497E007FB6FCA3204278C131>I<EB03FE90381F
FFC0017F13F03901F80FFC3903C001FE48486C7E000EC7EA7F8048EC3FC0ED1FE04815F0
0030140F007015F800601407126CB415FC7F7F1503A46C4813076CC7FCC8FC16F8A2150F
16F0151F16E0A2ED3FC0ED7F8016005D5D4A5A4A5A4A5A5D4A5A4A5A4AC7FC147C5C5C49
5A495A495A49C7120C131E5B013814185B5B485A4848143848C81230000E1570001FB612
F0A25A5AB712E0A326427BC131>I<49B4FC010F13E0013F13FC9038FE01FE3A01F0007F
80D803C0EB3FC048C7EA1FE0120EED0FF0EA0FE0486C14F8A215077F5BA26C48130FEA03
C0C813F0A3ED1FE0A2ED3FC01680ED7F0015FE4A5AEC03F0EC1FC0D90FFFC7FC15F09038
0001FCEC007FED3F80ED1FC0ED0FE016F0ED07F816FC150316FEA2150116FFA3121EEA7F
80487EA416FE491303A2007EC713FC00701407003015F80038140F6C15F06CEC1FE06C6C
EB3FC0D803E0EB7F803A01FE01FE0039007FFFF8010F13E0010190C7FC28447CC131>I<
ED0380A21507150FA2151F153FA2157F15FFA25CEC03BF153F14071406140C141C141814
301470146014C013011480EB03005B13065B131C13185B1370136013E0485A5B120390C7
FC1206120E120C5A123812305A12E0B812C0A3C8383F8000ADEDFFE0027FEBFFC0A32A43
7DC231>I<000615C0D807C0130701FCEB7F8090B612005D5D5D15E0158026063FFCC7FC
90C9FCAE14FF010713C090381F01F090383800FC01F0137ED807C07F49EB1F8016C090C7
120F000615E0C8EA07F0A316F81503A216FCA5123E127F487EA416F890C712075A006015
F0A20070140F003015E00038EC1FC07E001EEC3F806CEC7F006C6C13FE6C6C485A3901F8
07F039007FFFE0011F90C7FCEB07F826447BC131>I<EC07FCEC3FFF91B512C0903903FC
03E0903907E000F0D91FC0133849C71258017EEB01FC01FE1303491307485A485AA24848
EB03F8000FEC01F092C7FC485AA3485AA3127FA29038007F80903801FFF090380780FC39
FF0E003E49EB1F8049EB0FC049EB07E0136001E0EB03F04914F8150116FC5BED00FEA390
C812FFA47EA57F123FA216FE121F15016D14FC120FED03F86C7EED07F06C6C14E06C6CEB
0FC06C6CEB1F80017EEB3F0090383F80FE90380FFFF8010313E00100138028447CC131>
I<121CA2EA1F8090B712C0A3481680A217005E0038C8120C0030151C00705D0060153016
705E5E4814014B5A4BC7FCC81206150E5D151815385D156015E04A5AA24A5A140792C8FC
5CA25C141E143EA2147E147CA214FCA21301A3495AA41307A6130FAA6D5AEB01C02A457B
C231>I<14FF010713E0011F13F890387F00FE01FC133FD801F0EB1F804848EB0FC049EB
07E00007EC03F048481301A290C713F8481400A47FA26D130116F07F6C6CEB03E013FC6C
6CEB07C09039FF800F806C9038C01F006CEBF03EECF87839007FFEF090383FFFC07F0107
7F6D13F8497F90381E7FFFD97C1F1380496C13C02601E00313E048486C13F00007903800
7FF84848EB3FFC48C7120F003EEC07FE150148140016FF167F48153FA2161FA56C151E00
7C153EA2007E153C003E157C6C15F86DEB01F06C6CEB03E06C6CEB07C0D803F8EB1F80C6
B4EBFF0090383FFFFC010F13F00101138028447CC131>I<14FF010713E0011F13F89038
7F80FC9038FC007E48487F4848EB1F804848EB0FC0000FEC07E0485AED03F0485A16F800
7F140190C713FCA25AA216FE1500A516FFA46C5CA36C7E5D121F7F000F5C6C6C130E150C
6C6C131C6C6C5BD8007C5B90383F01E090390FFF80FE903801FE0090C8FC150116FCA4ED
03F8A216F0D80F801307486C14E0486C130F16C0ED1F80A249EB3F0049137E001EC75A00
1C495A000F495A3907E01FE06CB51280C649C7FCEB1FF028447CC131>I<121EEA7F80A2
EAFFC0A4EA7F80A2EA1E00C7FCB3A5121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A2B78AA
1B>I<121EEA7F80A2EAFFC0A4EA7F80A2EA1E00C7FCB3A5121E127FEAFF80A213C0A412
7F121E1200A512011380A3120313005A1206120E120C121C5A5A12600A3E78AA1B>I<00
7FBAFCBB1280A26C1900CEFCB0007FBAFCBB1280A26C190041187BA44C>61
D<EB0FFC90387FFFC03901F007F039078001FC000EC77E48147F48EC3F804815C0006014
1F00FE15E07E7FA56CC7FC001CEC3FC0C8FCED7F80A2EDFF004A5AEC03F84A5A5D4A5A4A
5A92C7FC143E143C5CA2147014F05CA25C1301A35CA990C9FCAAEB03C0EB0FF0A2497EA4
6D5AA2EB03C023467BC52E>63 D<16C04B7EA34B7EA34B7EA34B7EA3ED19FEA3ED30FFA2
03707FED607FA203E07FEDC03FA2020180ED801FA2DA03007F160FA20206801607A24A6D
7EA34A6D7EA34A6D7EA20270810260147FA202E08191B7FCA249820280C7121FA249C87F
170FA20106821707A2496F7EA3496F7EA3496F7EA201788313F8486C83D80FFF03037FB5
00E0027FEBFFC0A342477DC649>65 D<B8FC17E017FC00019039C00003FF6C6C4801007F
EF3FC0717E717E717E84170384170184A760A21703601707604D5A4D5AEF7FC04DC7FCEE
03FEEE3FF091B65A17FC0280C7B47EEF1FC0EF0FF0717E717E717E717E1980187F19C0A2
183F19E0A8F07FC0A2198018FF4D1300A24D5AEF0FFC4D5AEF7FE048486C903803FFC0B9
C7FC17FC17C03B447CC345>I<DB0FFE146092B500C013E0020314F0913A0FFC01FC0191
393FC0003E02FFC7EA0F83D903FCEC03C74948EC01E74948EC00FF4948157F4948153F49
48151F49C9120F485A491607120348481603A248481601A248481600A2123FA249176012
7FA31900485AAE6C7EA21960A2123F7FA2001F18E07F000F18C0A26C6C160119806C6C16
0312016DEE07006C6C16066D6C150E6D6C5D6D6C5D6D6C15786D6C5D6D6C4A5AD900FFEC
0780DA3FC0011FC7FCDA0FFC13FC0203B512F0020014C0DB0FFEC8FC3B487BC546>I<B8
FC17F017FC00019039C00007FF6C499038007FC0017FED1FE0EF07F0EF03FC717E717E84
727E727E727EA2727E85180385A2180185A38584A31A80AD1A00A36061A3611803611807
61180F614E5A183F614EC7FC18FEEF03FC4D5AEF1FE001FFED7FC0486DD907FFC8FCB812
FC17F094C9FC41447CC34B>I<B912F8A3000101C0C7127F6C6C48EC07FC17011700187C
183C181CA284A31806A4180704067FA395C7FCA4160EA2161E163E16FE91B5FCA3EC8000
163E161E160EA21606A319C0A3F0018093C7FCA41803A21900A260A260A2181EA2183E18
7EEF01FE170748486C147FB95AA33A447CC342>I<B912F0A3000101C0C7127F6C6C48EC
0FF817031701170018781838A2181CA3180CA4180E1806160CA21800A5161CA2163C167C
ED01FC91B5FCA3EC8001ED007C163C161CA2160CA793C8FCB08048487EB612F8A337447C
C340>I<DB0FFE146092B500C013E0020314F0913A0FFC01FC0191393FC0003E02FFC7EA
0F83D903FCEC03C74948EC01E74948EC00FF4948157F4948153F4948151F49C9120F485A
491607120348481603A248481601A248481600A2123FA2491760127FA396C7FC485AAD4C
B612C06C7EA293C7387FF000725A003F171F7FA2121F7F120FA26C7EA26C7E6C7EA26C7E
6D7E6D6C153F6D7E6D6C157F6D6C15E7D903FEEC01C7D900FFEC0383DA3FE0EB0F01DA0F
FCEBFE000203B500F81360020002E090C7FCDB0FFEC9FC42487BC54D>I<B6D8C003B6FC
A3000101E0C70007138026007F80913801FE00B3A991B7FCA30280C71201B3AC2601FFE0
913807FF80B6D8C003B6FCA340447CC349>I<B612F0A3C6EBF0006D5A6D5AB3B3B3A449
7E497EB612F0A31C447DC323>I<B612F8A3000101E0C9FC6C6C5A5CB3B31830A4187018
60A518E0A3EF01C0A217031707A2170F173F177FEE01FF48486C011F1380B9FCA334447C
C33D>76 D<B56C933807FFFC6E5EA20001F1FE0026006FE0EE1BF8A3D967F01633A2D963
F81663A3D961FC16C3A3D960FEED0183A2027FED0303A36E6C1406A36E6C140CA26E6C14
18A36E6C1430A36E6C1460A26E6C14C0A36E6CEB0180A3037FEB0300A292383F8006A36F
6C5AA36F6C5AA26F6C5AA36F6C5AA36F6C5AA26FB45AA370C7FC13F0A2486C143ED80FFF
EF0FFEB500F0011C0107B512FCA34E447BC359>I<B56C020FB5FC8080C6040013F06D6C
ED1F80D96FF8ED0F00A2D967FC1506EB63FEA2EB61FF01607FA26E7E6E7EA26E7E6E7EA2
6E7E6E7EA26E7E6E7FA26F7E6F7EA26F7E6F7EA26F7E6F7EA26F7E6F1380A2EE7FC0EE3F
E0A2EE1FF0EE0FF8A2EE07FCEE03FEA2EE01FF701386A2EF7FC6EF3FE6A2EF1FF6EF0FFE
A217071703A217011700A201F0167E183E487ED80FFF161EB500F0150EA2180640447CC3
49>I<ED1FFC4AB512C0913907F007F091391F8000FC027EC7123FD901F8EC0FC049486E
7E49486E7E49486E7E49486E7E49C9127E017E8201FE834848707E4848707EA24848707E
A2000F84491603001F84A24848707EA3007F84A24982A300FF1980AD6C6C4C1300A4003F
606D1603A2001F60A26C6C4C5AA26C6C4C5AA20003606D161F6C6C4C5A000060017F4CC7
FC6E5D013F5E6D6C4A5AD907E0EC03F06D6C4A5AD901FCEC1FC0D9007E4AC8FCDA1F8013
FC913907F007F00201B512C09126001FFCC9FC41487BC54C>I<B712FCEEFFC017F80001
9039C0000FFC6C6C48EB01FF9338007F80EF1FE0170FEF07F018F8EF03FCA218FE1701A2
18FFA718FEA2170318FCA2EF07F818F0EF0FE0EF1FC0EF7F80933801FE00EE0FFC91B612
F017800280C9FCB3AA3801FFE0B612C0A338447CC342>I<B712E016FF17C000019039C0
003FF86C6C48EB03FCEE00FF717E717E717E717E717EA284170384A760A21707604D5AA2
4D5A4D5A4DC8FCEE01FEEE07F8EE3FE091B6C9FC16FC913980007F80EE0FE0707EEE03FC
707E160083717EA2717EA784A71A6084171FA21AE0716C13C02601FFE002071301B600C0
1680943801FC03943900FE0700CBEA3FFEF007F843467CC348>82
D<49B41303010FEBE007013F13F89039FE00FE0FD801F8131FD807E0EB079F49EB03DF48
486DB4FC48C8FC4881003E81127E82127C00FC81A282A37E82A27EA26C6C91C7FC7F7FEA
3FF813FE381FFFE06C13FE6CEBFFE06C14FC6C14FF6C15C0013F14F0010F80010180D900
1F7F14019138001FFF03031380816F13C0167F163F161F17E000C0150FA31607A37EA36C
16C0160F7E17806C151F6C16006C5D6D147ED8FBC05CD8F9F0495AD8F07C495A90393FC0
0FE0D8E00FB51280010149C7FC39C0003FF02B487BC536>I<003FB912F8A3903BF0001F
F8001F01806D481303003EC7150048187C0078183CA20070181CA30060180CA5481806A5
C81600B3B3A54B7EED7FFE49B77EA33F447DC346>I<B600C0010FB5FCA3000101E0C813
F026007F80ED1F80F00F00A21806B3B3A7180E6D6C150CA2181C131F6E1518010F163818
306D6C1570606D6C14016D6C5D6D6CEC0780027F4AC7FC6E6C131EDA1FE0137C913907FC
03F00201B55A6E6C1380DB07FCC8FC40467CC349>I<B60107B500F890380FFFFEA30003
01E0D9001F90C813F06C0180DA0FFCED3FC091C86C48ED1F006C871C0E6D6C6E7E1C0CA2
6D6C6F5DA36EDA06FF1538011F1A30A26E020E6D1470010FDB0C7F1560A26E021C7F0107
DB183F5DA2856D6CDA301F4A5AA36D6C4A6C6C49C7FCA36D6C4A6C6C1306A3DB80016E13
0E027FDA8003140CA2DBC00380023FDA00015CA203E081021F01066D5CA36E6C486E6C5A
A36E6C486E6C5AA36F48EC1FE1020360A2DBFE7015F302010160020F90C8FCA2DBFFE015
FB6E49EC07FEA36F486E5AA36FC86C5AA3031E6F5AA4030C16605F467EC364>87
D<EAFFFCA4EAF000B3B3B3B3B3A2EAFFFCA40E6476CA1B>91 D<EAFFFCA4EA003CB3B3B3
B3B3A2EAFFFCA40E647ECA1B>93 D<EB07FC90383FFF809038F80FE03903C003F048C66C
7E000E6D7ED80FC0137E486C137F6D6D7EA36F7EA26C5AEA0380C8FCA4EC0FFF49B5FC90
380FFE1FEB3FC0EBFF00EA03FC485A485A485A485A127F5B176048C7FCA3153FA36D137F
007F14EF6D9038C7E0C0003F13013A1FE00783F13B07F81E03FF802701FFFC0113003A00
1FE0007C2B2E7CAC31>97 D<EA01FC12FFA3120712031201B3EC03FC91380FFF8091383C
07E091387001F89039FDE0007E02807F01FFEC1F8091C713C049EC0FE049140717F0A2EE
03F8A217FCA2160117FEAB17FC1603A217F8A2EE07F0A26DEC0FE017C06D141F01FBEC3F
80D9F380EB7E00D9E1C05B9039E0F001F89039C03C07E09039801FFF80C7D803FCC7FC2F
467DC436>I<EC7F80903803FFF090380FC07C90383F000F01FCEB03804848EB01C00003
140F4848EB1FE049133F120F485AA2485AED1FC0007FEC070092C7FCA290C9FC5AAB7E7F
A2123F16307F001F15706C6C146016E06C6C14C06C6C13010001EC03806C6CEB0700013F
131E90381FC078903807FFF001001380242E7DAC2B>I<167FED3FFFA315018182B3EC7F
80903803FFF090380FC07C90383F000E017E1307496D5AD803F87F48487F5B000F81485A
A2485AA2127FA290C8FC5AAB7E7FA2123FA26C7EA2000F5D7F6C6C5B00035C6C6C903807
7F806C6C010E13C0013F011C13FE90380FC0F8903803FFE09026007F0013002F467DC436
>I<EB01FE903807FFC090381F03F090387E00FC49137E48487F485A4848EB1F80000F15
C049130F121F484814E01507A2007F15F090C7FCA25AA390B6FCA290C9FCA67EA27FA212
3F16306C7E1670000F15606D14E06C6C14C0000314016C6CEB03806C6CEB0700013E131E
90381F80F8903803FFE0010090C7FC242E7DAC2B>I<EC0FE0EC7FF8903801F81E903803
F03F90390FE07F8090381FC0FF5C133F495AA2ED7F0001FE131C92C7FCAFB67EA3C648C8
FCB3B2486C7E007F13FFA321467EC51E>I<EE0F80D901FCEB7FE0903A0FFF81F0F09039
3F07E3819039FC01FF033A01F800FE014848017E13E00007027FC7FC497F000F8149131F
001F81A9000F5D6D133F000792C7FC6D5B0003147E6C6C5B6D485A3903BF07E090380FFF
80260701FCC8FC90CAFCA25AA37F6C7E7F90B512F86C14FF16E06C15F86C6C8048B67E3A
07C0000FFF48481300003FC8EA3F80003E151F48ED0FC0A2481507A56C150F007C168000
7E151F003E16006C153E6C6C5CD807E0495AD801F8EB07E0D8007FEB3F8090261FFFFEC7
FC010113E02C427DAC31>I<EA01FC12FFA3120712031201B3EC01FE913807FFC091381E
07F091383801F802707FECE000D9FDC07F5C01FF147F91C7FCA25BA35BB3A8486CECFF80
B5D8F83F13FEA32F457DC436>I<EA01E0EA07F8A2487EA46C5AA2EA01E0C8FCADEA01FC
12FFA3120712031201B3B0487EB512F8A315437DC21C>I<EA01FC12FFA3120712031201
B3A292381FFFE0A36F1300ED07F816E05E5E030EC7FC5D5D5D5D4A5A4A5A4AC8FC5CEC3F
804A7E14FF9038FDCFE09038FF8FF01407496C7E01FC7F14016E7E81816F7E82151F6F7E
821507826F7E8282486C491380B5D8F81F13F8A32D457DC433>107
D<EA01FC12FFA3120712031201B3B3B3A5487EB512F8A315457DC41C>I<D801FC01FFEC
1FE000FF010701E0EBFFFC913B0F03F801E07F913C3C01FC07803F800007903C7000FE0E
001FC0000349D97E1C130F2601FDC0D97F38804A143001FFDA3FF06D7E91C75BA2495DA3
495DB3A8486C4A6C497EB5D8F81FB50003B512E0A34B2C7DAB52>I<3901FC01FE00FF90
3807FFC091381E07F091383801F8000701707F0003EBE0002601FDC07F5C01FF147F91C7
FCA25BA35BB3A8486CECFF80B5D8F83F13FEA32F2C7DAB36>I<EC7F80903803FFF09038
0FC0FC90383E001F496D7E496D7E48486D7E48486D7E48486D7E000F81A24848147E003F
157FA290C87E481680A44816C0AA6C1680A26D147F003F1600A2001F157E6D14FE000F5D
6D130100075D6C6C495A6C6C495A6C6C495A013E49C7FC90381FC0FE903807FFF8903800
7F802A2E7DAC31>I<3901FC03FC00FF90380FFF8091383C07E091387001F83A07FDE000
FE00030180137FD801FFEC3F8091C7EA1FC04915E049140F17F0160717F8160317FCA3EE
01FEABEE03FCA3EE07F8A217F0160F6D15E0EE1FC06D143F17806EEB7E00D9FDC05B9039
FCF003F891383C0FE091381FFF80DA03FCC7FC91C9FCAE487EB512F8A32F3F7DAB36>I<
91387F8003903903FFE00790380FE07890393F801C0F90387E000E496D5AD803F8EB039F
0007EC01BF4914FF48487F121F5B003F81A2485AA348C8FCAB6C7EA3123F7F121F6D5C12
0F6D5B12076C6C5B6C6C497E6C6C130E013F131C90380FC0F8903803FFE09038007F0091
C7FCAEEEFF80033F13FEA32F3F7DAB33>I<3903F803F000FFEB1FFCEC3C3EEC707F0007
EBE0FF3803F9C000015B13FBEC007E153C01FF13005BA45BB3A748B4FCB512FEA3202C7D
AB26>I<90383FE0183901FFFC383907E01F78390F0003F8001E1301481300007C147812
7800F81438A21518A27EA27E6C6C13006C7E13FC383FFFE06C13FC6C13FF6C14C06C14E0
C614F0011F13F81300EC0FFC140300C0EB01FE1400157E7E153EA27EA36C143C6C147C15
786C14F86CEB01F039F38003E039F1F00F8039E07FFE0038C00FF01F2E7DAC26>I<1306
A5130EA4131EA3133E137EA213FE12011207001FB512F0B6FCA2C648C7FCB3A4150CAA01
7E131C017F1318A26D133890381F8030ECC070903807E0E0903801FFC09038007F001E3E
7EBC26>I<D801FC147F00FFEC3FFFA300071401000380000181B3A85EA35DA212006D5B
017E9038077F80017F010E13C06D011C13FE90380FC078903803FFF09026007F8013002F
2D7DAB36>I<B539F001FFFCA3000790C7EA7FE06C48EC1F8000011600160E1200160C01
7F5CA280013F5CA26E1370011F146080010F5CA2ECF00101075CA26D6C48C7FCA26E5A01
011306A26D6C5AA214FF6E5AA215B8EC3FB015F06E5AA36E5AA26E5AA36EC8FC2E2C7EAA
33>I<B500E0B539E03FFF80A30007903C000FFE000FFC00D803FCD903F8EB03F8F001E0
120103015D6D80000060A26D6E13036DD9037E91C7FCA20280017F5B013FD9063F1306A2
D91FC06E5AED0C1FA2D90FE06E5AED180FA2D907F06E5AED3007A2D903F86E5AED6003A2
902601FCE06D5AEDC00117FCD900FFECFD80ED800017FF027F92C8FC92C77EA26E147E02
3E143EA2021E143C021C141CA2412C7EAA46>I<B539F007FFFCA30003D9C00113C0C649
6C1300017F14FC013F5C6E13E06D7E010F495A6D6C485A02F890C7FC903803FC06010113
0E6E5A903800FF186E5AEC3FF05D141F140F6E7E81140FEC0DFCEC19FEEC38FF4A7E9138
603F8002C07F0101131F49486C7E02007F01066D7E010E1303496D7E013C80017C80D801
FC1580D80FFE4913C0B5D8800F13FFA3302B7FAA33>I<B539F001FFFCA3000790C7EA7F
E06C48EC1F8000011600160E0000150C6D141C6D1418A26E1338013F1430A26D6C5BA26E
13E0010F5CA26D6C485AA2ECF803010391C7FCA2903801FC06A2ECFE0E0100130CA2EC7F
18A215B8EC3FB0A2EC1FE0A36E5AA26E5AA36EC8FCA21406A35CA25CA2123C007E5BB4FC
5CA25CEAFE01387C0380D87007C9FCEA3C1EEA0FFCEA03F02E3F7EAA33>I<003FB612E0
A29038C0003F90C713C0003CEC7F800038ECFF00A20030495A0070495AA24A5A0060495A
A24A5A4A5AA2C7485A4AC7FC5B5C495A13075C495A131F4A1360495A495AA249C712C048
5AA2485A485A1501485A48481303A24848EB07804848131F00FF14FF90B6FCA2232B7DAA
2B>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fk cmbx12 12 35
/Fk 35 122 df<EA07C0EA1FF0EA3FF8EA7FFCEAFFFEA7EA7FFCEA3FF8EA1FF0EA07C00F
0F788E1F>46 D<EC03C01407141F147FEB03FF133FB6FCA413C3EA0003B3B3ADB712FCA5
264177C038>49 D<ECFFE0010F13FE013F6D7E90B612E0000315F82607FC0313FE3A0FE0
007FFFD81F806D138048C7000F13C0488001C015E001F07F00FF6E13F07F17F881A46C5A
6C5A6C5AC9FC17F05DA217E05D17C04B13804B1300A2ED1FFC4B5A5E4B5A4B5A4A90C7FC
4A5A4A5AEC0FF04A5AEC3F804AC7127814FE495A494814F8D907E014F0495A495A49C8FC
017C140149140348B7FC4816E05A5A5A5A5AB8FC17C0A42D417BC038>I<ECFFF0010713
FF011F14C0017F14F049C66C7ED803F8EB3FFED807E06D7E81D80FF86D138013FE001F16
C07FA66C5A6C4815806C485BC814005D5E4B5A4B5A4B5A4A5B020F1380902607FFFEC7FC
15F815FF16C090C713F0ED3FFCED0FFEEEFF80816F13C017E0A26F13F0A217F8A3EA0FC0
EA3FF0487EA2487EA217F0A25D17E06C5A494913C05BD83F80491380D81FF0491300D80F
FEEBFFFE6CB612F800015D6C6C14C0011F49C7FC010113E02D427BC038>I<163FA25E5E
5D5DA25D5D5D5DA25D92B5FCEC01F7EC03E7140715C7EC0F87EC1F07143E147E147C14F8
EB01F0EB03E0130714C0EB0F80EB1F00133E5BA25B485A485A485A120F5B48C7FC123E5A
12FCB91280A5C8000F90C7FCAC027FB61280A531417DC038>I<0007150301E0143F01FF
EB07FF91B6FC5E5E5E5E5E16804BC7FC5D15E092C8FC01C0C9FCAAEC3FF001C1B5FC01C7
14C001DF14F09039FFE03FFC9138000FFE01FC6D7E01F06D13804915C0497F6C4815E0C8
FC6F13F0A317F8A4EA0F80EA3FE0487E12FF7FA317F05B5D6C4815E05B007EC74813C012
3E003F4A1380D81FC0491300D80FF0495AD807FEEBFFFC6CB612F0C65D013F1480010F01
FCC7FC010113C02D427BC038>I<EA07C0EA1FF0EA3FF8EA7FFCEAFFFEA7EA7FFCEA3FF8
EA1FF0EA07C0C7FCAEEA07C0EA1FF0EA3FF8EA7FFCEAFFFEA7EA7FFCEA3FF8EA1FF0EA07
C00F2C78AB1F>58 D<DCFFF01470031F01FF14F04AB6EAE0010207EDF803023FEDFE0791
B539E001FF0F4949C7EA3F9F010701F0EC0FFF4901C0804990C87E494881494881494816
7F4849163F4849161F5A4A160F485B19074890CAFC19035A5BA2007F1801A34994C7FC12
FFAE127F7F1AF0A2123FA27F6C18011AE06C7F19036C6D17C06E16077E6C6DEE0F806C6D
EE1F006D6C5E6D6C167E6D6C6C5D6D6D4A5A6D01F0EC07F0010101FEEC1FE06D903AFFF0
01FF80023F90B6C7FC020715FC020115F0DA001F1480030001F8C8FC44467AC451>67
D<BA1280A419C026003FFEC7121F1701EF007F183F181F180F180719E01803A31801A3EE
01E0F000F0A419001603A31607160F167F91B6FCA59138FE007F160F16071603A31601A6
93C9FCAFB712F0A53C447CC346>70 D<B712E0A5D8001F90C7FCB3B3B3A4B712E0A52344
7DC32A>73 D<B64BB512FE8181A281D8003F6D91C7EA780081013D7F81133C6E7E6E7F6E
7F6E7F6E7F82806E7F6E7F6F7E6F7F83816F7F6F7F6F7F6F7F6F7F8382707F707F707F70
7F8482707F707F717E7113807113C019E0837113F07113F87113FC7113FE19FF847213F8
84848484A28484197F193F191FA2190F1907B61603190119001A78A24F447CC358>78
D<B9FC18F018FE727E19E0D8001F90C7000F7F05017F716C7E727E727E721380A21AC084
A21AE0A91AC0A24E1380A21A00604E5A4E5A4D485A050F5B92B712C096C7FC18FC18C092
CBFCB3A7B712E0A543447DC34D>80 D<B812F8EFFFC018F818FE727ED8001F90C7003F13
E005037F05007F727E727E727EA28684A286A762A24E90C7FCA24E5A61187F943801FFF0
05075B053F138092B7C8FC18F818E018F892C77FEF3FFF050F7F717F717FA2717FA2717F
A785A61B0F85A2187F73131F72141EB700E06DEB803E72EBE0FC72EBFFF8060114F0726C
13E0CC0007138050457DC354>82 D<003FBA12E0A59026FE000FEB8003D87FE09338003F
F049171F90C71607A2007E1803007C1801A300781800A400F819F8481978A5C81700B3B3
A20107B8FCA545437CC24E>84 D<903801FFE0011F13FE017F6D7E48B612E03A03FE007F
F84848EB1FFC6D6D7E486C6D7EA26F7FA36F7F6C5A6C5AEA00F090C7FCA40203B5FC91B6
FC1307013F13F19038FFFC01000313E0000F1380381FFE00485A5B127F5B12FF5BA35DA2
6D5B6C6C5B4B13F0D83FFE013EEBFFC03A1FFF80FC7F0007EBFFF86CECE01FC66CEB8007
D90FFCC9FC322F7DAD36>97 D<EB7FC0B5FCA512037EB1ED0FF892B57E02C314E002CF14
F89139DFC03FFC9139FF000FFE02FCEB03FF4A6D13804A15C04A6D13E05CEF7FF0A218F8
173FA318FCAC18F8A2177F18F0A3EFFFE06E15C06E5B6E491380027C491300496C495A90
3AFC1FC07FFC496CB512F0D9F00314C049C691C7FCC8EA1FF036467DC43E>I<EC3FFC49
B512C0010F14F0013F14FC90397FF003FE9039FFC001FF0003495A48494813805B120F48
5AA2485A6F1300007F6E5AED00784991C7FCA212FFAC6C7EA3123F6DEC03C0A26C6C1407
000F16806D140F6C6DEB1F006C6D133E6C01F05B3A007FFC03F86DB55A010F14C0010391
C7FC9038003FF82A2F7CAD32>I<EE03FEED07FFA5ED001F160FB1EC3FE0903803FFFC01
0FEBFF8F013F14CF9039FFF807FF48EBC00148903880007F4890C7123F4848141F49140F
121F485AA3127F5BA212FFAC127FA37F123FA26C6C141FA26C6C143F0007157F6C6C91B5
FC6CD9C00314FC6C9038F01FEF6DB5128F011FEBFE0F010713F89026007FC0EBF8003646
7CC43E>I<EC3FF80103B57E010F14E0013F8090397FF83FF89039FFC007FC48496C7E48
496C7E48486D1380485A001FED7FC05B003FED3FE0A2127F5B17F0161F12FFA290B7FCA4
01F0C9FCA5127FA27FA2123F17F06C7E16016C6C15E06C6C14036C6DEB07C06C6DEB0F80
6C01F0EB3F0090397FFE01FE011FB55A010714F0010114C09026001FFEC7FC2C2F7DAD33
>I<EDFF80020F13E0027F13F049B512F849EB8FFC90390FFE0FFE90381FFC1F14F8133F
EB7FF0A2ED0FFCEBFFE0ED03F0ED00C01600ABB612F8A5C601E0C7FCB3B0007FEBFFE0A5
27467DC522>I<DAFFE0137E010F9039FE03FF80013FEBFF8F90B812C048D9C07F133F48
9038001FF84848EB0FFC4848903907FE1F80001F9238FF0F00496D90C7FCA2003F82A800
1F93C7FCA26D5B000F5D6C6C495A6C6C495A6C9038C07FF04890B55A1680D8078F49C8FC
018013E0000F90CAFCA47F7F7F90B612C016FC6CEDFF8017E06C826C16FC7E000382000F
82D81FF0C77ED83FC014074848020113808248C9FC177FA46D15FF007F17006D5C6C6C4A
5A6C6C4A5AD80FFEEC3FF83B07FFC001FFF0000190B612C06C6C92C7FC010F14F8D9007F
90C8FC32427DAC38>I<EB7FC0B5FCA512037EB1ED07FE92383FFF8092B512E002C114F8
9139C7F03FFC9138CF801F9139DF000FFE14DE14FC4A6D7E5CA25CA35CB3A7B60083B512
FEA537457CC43E>I<137C48B4FC4813804813C0A24813E0A56C13C0A26C13806C1300EA
007C90C7FCAAEB7FC0EA7FFFA512037EB3AFB6FCA518467CC520>I<EB7FC0B5FCA51203
7EB293387FFFE0A593380FE0004C5A4CC7FC167E5EED03F8ED07E04B5A4B5A037FC8FC15
FEECC1FCECC3FE14C7ECDFFF91B57E82A202F97F02E17F02C07FEC807F6F7E826F7E816F
7F836F7F816F7F83707E163FB60003B512F8A535457DC43B>107
D<EB7FC0B5FCA512037EB3B3B3A3B61280A519457CC420>I<90277F8007FEEC0FFCB590
263FFFC090387FFF8092B5D8F001B512E002816E4880913D87F01FFC0FE03FF8913D8FC0
0FFE1F801FFC0003D99F009026FF3E007F6C019E6D013C130F02BC5D02F86D496D7EA24A
5D4A5DA34A5DB3A7B60081B60003B512FEA5572D7CAC5E>I<90397F8007FEB590383FFF
8092B512E0028114F8913987F03FFC91388F801F000390399F000FFE6C139E14BC02F86D
7E5CA25CA35CB3A7B60083B512FEA5372D7CAC3E>I<EC1FFC49B512C0010714F0011F14
FC90397FF80FFF9026FFC0017F48496C7F4848C7EA3FE000078248486E7E49140F001F82
A2003F82491407007F82A400FF1780AA007F1700A46C6C4A5AA2001F5E6D141F000F5E6C
6C4A5AA26C6C6CEBFFE06C6D485B27007FF80F90C7FC6DB55A010F14F8010114C0902600
1FFCC8FC312F7DAD38>I<90397FC00FF8B590B57E02C314E002CF14F89139DFC03FFC91
39FF001FFE000301FCEB07FF6C496D13804A15C04A6D13E05C7013F0A2EF7FF8A4EF3FFC
ACEF7FF8A318F017FFA24C13E06E15C06E5B6E4913806E4913006E495A9139DFC07FFC02
CFB512F002C314C002C091C7FCED1FF092C9FCADB67EA536407DAC3E>I<90387F807FB5
3881FFE0028313F0028F13F8ED8FFC91389F1FFE000313BE6C13BC14F8A214F0ED0FFC91
38E007F8ED01E092C7FCA35CB3A5B612E0A5272D7DAC2E>114 D<90391FFC038090B512
87000314FF120F381FF003383FC00049133F48C7121F127E00FE140FA215077EA27F01E0
90C7FC13FE387FFFF014FF6C14C015F06C14FC6C800003806C15806C7E010F14C0EB003F
020313E0140000F0143FA26C141F150FA27EA26C15C06C141FA26DEB3F8001E0EB7F0090
38F803FE90B55A00FC5CD8F03F13E026E007FEC7FC232F7CAD2C>I<EB01E0A51303A413
07A2130FA2131FA2133F137F13FF1203000F90B51280B7FCA4C601E0C7FCB3A3ED01E0A9
150302F013C0137F150790393FF80F8090391FFC1F006DB5FC6D13FC01015B9038003FE0
23407EBE2C>I<D97FC049B4FCB50103B5FCA50003EC000F6C81B3A85EA25EA25E7E6E49
1380017FD901F713FE9138F807E76DB512C7010F1407010313FE9026007FF0EBFC00372E
7CAC3E>I<B500FE90383FFFF0A5C601F0903803E0006D6C495A013F4A5A6D6C49C7FC6E
5B6D6C137E6DEB807C6D6D5A6DEBC1F0EDE3E06DEBF7C06EB45A806E90C8FC5D6E7E6E7F
6E7FA24A7F4A7F8291381F3FFCEC3E1F027C7F4A6C7E49486C7F01036D7F49487E02C080
49486C7F49C76C7E013E6E7E017E141FB500E090B512FCA5362C7EAB3B>120
D<B6903803FFFCA5000101E09038003E006C163C80017F5D8017F8013F5D6E1301011F5D
6E1303010F5D6E13076D5DED800F6D92C7FC15C05E6DEBE01E163E6D143CEDF07C027F13
78EDF8F8023F5B15FD021F5B15FF6E5BA36E5BA26E90C8FCA26E5AA26E5AA21578A215F8
5D14015D001F1303D83F805B387FC007D8FFE05B140F92C9FC5C143E495A387FC1F8EB07
F06CB45A6C5B000790CAFCEA01FC36407EAB3B>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fl cmr10 10.95 65
/Fl 65 124 df<1430147014E0EB01C0EB03801307EB0F00131E133E133C5B13F85B1201
5B1203A2485AA2120F5BA2121F90C7FCA25AA3123E127EA6127C12FCB2127C127EA6123E
123FA37EA27F120FA27F1207A26C7EA212017F12007F13787F133E131E7FEB07801303EB
01C0EB00E014701430145A77C323>40 D<12C07E12707E7E121E7E6C7E7F12036C7E7F12
007F1378137CA27FA2133F7FA21480130FA214C0A3130714E0A6130314F0B214E01307A6
14C0130FA31480A2131F1400A25B133EA25BA2137813F85B12015B485A12075B48C7FC12
1E121C5A5A5A5A145A7BC323>I<121EEA7F8012FF13C0A213E0A3127FEA1E601200A413
E013C0A312011380120313005A120E5A1218123812300B1C798919>44
D<B512FEA617067F961E>I<121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A0A798919>I<EB
01FE90380FFFC090383F03F090387C00F849137C48487F48487F4848EB0F80A2000F15C0
4848EB07E0A3003F15F0A290C712034815F8A64815FCB3A26C15F8A56C6CEB07F0A3001F
15E0A36C6CEB0FC0A26C6CEB1F80000315006C6C133E6C6C5B017C5B90383F03F090380F
FFC0D901FEC7FC263F7DBC2D>48 D<EB01C013031307131F137FEA07FFB5FC139FEAF81F
1200B3B3ACEB7FF0B612F8A31D3D78BC2D>I<EB07FC90383FFF8090B512E03903F01FF8
3907C007FC390F0001FE001E6D7E001C1580003CEC7FC05AED3FE01270B4FC6DEB1FF07F
A56C5A6CC7FC120CC813E0153FA216C0157F168015FF16004A5A5D4A5A4A5A5D4A5A4A5A
4AC7FC147E147C5C495A495A495A495A49C71270133E133C5B4914E0485A485A485A48C7
120148B6FCA25A4815C0B7FCA3243D7CBC2D>I<EB07FC90383FFF809038F80FE03901E0
03F839078001FCD80F007F000E6D7E001E1580D81F80137F486C14C07FA27F5BA2121F6C
5AC8138015FF1600A24A5AA24A5A5DEC07E04A5A023FC7FCEB1FFCECFF809038000FE0EC
07F86E7E6E7E6E7E1680ED7FC0A216E0153FA216F0A2120C123F487E487EA316E0A24913
7F6CC713C01278EDFF807E6C4913006C495A3907C007FC3903F80FF0C6B55A013F1380D9
07F8C7FC243F7CBC2D>I<150E151E153EA2157EA215FE1401A21403EC077E1406140E14
1CA214381470A214E0EB01C0A2EB0380EB0700A2130E5BA25B5BA25B5B1201485A90C7FC
5A120E120C121C5AA25A5AB8FCA3C8EAFE00AC4A7E49B6FCA3283E7EBD2D>I<00061403
D80780131F01F813FE90B5FC5D5D5D15C092C7FC14FCEB3FE090C9FCACEB01FE90380FFF
8090383E03E090387001F8496C7E49137E497F90C713800006141FC813C0A216E0150FA3
16F0A3120C127F7F12FFA416E090C7121F12FC007015C012780038EC3F80123C6CEC7F00
001F14FE6C6C485A6C6C485A3903F80FE0C6B55A013F90C7FCEB07F8243F7CBC2D>I<EC
1FE0ECFFF8903803F03E90380FC00F90391F000780133E017EEB1FC049133F4848137F12
035B12074848EB3F80ED1F00001F91C7FC5BA2123FA3485AA214FE903887FF8039FF8F07
E090389C01F09038B800FC01B0137E13F0497F16804914C0A2ED1FE0A34914F0A5127FA6
123F6D14E0A2121FED3FC0A26C6C1480A20007EC7F006C6C137E6C6C5B6C6C485A90387E
07F06DB45A010F1380D903FCC7FC243F7CBC2D>I<1238123C123F90B612FCA316F85A16
F016E00078C712010070EC03C0ED078016005D48141E151C153C5DC8127015F04A5A5D14
034A5A92C7FC5C141EA25CA2147C147814F8A213015C1303A31307A3130F5CA2131FA613
3FAA6D5A0107C8FC26407BBD2D>I<EB03FC90381FFF8090387C07E09038F001F83901E0
007C48487F48487F48C7FCED0F80121E16C0003E1407A4123FA26DEB0F807F6C6C131F6D
140001FC133E6C6C5B9038FF80786C6D5A6CEBF3E06CEBFF806C91C7FC133F6D13C06D7F
013F13F801787F48486C7E3903E01FFF48486C1380260F800313C048487E489038007FE0
003E143F007E141F007CEC0FF01507481403A31501A46C15E0007C1403A2007E15C06C14
076CEC0F806DEB1F006C6C133ED807F05B3901FC03F86CB512E0011F1380D903FCC7FC24
3F7CBC2D>I<EB03FCEB1FFF90387E07C09038FC03F048486C7E48486C7E4848137C000F
147E4848137F81003F15805B007F15C0A2151F12FF16E0A516F0A5127F153FA36C7EA200
1F147F120F6C6C13FF6D13DF000313013900F8039F90387E0F1FD91FFE13E0EB07F090C7
FCA2ED3FC0A41680157FD80F801400487E486C13FEA24A5A5D49485AEB8007391E000FE0
001F495A260FC07FC7FC3803FFFE6C13F838003FC0243F7CBC2D>I<121EEA7F80A2EAFF
C0A4EA7F80A2EA1E00C7FCB3121EEA7F80A2EAFFC0A4EA7F80A2EA1E000A2779A619>I<
15074B7EA34B7EA34B7EA34B7EA34B7E15E7A2913801C7FC15C3A291380381FEA34AC67E
A3020E6D7EA34A6D7EA34A6D7EA34A6D7EA34A6D7EA349486D7E91B6FCA2498191388000
01A249C87EA24982010E157FA2011E82011C153FA2013C820138151FA2017882170F13FC
00034C7ED80FFF4B7EB500F0010FB512F8A33D417DC044>65 D<B712FCEEFF8017F00001
903980000FF86C6CC7EA03FE707E701380EF7FC0EF3FE0A2EF1FF0A218F8A3170F171FA3
18F0A2EF3FE0177F18C0EFFF804C1300EE03FCEE0FF8EE7FE091B6C7FC17E091C7EA07FC
EE01FE933800FF80EF7FC0EF3FE0EF1FF018F8170F18FC1707A218FEA718FC170FA2EF1F
F818F0173FEF7FE0EFFFC00403138048486C90380FFE00B85A17E094C7FC373E7DBD40>
I<DB3FF01306912603FFFE130E020F9038FF801E913A3FF007E03E9139FF8000F8D903FE
C7EA7C7ED907F8EC1EFE4948140FD93FE0140749481403495A91C8120148481500120348
48167E5B000F173EA24848161EA2123F5B180E127FA349160012FFAC127F7F180EA2123F
A27F001F171E181C6C7EA20007173C6D16386C6C1678000117706C6C16F06EEC01E06D6C
15C06D6C1403D90FF0EC07806D6CEC1F00D903FE143E902600FF8013F891393FF007F002
0FB512C0020391C7FC9138003FF037427BBF42>I<B712FCEEFF8017E000019039C0001F
F86C6C48EB03FEEE00FF717E717EEF0FE084717E717E170184717EA21980187F19C0A3F0
3FE0A519F0AB19E0A5F07FC0A21980A218FF19004D5AA24D5A6017074D5A4D5AEF7FC04D
C7FCEE03FE48486CEB1FF8B85A178004FCC8FC3C3E7DBD45>I<B912E0A300019038C000
016C6C48EB001FEF0FF01703A217011700A31870A41838161CA41800A2163CA2167C16FC
150391B5FCA3EC80031500167C163CA2161CA21807A3180E93C7FCA4181E181CA2183CA2
187CA218F8170117031707171F48486CEB01FFB912F0A3383E7DBD3E>I<B91280A30001
9038C000036C6C48EB007FEF1FC0170F1707A21703A31701A4EF00E0A21638A31800A316
78A216F81501150791B5FCA3EC8007150115001678A21638A693C8FCAF3801FFE0B612F0
A3333E7DBD3B>I<DB3FE0130C912603FFFE131C021F9038FF803C913A7FF00FC07C9139
FF0001F0D903FC90380078FC4948143DD91FE0141F4948140F4948140701FF15034890C8
FC491501485A000716005B000F177C5B001F173CA2485AA2181C127FA25B95C7FC12FFAB
041FB512F0127FA26D9139000FFE00EF03FC123FA27F121FA26C7EA212077F12036C7E7F
6C7F6D6C14076D7E6D6C140FD907F8141ED903FEEC3C7C902600FF80EBF83C913A7FF007
F01C021FB5EAC00C020391C8FC9138003FF03C427BBF47>I<B6D8C01FB512F8A3000101
E0C7383FFC0026007F80EC0FF0B3A691B7FCA30280C7120FB3A92601FFE0EC3FFCB6D8C0
1FB512F8A33D3E7DBD44>I<B612F0A3C6EBF000EB3FC0B3B3B2EBFFF0B612F0A31C3E7E
BD21>I<011FB512FCA3D9000713006E5A1401B3B3A6123FEA7F80EAFFC0A44A5A1380D8
7F005B007C130700385C003C495A6C495A6C495A2603E07EC7FC3800FFF8EB3FC026407C
BD2F>I<B612F8A3000101E0C9FC38007F80B3B0EF0380A517071800A45FA35FA25F5F5F
4C5A160748486C133FB8FCA3313E7DBD39>76 D<B500C093383FFFF0A300016D93387FF8
00D8007F18E0D977F016EFA3D973F8ED01CFA2D971FCED038FA3D970FEED070FA26E150E
80A26E6C141CA36E6C1438A26E6C1470A36E6C14E0A26E6CEB01C0A36E6CEB0380A36E6C
EB0700A2037F130EA36F6C5AA26F6C5AA36F6C5AA25FED07F0A2923803F9C0A36FB45AA2
6F90C7FCA213F8486C147ED807FFEF3FF8B500F8013C011FB512F0A34C3E7DBD53>I<B5
6C91B512F88080D8007F030713006EEC01FC6E6E5A1870EB77FCEB73FEA2EB71FF01707F
A26E7E6E7EA26E7E6E7EA26E7E6E7EA26E7E6E7FA26F7E6F7EA26F7E6F7EA26F7E6F7EA2
6F7E6F1380A2EE7FC0EE3FE0A2EE1FF0EE0FF8A2EE07FCEE03FEA2EE01FF7013F0A2177F
173FA2171F170FA2170701F81503487ED807FF1501B500F81400A218703D3E7DBD44>I<
ED7FE0913807FFFE91391FC03F8091397E0007E04948EB03F8D907F0EB00FE4948147F49
486E7E49486E7E49C86C7E01FE6F7E00018349150300038348486F7EA248486F7EA2001F
188049167F003F18C0A3007F18E049163FA300FF18F0AC007F18E06D167FA4003F18C0A2
6C6CEEFF80A36C6C4B1300A26C6C4B5A00035F6D150700015F6C6C4B5A6D5E6D6C4A5A6D
6C4A5A6D6C4AC7FC6D6C14FED901FCEB03F8D9007FEB0FE091391FC03F80912607FFFEC8
FC9138007FE03C427BBF47>I<B712F8EEFF8017E000019039C0003FF86C6C48EB07FCEE
01FE707EEF7F80EF3FC018E0A2EF1FF0A218F8A818F0A2EF3FE0A218C0EF7F80EFFF004C
5AEE07FCEE3FF091B612C04CC7FC0280C9FCB3A73801FFE0B612C0A3353E7DBD3E>I<B7
12C016FCEEFF800001D9C00013E06C6C48EB1FF0EE07FCEE01FE707E84717EA2717EA284
A760177F606017FF95C7FCEE01FCEE07F8EE1FE0EEFF8091B500FCC8FC16F091388001FC
ED003FEE1FC0707E707E83160383160183A383A484A4F0C004190EA28218E0057F131E26
01FFE0161CB600C0EB3FF094381FF83805071370CA3801FFE09438003F803F407DBD43>
82 D<D907FC130C90391FFF801C017FEBF03C3901FC03F83A03F0007E7CD807C0EB1FFC
4848130F001F140748C71203003E1401007E1400A2007C157C12FCA2163CA36C151CA27E
A26C6C14007F7FEA3FF8EBFF806C13F86CEBFF806C14F06C14FC6C14FF6C15C0013F14E0
010714F0EB007F020713F89138007FFC150FED07FE15031501ED00FFA200E0157FA3163F
A27EA3163E7E167E6C157C6C15FC6C15F86D13016DEB03F06DEB07E0D8F9FCEB0FC03AF0
7F803F8090391FFFFE00D8E00713F839C0007FC028427BBF33>I<003FB91280A3903AF0
007FE001018090393FC0003F48C7ED1FC0007E1707127C00781703A300701701A548EF00
E0A5C81600B3B14B7E4B7E0107B612FEA33B3D7DBC42>I<B600C090B512F8A3000101E0
C70007130026007F80EC01FC715A1870B3B3A4013F16F06E5DA21701011F5E80010F1503
6E4A5A010793C7FC6D6C5C6D6C141E6D6C5C027F14F86E6C485A91390FF00FE00203B512
80020049C8FCED1FF03D407DBD44>I<B691380FFFFEA3000301E0020113E06C01809138
007F806CEF3F00017F163E181C6E153C013F1638A26E1578011F1670A26D6C5DA26E1401
01075EA26E140301035EA26D6C4AC7FCA2806D150EA26F131E027F141CA26F133C023F14
38A26E6C5BA26F13F0020F5CA2EDF80102075CA26E6C485AA2EDFE07020191C8FCA26F5A
6E130EA2ED7F9CA216DCED3FF8A36F5AA36F5AA26F5AA36F5A3F407EBD44>I<B500FE01
7FB5D88007B5FCA3000301C0010101E0C713F86C90C849EC3FE07148EC0F807E7215006E
143F017F190E84A26D6C60A24D7E6D6C60A2EFE7F86D6C60A2933801C3FC6E18F0010761
04037F6E0281140101036104077F17006D6C4D5AA2040EEB7F806D6C4DC7FCA24CEB3FC0
DA7F80160EA24CEB1FE003C0161E023F171C047814F0DBE070010F133C021F173804F014
F84C1307DA0FF05EA2DBF1C0EB03FCDA07F95EA2DBFB80EB01FEDA03FF6F5AA293C8FCA2
6E5FA24B157F020094C8FCA24B81037C153EA20378151E0338151C58407EBD5D>I<B66C
0103B51280A3000101F0C8EBF8006C6C48ED3FC0725A013F041EC7FC6D7E606D6C15386D
6C1578606D6C5D6E14016D5E6D6D1303606E6C49C8FC6E6C5B170E6E6C131E171C6E6C5B
6E6C137817706E6C13F06F5B6E13016EEB83C05FED7FC7DB3FE7C9FC16EFED1FFE5E150F
6F5AB3A4ED1FFC020FB512FCA3413E7FBD44>89 D<EAFFFCA4EAF000B3B3B3B3ABEAFFFC
A40E5B77C319>91 D<EAFFFCA4EA003CB3B3B3B3ABEAFFFCA40E5B7FC319>93
D<EB0FF8EBFFFE3903F01F8039078007E0000F6D7E9038E001F8D81FF07F6E7EA3157F6C
5AEA0380C8FCA4EC1FFF0103B5FC90381FF87FEB7F803801FC00EA07F8EA0FE0485A485A
A248C7FCEE038012FEA315FFA3007F5BEC03BF3B3F80071F8700261FC00E13CF3A07F03C
0FFE3A01FFF807FC3A003FC001F0292A7DA82D>97 D<EA01FC12FFA3120712031201B1EC
03FC91381FFF8091387C07E09039FDE001F09039FFC000FC4A137E91C77E49158049141F
17C0EE0FE0A217F0A2160717F8AA17F0A2160FA217E0161F17C06D1580EE3F006D5C6E13
FE9039F3C001F89039F1E003F09039E0780FC09026C03FFFC7FCC7EA07F82D407EBE33>
I<49B4FC010F13E090383F00F8017C131E4848131F4848137F0007ECFF80485A5B121FA2
4848EB7F00151C007F91C7FCA290C9FC5AAB6C7EA3003FEC01C07F001F140316806C6C13
076C6C14000003140E6C6C131E6C6C137890383F01F090380FFFC0D901FEC7FC222A7DA8
28>I<ED01FC15FFA3150715031501B114FF010713E190381F80F990387E003D49131FD8
03F81307485A49130348481301121F123F5B127FA290C7FCA25AAA7E7FA2123FA26C7E00
0F14037F000714076C6C497E6C6C497ED8007C017913F890383F01F190380FFFC1903A01
FE01FC002D407DBE33>I<EB01FE90380FFFC090383F03F09038FC01F848486C7E484813
7E48487F000F158049131F001F15C04848130FA2127F16E090C7FCA25AA290B6FCA290C9
FCA67EA27F123F16E06C7E1501000F15C06C6C13036DEB07806C6C1400C66C131E017E5B
90381F80F8903807FFE0010090C7FC232A7EA828>I<EC1FC0EC7FF8903801F83C903807
E07E90380FC0FFEB1FC1EB3F811401137FEC00FE01FE137C1500AEB6FCA3C648C7FCB3AE
487E007F13FFA320407EBF1C>I<167C903903F801FF903A1FFF078F8090397E0FDE1F90
38F803F83803F001A23B07E000FC0600000F6EC7FC49137E001F147FA8000F147E6D13FE
00075C6C6C485AA23901F803E03903FE0FC026071FFFC8FCEB03F80006CAFC120EA3120F
A27F7F6CB512E015FE6C6E7E6C15E06C810003813A0FC0001FFC48C7EA01FE003E140048
157E825A82A46C5D007C153E007E157E6C5D6C6C495A6C6C495AD803F0EB0FC0D800FE01
7FC7FC90383FFFFC010313C0293D7EA82D>I<EA01FC12FFA3120712031201B1EC01FE91
3807FFC091381E07E091387803F09138E001F8D9FDC07F148001FF6D7E91C7FCA25BA25B
B3A6486C497EB5D8F87F13FCA32E3F7DBE33>I<EA01E0EA07F8A2487EA46C5AA2EA01E0
C8FCACEA01FC127FA3120712031201B3AC487EB512F0A3143E7DBD1A>I<EA01FC12FFA3
120712031201B292B51280A392383FFC0016E0168093C7FC153C5D5D4A5AEC07C04A5A4A
C8FC143E147F4A7E13FD9038FFDFC0EC9FE0140F496C7E01FC7F496C7E1401816E7E8182
6F7E151F826F7EA282486C14FEB539F07FFFE0A32B3F7EBE30>107
D<EA01FC12FFA3120712031201B3B3B1487EB512F8A3153F7DBE1A>I<2701F801FE14FF
00FF902707FFC00313E0913B1E07E00F03F0913B7803F03C01F80007903BE001F87000FC
2603F9C06D487F000101805C01FBD900FF147F91C75B13FF4992C7FCA2495CB3A6486C49
6CECFF80B5D8F87FD9FC3F13FEA347287DA74C>I<3901F801FE00FF903807FFC091381E
07E091387803F000079038E001F82603F9C07F0001138001FB6D7E91C7FC13FF5BA25BB3
A6486C497EB5D8F87F13FCA32E287DA733>I<14FF010713E090381F81F890387E007E01
F8131F4848EB0F804848EB07C04848EB03E0000F15F04848EB01F8A2003F15FCA248C812
FEA44815FFA96C15FEA36C6CEB01FCA3001F15F86C6CEB03F0A26C6CEB07E06C6CEB0FC0
6C6CEB1F80D8007EEB7E0090383F81FC90380FFFF0010090C7FC282A7EA82D>I<3901FC
03FC00FF90381FFF8091387C0FE09039FDE003F03A07FFC001FC6C496C7E6C90C7127F49
EC3F805BEE1FC017E0A2EE0FF0A3EE07F8AAEE0FF0A4EE1FE0A2EE3FC06D1580EE7F007F
6E13FE9138C001F89039FDE007F09039FC780FC0DA3FFFC7FCEC07F891C9FCAD487EB512
F8A32D3A7EA733>I<3901F807E000FFEB1FF8EC787CECE1FE3807F9C100031381EA01FB
1401EC00FC01FF1330491300A35BB3A5487EB512FEA31F287EA724>114
D<90383FC0603901FFF8E03807C03F381F000F003E1307003C1303127C0078130112F814
00A27E7E7E6D1300EA7FF8EBFFC06C13F86C13FE6C7F6C1480000114C0D8003F13E00103
13F0EB001FEC0FF800E01303A214017E1400A27E15F07E14016C14E06CEB03C090388007
8039F3E01F0038E0FFFC38C01FE01D2A7DA824>I<131CA6133CA4137CA213FCA2120112
031207001FB512C0B6FCA2D801FCC7FCB3A215E0A912009038FE01C0A2EB7F03013F1380
90381F8700EB07FEEB01F81B397EB723>I<D801FC14FE00FF147FA30007140300031401
00011400B3A51501A31503120015076DEB06FF017E010E13806D4913FC90381FC0789038
07FFE00100903880FE002E297DA733>I<B539E00FFFE0A32707FE000313006C48EB00FC
5E00015D7F00005DA26D13016D5CA26D6C485AA2ECC007011F91C7FCA290380FE00EA2EC
F01E0107131CA26D6C5AA2ECFC7801011370A2ECFEF001005BA2EC7FC0A36E5AA26EC8FC
A3140E2B287EA630>I<B53BC3FFFE03FFF8A3290FFE003FE00013C06C486D48EB3F806C
4817006D010F141E00016F131C15076D163C00004A6C1338A2017F5E4B7E151DD93F805D
ED3DFC1538D91FC04A5AED78FE9238707E03D90FE0017F5BEDE03F02F0140701070387C7
FC9138F1C01F02F9148F010315CE9138FB800F02FF14DE6D15FCED00076D5DA24A130302
7E5CA2027C1301023C5C023813003D287EA642>I<B539F01FFFE0A30003D9C00F1300C6
90388007F8D97F0013E002805BD93FC05B011F49C7FC90380FE00EECF01E6D6C5A01035B
6D6C5A6E5AEB00FF6E5A6E5A81141F814A7E81147BECF1FC903801E1FEECC0FF01037F49
486C7ED90F007F011E6D7E013E130F496D7E01FC80486C80000F4A7EB539803FFFF8A32D
277FA630>I<B539E00FFFE0A32707FE000313006C48EB01FC6F5A00015D7F00005DA201
7F495AA2EC8003013F5CA26D6C48C7FCA26E5A010F130EA26D6C5AA2ECF83C01031338A2
6D6C5AA2ECFEF001005BA2EC7FC0A36E5AA36EC8FCA2140EA2141E141C143C1438A21478
00181370127EB45BA2495AA248485AD87E07C9FCEA780EEA3C3CEA1FF8EA07E02B3A7EA6
30>I<001FB61280A2EBE0000180140049485A001E495A121C4A5A003C495A141F00385C
4A5A147F5D4AC7FCC6485AA2495A495A130F5C495A90393FC00380A2EB7F80EBFF005A5B
484813071207491400485A48485BA248485B4848137F00FF495A90B6FCA221277EA628>
I<B812F0A22C0280982D>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fm cmbx10 10.95 7
/Fm 7 117 df<16FCA24B7EA24B7EA34B7FA24B7FA34B7FA24B7FA34B7F157C03FC7FED
F87FA2020180EDF03F0203804B7E02078115C082020F814B7E021F811500824A81023E7F
027E81027C7FA202FC814A147F49B77EA34982A2D907E0C7001F7F4A80010F835C83011F
8391C87E4983133E83017E83017C81B500FC91B612FCA5463F7CBE4F>65
D<903807FFC0013F13F848B6FC48812607FE037F260FF8007F6DEB3FF0486C806F7EA36F
7EA26C5A6C5AEA01E0C8FC153F91B5FC130F137F3901FFFE0F4813E0000F1380381FFE00
485A5B485A12FF5BA4151F7F007F143F6D90387BFF806C6C01FB13FE391FFF07F36CEBFF
E100031480C6EC003FD91FF890C7FC2F2B7DA933>97 D<13FFB5FCA512077EAFEDFFE002
0713FC021FEBFF80027F80DAFF8113F09139FC003FF802F06D7E4A6D7E4A13074A807013
80A218C082A318E0AA18C0A25E1880A218005E6E5C6E495A6E495A02FCEB7FF0903AFCFF
01FFE0496CB55AD9F01F91C7FCD9E00713FCC7000113C033407DBE3A>I<EC7FF00107B5
FC011F14C0017F14E09039FFF01FF0489038800FF848EB001F4848EB3FFC120F485AA248
5AA2007FEC1FF849EB0FF0ED03C000FF91C7FCAB127F7FA3003F153E7F001F157E6C6C14
7C6C6C14FC91388001F86C9038C003F0C69038F81FE06DB512C0011F14800107EBFE0090
38007FF0272B7DA92E>I<3901FE01FE00FF903807FF804A13E04A13F0EC3F1F91387C3F
F8000713F8000313F0EBFFE0A29138C01FF0ED0FE091388007C092C7FCA391C8FCB3A2B6
FCA525297DA82B>114 D<90383FFC1E48B512BE000714FE5A381FF00F383F800148C7FC
007E147EA200FE143EA27E7F6D90C7FC13F8EBFFE06C13FF15C06C14F06C806C806C806C
80C61580131F1300020713C014000078147F00F8143F151F7EA27E16806C143F6D140001
E013FF9038F803FE90B55A15F0D8F87F13C026E00FFEC7FC222B7DA929>I<EB07C0A513
0FA4131FA3133F137FA213FF5A1207001FEBFFFEB6FCA40001EBC000B3151FA96CEBE03E
A2017F137EECF8FC90383FFFF86D13F0010713E001001380203B7EB929>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fn cmsy10 10.95 3
/Fn 3 104 df<007FB812FEBAFCA26C17FE3804799847>0 D<153FEC03FFEC0FE0EC3F80
EC7E00495A5C495AA2495AB3AA130F5C131F495A91C7FC13FEEA03F8EA7FE048C8FCEA7F
E0EA03F8EA00FE133F806D7E130F801307B3AA6D7EA26D7E80EB007EEC3F80EC0FE0EC03
FFEC003F205B7AC32D>102 D<12FCEAFFC0EA07F0EA01FCEA007E6D7E131F6D7EA26D7E
B3AA801303806D7E1300147FEC1FC0EC07FEEC00FFEC07FEEC1FC0EC7F0014FC1301495A
5C13075CB3AA495AA2495A133F017EC7FC485AEA07F0EAFFC000FCC8FC205B7AC32D>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fo cmti10 10.95 52
/Fo 52 122 df<15FCEC07FF91261F038014F091263E01C0EB01F84A6C6C13035C494813
70494816F0010716014948150091268001F014E0011F01071401030F15C0D93F001503F0
0780495C017EEE0F00DB0780131E92C85A01FE5E495EEF03E04D5A021F141FDAFFC0497E
D9FBE1ECF8F0903AFFC0E001F00280903807C0780200EB0F80017E91381E0038D9FC0149
133C0001DAC038131C01FE14783A03FF03807048EB8700D9E3FE13F0260FE0F8EBE38049
C7EAEFC0001FED7FE0A2484815C0163F93380F003C007F92C7123890CAFCA21878187000
FE17F060127E4D5A170360007F16076C4CC7FC171E6C6C151C17786C6C5D6C6C4A5A6C6C
EC07C06C6C021FC8FCD8007E147C90391FC007F00107B512809026007FF8C9FC3D4375C0
46>38 D<EA01E0EA07F8120FA2EA1FFCA4EA0FF8EA0798EA001813381330A21370136013
E013C01201EA0380EA07001206120E5A5A5A5A5A0E1C7A891C>44
D<120FEA3FC0127FA212FFA31380EA7F00123C0A0A77891C>46 D<1838187CA218F81701
18F0EF03E0A2EF07C0A2EF0F80171F1800173EA25FA25F16015F4C5AA24C5AA24C5A161F
94C7FC163EA25EA25E15015E4B5AA24B5AA24B5A151F93C8FC153EA25DA25D14015D4A5A
A24A5AA24A5A141F92C9FC143EA25CA25C13015C495AA2495AA2495A131F91CAFC133EA2
5BA25B12015B485AA2485AA2485A121F90CBFC123EA25AA25AA25A5A365B7FC32E>I<15
FE913807FF8091381F07C091387C01F0ECF000494813F8494813780107147C495A49C7FC
167E133E137EA25BA2485AA2000315FEA25B000715FCA2491301120FA34848EB03F8A448
48EB07F0A448C7EA0FE0A316C0007E141F12FE1680153FA2481500A2157EA25DA25D4813
015D6C495A127C4A5A4A5A6C49C7FC143E6C5B380FC1F03803FFC0C648C8FC273F76BC2E
>I<15031507150F151F151E153E157EEC01FEEC03FC1407141FEB01FF90380FFBF8EB1F
C3EB0E07130015F0A2140FA215E0A2141FA215C0A2143FA21580A2147FA21500A25CA25C
A21301A25CA21303A25CA21307A25CA2130FA25CA2131FA25CEB7FE0B612F0A215E0203D
77BC2E>I<15FE913803FFC091380F01F091383C00F84A137C4A7F4948133F49487F4A14
8049C7FC5BEB0E0C011E15C0EB1C0EEB3C06133813781370020E133FD9F00C148013E014
1C0218137F00011600EBC0384A13FEEC600102E05B3A00E3C003F89039FF0007F0013C49
5A90C7485A5E037FC7FC15FC4A5A4A5AEC0FC04AC8FC147E14F8EB03E0495A011FC9FC13
3E49141801F0143C48481438485A1678485A48C85A120E001E4A5AD83FE0130301FF495A
397C3FF01FD8780FB55AD8700391C7FCD8F0015B486C6C5A6E5AEC07C02A3F79BC2E>I<
ED7F80913803FFE091380F80F891383C007C02F87FD901E07F494814804948130F49C7FC
010E15C0131EEB1C18EB3C1CEB380C0178141F17801370A2021C133F6D4814004A5BD91F
E0137ED90F805B90C8FC4B5A4B5A4B5AED1F8003FFC7FCECFFFC15F0A2EC00FC153E153F
8182150F82A4151FA2121E127F153F485DA3484AC7FC12F800E014FE5D14016C495A0070
495A0078EB0FC00038495A6C017EC8FC380F01F83803FFE0C690C9FC2A3F78BC2E>I<02
C0EB018002F0130FD901FEEB7F0091B512FE5E5E4914E016804BC7FCECBFF8D90780C8FC
91C9FCA35B130EA3131E131CA3133C9038381FC0ECFFF090383BE07C90387F003E017E13
3F017C7F0178805B498090C7FCA6153FA4001F147F486C5C487EA24913FF00FF92C7FC90
C7FC48495A12E04A5A5D6C495A140F00705C0078495A6C495A003E01FEC8FC381F03FC38
0FFFF0000313C0C648C9FC293F77BC2E>53 D<15FF020713C091381F81E091383E00F002
FC13F84948137C495A4948137E010F143E495A133F4A133F017F147F91C7FC5BA2485AA2
16FF12035B16FE150112075B1503A216FC491307A20003140F16F8151F12016D133F0000
EC7FF015EF90387C01CF90393E079FE090380FFE1FD903F813C090C7123FA21680157F16
0015FEA24A5A001C5C007F1303485C4A5A4A5A4A5A4849C7FC00F8137E00E05B6C485A38
7C07E0383FFFC06C90C8FCEA03F8283F77BC2E>57 D<131EEB3F80137FEBFFC05AA21480
6C13005B133C90C7FCB3120FEA3FC0127FA212FFA35B6CC7FC123C122777A61C>I<4BB4
FC031F13E092387E00F8DA01F0131EDA07801307021FC7EA03C0023CEC01E04A1400D901
E01570494815784948153849C9121C131E49D907E0131E0138D93FFC130E49EBFC1E9039
F001F0073C01E007E00380079038C00FC0000390391F8001C09026803F0013FC2607007E
EB00FE484914FC120E381E01F8D81C0314014A14F8EA3C0700385B0403130FD8780FEDF0
0E00705BA20407131ED8F01FEDE01C00E05BA2040F133CEFC038A3041F1370010F158004
3F13F06E017F13E00107ECFF814B14C0903B03E003DF0380903A01F00F1F073C7000F83E
0F8F0091393FF807FC91390FC001F06C90CAFCA2123C121C7E000FEE1F806C6C157F6C6C
913801FC006C6CEC0FF0D80078ECFF80013FD91FFCC7FC010FB512C0010001F0C8FC3841
72BF46>64 D<171C173C177CA217FCA216011603A21607A24C7EA2161DA2163916791671
16E1A2ED01C1A2ED038115071601150EA2031C7FA24B7EA25D15F05D4A5AA24A5AA24AC7
FC5C140E5C021FB6FC4A81A20270C7127FA25C13015C495AA249C8FCA2130E131E131C13
3C5B01F882487ED807FEEC01FFB500E0017FEBFF80A25C39417BC044>I<9339FF8001C0
030F13E0033F9038F803809239FF807E07913A03FC001F0FDA0FF0EB071FDA1FC0ECBF00
DA7F806DB4FC4AC77E495AD903F86E5A495A130F4948157E4948157C495A13FF91C9FC48
48167812035B1207491670120FA2485A95C7FC485AA3127F5BA312FF5BA490CCFCA2170F
A2170EA2171E171C173C173817786C16706D15F04C5A003F5E6D1403001F4B5A6D4AC8FC
000F151E6C6C5C6C6C14F86C6C495A6C6CEB07C090397FC03F8090261FFFFEC9FC010713
F0010013803A4272BF41>67 D<49B712C018F818FE903B0003FE0003FF9438007F804BEC
1FC0F00FE0F007F014074BEC03F8F001FCA2140F4BEC00FEA3141F4B15FFA3143F5DA302
7F5D5DA219FE14FF92C81203A34917FC4A1507A219F813034A150F19F0A20107EE1FE05C
F03FC0A2010FEE7F804A16006060011F4B5A4A4A5A4D5AA2013F4B5A4AEC3FC04DC7FC01
7F15FEEE03FC4AEB0FF001FFEC7FE0B8128004FCC8FC16E0403E7BBD45>I<49B812F8A3
90260003FEC7121F18074B14031801F000F014075DA3140F5D19E0A2141F4B1338A2EF78
01023F027013C04B91C7FCA217F0027F5CED80011603160F91B65AA3ED001F49EC07805C
A3010392C8FC5CF003804C13070107020E14005C93C75A180E010F161E4A151C183CA201
1F5E5C60A2013F15014A4A5A1707017F150F4D5A4A147F01FF913807FF80B9FCA295C7FC
3D3E7BBD3E>I<49B812F0A390260003FEC7123F180F4B1403A2F001E014075DA3140F5D
19C0A2141F5D1770EFF003023F02E013804B91C7FCA21601027F5CED8003A2160702FFEB
1F8092B5FCA349D9003FC8FC4A7F82A20103140E5CA2161E0107141C5CA293C9FC130F5C
A3131F5CA3133F5CA2137FA25C497EB612E0A33C3E7BBD3B>I<DCFF8013E0030713F003
3F9038FC01C09239FFC03E03913A03FC000F07DA0FF0EB078F4A48903803DF80DA7F80EB
01FF4AC8FC495A4948ED7F00495A495A4948814948153E495A13FF91C9FC4848163C1203
5B1207491638120FA2485A95C7FC485AA3127F5BA312FF5BA34BB512FE90C7FCA292C713
80A295C7FCA25EA25FA216037E6D5DA2003F15077F001F5E6D140F6C6C141F0007153F6C
6CEC7BF0D801FE14F16C6CEB03E090393FE01F806DB5EA0060010701F890C8FC9038007F
C03B4273BF46>I<49B6FC5BA2D9000313005D5DA314075DA3140F5DA3141F5DA3143F5D
A3147F5DA314FF92C7FCA35B5CA313035CA313075CA3130F5CA3131F5CA3133F5CA2137F
A25C497EB67EA3283E7BBD23>73 D<4AB61280A2180091C713C0167F5FA216FF94C7FCA3
5D5EA315035EA315075EA3150F5EA3151F5EA3153F5EA3157FA25EA215FFA293C8FCA25C
A25DA2380F8003EA3FC0D87FE05BA21407D8FFC05B140F01805B49485A12FC0070495A4A
5A6C01FEC9FC383C01FC380F07F03807FFC0C648CAFC314079BD30>I<49B6903807FFFE
605ED9000390C7000113E04B6E13004B15FC4E5A19E002074B5A4BEC0F804EC7FC183C02
0F5D4B5C4D5AEF07C0021F4AC8FC4B131E5F5F023F5C9238C003E0EE07804CC9FC027F5B
4B5AEEFF801581ECFF834B7FED0F7FED1E3F49017C7FECFEF89138FFE01F03C07F491380
ED000F4A805C010714074A80A21603010F815C160183131F4A6D7FA2177F013F825C173F
017F82A24A81496C4A7EB6D8800FB512C0A261473E7BBD46>I<49B5933807FFFC496062
D90003F0FC00505ADBBF805E1A771AEF1407033F923801CFE0A2F1039F020FEE071F020E
606F6C140E1A3F021E161C021C04385BA2F1707F143C023804E090C7FCF001C062912678
0FE0495A02705FF00700F00E0114F002E0031C5BA2F03803010116704A6C6C5D18E01907
0103ED01C00280DA03805BA2943807000F13070200020E5C5FDB03F8141F495D010E4B5C
A24D133F131E011CDAF9C05CEEFB80197F013C6DB4C7FC013895C8FC5E01784A5C13F848
6C4A5CD807FE4C7EB500F04948B512FE16E01500563E7BBD52>77
D<902601FFFE020FB5FC496D5CA2D900016D010013C04AEE3F00193E70141C193CEC07BF
DB3FE01438151F1978020F7FDA0E0F15708219F0EC1E07021C6D5CA203031401023C7FDA
38015DA2701303EC7800027002805BA2047F130702F014C04A013F91C7FCA2715A010114
1F4AECF00EA2040F131E010315F84A151C1607EFFC3C0107140391C7143817FE04011378
4915FF010E16708218F0131E011C6F5AA2173F133C01385E171F137813F8486C6F5AEA07
FEB500F01407A295C8FC483E7BBD44>I<EEFFC0030713F892383F80FE9238FC003FDA03
F0EB0F804A486D7EDA1F80804AC76C7E027E6E7E4A81494814004948811307495A494815
7F133F5C49C9FC4917805B1201485AA212075B000F17FFA25B121F190048485DA448484B
5AA34D5AA25B4D5A12FF60171F60007F163F604D5AA24DC7FC5F003F15014C5A6D5D001F
4B5A4C5A6C6C4A5A4C5A6C6C4AC8FC000315FC6C6C495A6C6CEB07E0017FEB1F8090261F
C07EC9FC903807FFF801001380394273BF46>I<49B77E18F018FC903B0003FE0003FEEF
00FF4BEC7F80F03FC00207151F19E05DA2020F16F0A25DA2141FF03FE05DA2023F16C018
7F4B1580A2027FEDFF00604B495A4D5A02FF4A5A4D5A92C7EA3FC04CB4C7FC4990B512FC
17E04ACAFCA21303A25CA21307A25CA2130FA25CA2131FA25CA2133FA25CA2137FA25C49
7EB67EA33C3E7BBD3E>I<92390FF001C0ED7FFE4AB5EA0380913907F80FC791390FC003
EF91391F8001FF4AC71300027E805C495A4948143EA2495AA2010F153C5CA3011F1538A3
8094C7FC80A214FC6DB4FC15F015FE6DEBFFC06D14F06D14FC6D80143F020F7F020180EC
001F150303007F167F163FA2161FA212075A5F120EA2001E153F94C7FCA2163E003E157E
167C003F15FC4B5A486C5C4B5A6D495AD87DE0EB1F80D8F8F849C8FC017F13FE39F03FFF
F8D8E00F13E048C690C9FC32427ABF33>83 D<48B9FCA25A903AFE001FF00101F89138E0
007FD807E0163E49013F141E5B48C75BA2001E147FA2001C4B131C123C003814FFA20078
92C7FC12704A153C00F01738485CC716001403A25DA21407A25DA2140FA25DA2141FA25D
A2143FA25DA2147FA25DA214FFA292C9FCA25BA25CA21303A25CEB0FFE003FB67E5AA238
3D71BC41>I<001FB500F090B512F0485DA226003FF0C7380FFC004AEC03F04A5D715A01
7F1503A24A5DA201FF150795C7FC91C8FCA2485E170E5BA20003161E171C5BA20007163C
17385BA2000F167817705BA2001F16F05F5BA2003F1501A2495DA2007F1503A2495DA216
0794C8FC48C8FC5E160E161E6C151C163C5E5E5E6C6C13014B5A001F4A5A6C6C011FC9FC
6D133E6C6C13F83903FC07F0C6B512C0013F90CAFCEB07F83C406FBD44>I<277FFFFE01
B500FC90B512E0B5FCA20003902680000790C7380FFC006C90C701FCEC07F049725A0403
5EA26350C7FCA20407150EA2040F5D1A3C041F153862163B6216734F5A6D14E303014B5A
6C15C303034BC8FC1683DB0703140E191E030E151C61031C7F61ED380161157003F04A5A
15E002014B5A15C0DA03804AC9FC60DA0700140E60140E605C029C5D14B8D97FF85D5C71
5A5C4A5DA24A92CAFC5F91C7FC705A137E5F137C5F137801705D53406EBD5B>87
D<147E49B47E903907C1C38090391F80EFC090383F00FF017E137F4914804848133F485A
A248481400120F5B001F5C157E485AA215FE007F5C90C7FCA21401485C5AA21403EDF038
5AA21407EDE078020F1370127C021F13F0007E013F13E0003E137FECF3E1261F01E313C0
3A0F8781E3803A03FF00FF00D800FC133E252977A72E>97 D<EB1FC0EA0FFF5CA2EA003F
A291C7FCA25BA2137EA213FEA25BA21201A25BA21203A25B147E3907F1FF809038F783E0
9038EF01F013FE390FF800F8A24913FC49137C485A157E5B15FE123FA290C7FCA2481301
15FC127EA2140300FE14F85AA2EC07F0A215E048130F15C0141F15800078EB3F00127C14
7E003C5B383E01F8381E03E06C485A6CB4C7FCEA01F81F4076BE2A>I<EC1FE0ECFFF890
3803F03E903807C00F90381F8007D93F001380017E131F49137F485A485A000715005B00
0F147E484890C7FCA2485AA3127F90C9FCA35A5AA6481403007E5C5D151E003E5C5D6C5C
EC03E0390F800F802603E07EC7FC3801FFF838003FC0212977A72A>I<EE3F80ED1FFF17
00A2ED007FA2167EA216FEA25EA21501A25EA21503A25EA21507A25E147E903801FF8F90
3807C1CF90391F80EFC090383F00FF017E137F5B48486D5A485AA2485A000F92C7FC5B00
1F5CA24848137EA215FE127F90C75AA214015A485CA2140316384814F0A2140716789138
0FE070127C021F13F0007E013F5B003E137FECF3E1261F01E35B3A0F8781E3802703FF00
FFC7FCD800FC133E294077BE2E>I<EC3F80903801FFE0903807E0F890381F803CEB3E00
01FC131E485A485A12074848133E49133C121F4848137C15F8EC03F0397F000FE0ECFF80
B5EAFC0014C048C8FCA45AA61506150E151E007C143C15786C14F0EC01E06CEB07C0390F
801F003807C0FC3801FFF038007F801F2976A72A>I<167C4BB4FC923807C78092380F83
C0ED1F87161FED3F3FA2157EA21780EE0E004BC7FCA414015DA414035DA30103B512F8A3
90260007E0C7FCA3140F5DA5141F5DA4143F92C8FCA45C147EA414FE5CA413015CA4495A
A4495AA4495A121E127F5C12FF49C9FCA2EAFE1EEAF83C1270EA7878EA3FE0EA0F802A53
83BF1C>I<EC03F0EC0FFC91383E0E1C9138FC077E903901F003FE1303903807E001D90F
C013FCEB1F80A2EB3F004914F8137E01FE1303A2484814F0A2150712034914E0A2150F12
074914C0A2151FA216805B153F1203ED7F006D5BA200015B0000495A9038F80F7E90387C
1EFEEB1FF8903807E0FC90C7FC1401A25DA21403A25D001C1307007F5C48130F5D4A5A4A
C7FC48137E00F85B387C03F0381FFFC0D803FEC8FC273B7CA72A>I<EB01FC13FF5CA213
03A25CA21307A25CA2130FA25CA2131FA25CA2133FA291C8FCEC03F890387F0FFE91383E
0F80D97E7813C0ECE007D9FFC013E014801400A2485A5BA25B0003140F16C05BA2000714
1F16805BA2000F143F16005B5D001F147EEDFE074913FCA2003F0101130FEDF80E130016
1E48ECF01CA2007E1538A200FE1570020013E048EC7FC00038EC1F0028407ABE2E>I<14
78EB01FCA21303A314F8EB00E01400AD137C48B4FC38038F80EA0707000E13C0121E121C
EA3C0F1238A2EA781F00701380A2EAF03F140012005B137E13FE5BA212015BA212035B14
38120713E0000F1378EBC070A214F0EB80E0A2EB81C01383148038078700EA03FEEA00F8
163E79BC1C>I<1507ED1FC0A2153FA31680ED0E0092C7FCADEC07C0EC3FF0EC78F8ECE0
7CEB01C01303EC807EEB0700A2010E13FE5D131E131CEB3C01A201005BA21403A25DA214
07A25DA2140FA25DA2141FA25DA2143FA292C7FCA25CA2147EA214FEA25CA213015CA212
1C387F03F012FF495A5C495A4848C8FCEAF83EEA707CEA3FF0EA0FC0225083BC1C>I<EB
01FC13FF5CA21303A25CA21307A25CA2130FA25CA2131FA25CA2133FA291C8FCED03E049
EB0FF8ED3C3C017EEB707CEDE1FC9038FE01C1EC03839038FC0703140E0001011C13F891
383800E0494813001460000313E0EBF9C0EBF78001FEC8FC1207EBFFE0EBE7F8EBE0FE00
0F137F6E7EEBC01F6E7E121F16701380A2003F15F0021F13E001001380A248148116C000
7EEB0F83168000FE14879138078F0048EB03FE0038EB00F826407ABE2A>I<EB07F0EA03
FF14E0A2EA000FA214C0A2131FA21480A2133FA21400A25BA2137EA213FEA25BA21201A2
5BA21203A25BA21207A25BA2120FA25BA2121FA25BA2123FA290C7FCA25A1307127EA2EA
FE0F130E12FCA2131E131CA2EA7C381378EA3C70EA1FE0EA0780144079BE17>I<D801F0
D93F80137F3D07FC01FFE003FFC03D0F3E07C1F80F83F03D0E1F0F00FC1E01F8001E011C
90387C3800001C49D97E707F003C01F05C0038157F4A5C26783FC05C12704A91C7FC91C7
127E00F003FE1301494A5CEA007EA20301140301FE5F495CA203031407000160495C180F
03075D0003051F13E0494A1480A2030FEC3F810007F001C0495CA2031F91383E0380120F
494AEC0700A2033F150E001FEF1E1C4991C7EA0FF80007C7000EEC03E0432979A74A>I<
D801F0EB3F803A07FC01FFE03A0F3E07C1F83A0E1F0F00FC001E011C137C001C49137E00
3C13F012385C38783FC012705C91C7FC00F015FE495CEA007EA2150101FE5C5BA2150300
015D5B15075E0003020F13704914C0A2031F13F00007ED80E05B1681EE01C0120F49EC03
80A2EE0700001FEC0F0E49EB07FC0007C7EA01F02C2979A733>I<EC1FC0ECFFF8903803
F07C90380FC01FEB1F8090393F000F80017E14C0491307484814E0485A12075B000F15F0
485AA2485AA2ED0FE0127F90C7FCA2151F4815C05AA2ED3F80A2ED7F00A248147E007C5C
007E13015D4A5A003E495A6C495A4A5A260F803EC7FC3807C0FC3801FFF038003F802429
77A72E>I<903903E001F890390FF807FE903A1E7C1E0F80903A1C3E3C07C0013C137801
389038E003E0EB783F017001C013F0ED80019038F07F0001E015F8147E1603000113FEA2
C75AA20101140717F05CA20103140F17E05CA20107EC1FC0A24A1480163F010F15005E16
7E5E131F4B5A6E485A4B5A90393FB80F80DA9C1FC7FCEC0FFCEC03E049C9FCA2137EA213
FEA25BA21201A25BA21203A2387FFFE0B5FCA22D3A80A72E>I<D801F013FC3A07FC07FF
803A0F3E0F03C0260E1F1C13E0001EEB380F001C1370003CEBE01F123814C0D8783F14C0
0070903880070092C7FC91C8FC12F05BEA007EA313FE5BA312015BA312035BA312075BA3
120F5BA3121F5B0007C9FC232979A726>114 D<EC7F80903801FFE0903807C0F890381F
003C013E131C013C131E017C133E49137E15FEA2000114FCA215706D13007FEBFFC014FC
6C13FF15806D13C06D13E0010F13F01300140F14071403120C123F387F80011403D8FF00
13E0A300FCEB07C000F0EB0F8012700078EB1F006C133C381F01F83807FFE0C690C7FC1F
297AA725>I<EB01C0EB03F01307A25CA2130FA25CA2131FA25CA2133FA291C7FCA2007F
B51280B6FC1500D8007EC7FC13FEA25BA21201A25BA21203A25BA21207A25BA2120FA25B
A2121F141C1380A2003F133C1438EB0078147014F05C495AEA1F03495A6C48C7FCEA07FC
EA01F0193A78B81E>I<137C48B4141C26038F80137EEA0707000E7F001E15FE121CD83C
0F5C12381501EA781F007001805BA2D8F03F1303140000005D5B017E1307A201FE5C5B15
0F1201495CA2151F0003EDC1C0491481A2153F1683EE0380A2ED7F07000102FF13005C01
F8EBDF0F00009038079F0E90397C0F0F1C90391FFC07F8903907F001F02A2979A731>I<
017CEB01C048B4EB07F038038F80EA0707000E01C013F8121E001C1403EA3C0F0038EC01
F0A2D8781F130000705BA2EAF03F91C712E012005B017E130116C013FE5B150300011580
5BA2ED07001203495B150EA25DA25D1578000114706D5B0000495A6D485AD97E0FC7FCEB
1FFEEB03F0252979A72A>I<017C167048B491387001FC3A038F8001F8EA0707000E01C0
15FE001E1403001CEDF000EA3C0F0038177C1507D8781F4A133C00701380A2D8F03F130F
020049133812005B017E011F14784C137013FE5B033F14F0000192C712E05BA217010003
4A14C049137E17031880A2EF070015FE170E00010101141E01F86D131C0000D9039F5BD9
FC076D5A903A3E0F07C1E0903A1FFC03FFC0902703F0007FC7FC372979A73C>I<137C48
B4143826038F8013FCEA0707000E7F001E1401001C15F8EA3C0F12381503D8781F14F000
701380A2D8F03F1307020013E012005B017E130F16C013FE5B151F1201491480A2153F00
0315005BA25D157EA315FE5D00011301EBF8030000130790387C1FF8EB3FF9EB07E1EB00
035DA21407000E5CEA3F80007F495AA24A5AD8FF0090C7FC143E007C137E00705B387801
F0383803E0381E0FC06CB4C8FCEA03F8263B79A72C>121 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fp cmr8 8 6
/Fp 6 55 df<130C133C137CEA03FC12FFEAFC7C1200B3B113FE387FFFFEA2172C7AAB23
>49 D<EB7F803801FFF0380780FC380E003F48EB1F8048EB0FC05A0060EB07E012F000FC
14F07E1403A3007C1307C7FCA215E0140F15C0141F1580EC3F00147E147C5C495A495A49
5A495A011EC7FC5B5B4913305B485A4848136048C7FC000E14E0001FB5FC5A4814C0B6FC
A21C2C7DAB23>I<EB3FC03801FFF03807C0FC380E007E487FEC1F80003F14C0A2EB800F
1300A2000C131FC7FC1580A2EC3F00143E5C5CEB03F0EBFFC014F0EB00FC143FEC1F8015
C0140F15E0A2EC07F0A21238127C12FEA3EC0FE012F8006014C00070131F6C1480001EEB
3F00380780FC3801FFF038007FC01C2D7DAB23>I<140EA2141E143EA2147E14FEA2EB01
BE1303143E1306130E130C131813381330136013E013C0EA0180120313001206120E120C
5A123812305A12E0B612FCA2C7EA3E00A9147F90381FFFFCA21E2D7EAC23>I<000CEB01
80380FC01F90B512005C5C14F014C0D80C7EC7FC90C8FCA8EB1FC0EB7FF8380DE07C380F
801F01001380000E130F000CEB07C0C713E0A2140315F0A4127812FCA448EB07E012E000
6014C00070130F6C14806CEB1F006C133E380780F83801FFE038007F801C2D7DAB23>I<
EB03F8EB0FFE90383E0780EBF8013901F007C03803E00FEA07C0EA0F80A2391F00078091
C7FC123EA2127EA2127CEB0FC038FC3FF0EBF07C38FDC01EB4487E01001380EC07C04814
E0A214034814F0A4127CA3127EA2003E14E01407121E001F14C06CEB0F803907801F0038
03C03E6C6C5A38007FF0EB1FC01C2D7DAB23>I E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fq cmr10 10 2
/Fq 2 51 df<EB01C013031307131F13FFB5FCA2131F1200B3B3A8497E007FB512F0A31C
3879B72A>49 D<EB0FF0EB7FFE48B57E3903E03FE0390F000FF0000E6D7E486D7E486D7E
123000706D7E126012FCB4EC7F807FA56CC7FC121CC8FCEDFF00A34A5A5D14035D4A5A5D
140F4A5A4A5A92C7FC147C5C495A495A495A495A91C8FC011EEB01805B5B491303484814
00485A485A000EC75A000FB6FC5A5A485CB6FCA321387CB72A>I
E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fr cmr12 14.4 24
/Fr 24 122 df<120FEA3FC0EA7FE012FF13F0A213F8A3127F123FEA0F381200A5137813
70A313F013E0A2120113C0120313801207EA0F00121EA25A5A12300D23768B21>44
D<B612FEA71F077F9C27>I<EE03804C7EA34C7EA34C7EA34C7EA34C7EA24C7E16E7A203
017F16C3A20303801681A2DB07017F82A2030E80177FA24B80173FA24B6D7EA203788003
70130FA203F0804B1307A20201814B7FA24A488183A24AC78083A2020E82187FA24A6F7E
021FB7FC4A82A30278C8EA1FFC0270150FA202F0824A1507A249488284A249488384A249
CA7FA24984010E177FA2011E84193F133E017F8448486C4C7E000F01E04B487EB500FE03
7FEBFFFEA44F557CD458>65 D<DC1FFC14034BB500C01307030F02F0130F037F14FC9128
01FFF800FF131F02070180EB1FC04A48C73807E03FDA3FF8913801F07FDA7FE0EC00F890
2601FF80ED3CFF4990C97E494882494882495A4948824948825C01FF834849177F91CBFC
48193F485AA24848181FA2121F49180FA2123FA2491807127FA31A005B12FFAE127F7FA3
1A07123F7FA2121FA26D180F000F190EA26C7E1A1E6C6C181C6C193C806C6D1778137F6E
17F06D6CEE01E06D7E6D6CEE03C06D6CEE07806D6CEE0F006D6D151E9026007FE0157CDA
3FF85DDA0FFEEC03F06E6C6CEB0FE0020101F8EBFF806E6CB548C7FC030F14F8030114E0
9226001FFEC8FC48567AD355>67 D<B70107B612F8A4C66C48C80003EBF0006D486F5B6D
486F5BB3AD91B9FCA402F8C9FCB3B1496C4B7F496C4B7FB70107B612F8A44D527BD158>
72 D<B712E0A4C66C90CAFCEB3FFC6D5AB3B3A9191CA51938A61978A319F819F0A21801
1803A21807180F181F183F18FF013F1503496C023F13E0BAFCA43E527BD149>76
D<DA3FF0130349B55B010714C0011FECF00F903A7FE00FF81F49C712FED801FCEC3F3F48
48EC1FBF48486EB4FC48481403485A4980003F8190C97E5A83127E8312FEA283A37E837F
A27F007F93C7FC7F7FEA3FFC7F6C6C7E14F86CEBFF806C14F8EDFF806C15F06C15FE6C6C
806D15C0010F81010315F8D9007F80140F020080030F7F03001480161F040713C0160182
EF7FE0A2173FEF1FF0A200E0160FA31707A37EA318E07E170F7E18C06C161F6C17806D15
3F6D16006D157E6D15FED8FCFC4A5A017F4A5A26F83FC0EB0FF0D90FFEEB7FC0D8F003B6
5A48C64AC7FC023F13F848010113C034567AD341>83 D<ECFFC0010F13F8013F13FE9039
FF00FF80D801F0EB3FE0D803C0EB0FF0486C6D7E01F86D7E000F816D13016F7EA3707E6C
5AEA01E0C9FCA6ED3FFF020FB5FC9138FFFC7F01071300EB1FF0EB7FC04848C7FCEA03FC
485A485A485A123F5B485A187012FF90C8FCA216FFA35D6D14BF007F14036DEB073F6C6C
90390F1FC0E06C6C131E6C6C90393C0FE1C02707FE01F013FF0001B5486C13806C6C9039
8003FE00D907FCC712F834367BB43B>97 D<EB7F80B5FCA41203C6FC137FB3A6ED07FC92
387FFF800281B512E0913987F00FF891398F8001FC029EC7B4FC02BC6E7E02F86E7E4A6E
7E4A6E7E4A1407844A6E7EA2841701A284A283A21980AB19005FA360A24D5AA24D5A804D
5A6E5D6E4A5AD97E784A5A6E4AC7FCD97C1EEB01FE6E495A903A7807E01FF00201B512C0
902670007F90C8FC90C7EA0FF839547DD241>I<17FF4BB5FCA4ED0007160182B3A6EC0F
F8EC7FFF49B512E0903907FC03F090391FE0007C49487F49C7120F01FE80484880485A00
0781484880A2485AA2485AA2127FA35B12FFAB127FA27FA2123FA27F121FA26C6C5C0007
5D7F6C6C5C6C6C5C6C6C021E7F6D6C017C13E0D91FC049EBFF8090390FF807E00103B512
800100495ADA1FF091C7FC39547CD241>100 D<EC0FF891B5FC010314C090390FF80FF0
90391FC003FC90397F8001FE49C77E4848EC7F804848143F49EC1FC0485A000FED0FE05B
001F16F01607485AA2007F16F8A25B160312FF90B7FCA30180C9FCA8127F7FA2123FA26D
1538121F17786C6C1570000716F06D15E06C6C14016C6CEC03C06C6C15806D6C130F6D6C
EB1F00D90FF0133C903907FE01F80101B512E06D6C1380DA07FCC7FC2D367DB434>I<EF
1FC0DA3FE0EBFFE0902701FFFC0313F001079039FF07E1F8903A1FE03FCF01903A3F800F
FC03903A7F0007F80101FE010314F04848903901FC004000036F1300491300000781A249
80000F82A8000793C7FC6D5CA200035D6D130100015D6C6C495A017F495A6E485A9039FF
E03FC0D801C7B5C8FC01C113FC3903803FE091CAFCA57FA27F7F7F6CB612E016FF6C16C0
17F0013F15FC8390B8FCD803F8C7001F1380D80FE0020113C04848EC007F4848ED1FE090
C9120F127EEF07F012FE481603A56C1607007E17E0007F160F6C6CED1FC06C6CED3F806C
6CED7F006C6C15FED803FCEC03FCC6B4EC0FF0D93FF0EBFFC0010FB6C7FC010114F8D900
1F1380354E7DB43B>103 D<EB7F80B5FCA41203C6FC137FB3A6ED07FC92383FFF8092B5
12E0913981F00FF8913983C007FC9139870003FE028E1301029C6D7E14B814B002F06E7E
5CA25CA35CB3AD2601FFE0903801FFE0B600C0B612C0A43A537CD241>I<1378EA01FE48
7E487FA66C90C7FC6C5AEA007890C8FCB0EB7F80B5FCA41203C6FC137FB3B3A43801FFE0
B61280A419507CCF21>I<EC0780EC1FE0EC3FF0EC7FF8A6EC3FF0EC1FE0EC078091C7FC
B0EC0FF8EB1FFFA4EB003F140FA21407B3B3B2120C003F14F0387F800FEAFFC015E0141F
15C0EC3F80EA7F809038007F006C13FC6CB45A000713E0C690C7FC1D6885CF24>I<EBFF
80B5FCA41203C6FC137FB3A793B512F8A4043F138093381FFC0017F017C094C7FC163E5E
5E4B5A4B5AED07804BC8FC151E5D15FC1481EC83FEEC87FF148F029E7F9138BC7FC0ECF8
3F02F07F4A6C7EECC00F02807F4A6C7E6F7EA26F7E6F7F167F83707E161F83707E160783
707E8318802601FFC04913E0B6D8803F13FFA438537DD23E>I<01FFD907FEEC03FFB590
261FFFC0010F13E0037F01F0013F13F8912701F80FFC9038FC07FE913D03C003FE01E001
FF000390260700019038038000C6010E6D6C48C76C7E6D48DA7F8E6E7E4A159CA24ADA3F
F86E7E02605D14E04A5DA34A5DB3AD2601FFE0DAFFF0EC7FF8B6D8C07F9026FFE03FB512
F0A45C347CB363>109 D<01FFEB07FCB590383FFF8092B512E0913901F00FF8913903C0
07FC000349C66C7EC6010E13016D486D7E5C143002706E7E146014E05CA35CB3AD2601FF
E0903801FFE0B600C0B612C0A43A347CB341>I<EC0FFC91387FFF8049B512E0903907F8
07F890391FE001FE90393F80007F017EC7EA1F80496E7E48486E7E00038248486E7EA248
486E7EA248486E7EA2003F82A24848ED7F80A400FF17C0AB007F1780A26D15FFA2003F17
00A2001F5E6D1401000F5E6D140300075E6C6C4A5A6C6C4A5AA2D8007FEC3F806D6C49C7
FC90391FE001FE903907F807F86DB55AD9007F1380DA0FFCC8FC32367CB43B>I<01FFEB
1F80B5EB7FF0913801FFF8913803E1FC91380783FE0003EB0F07C6131EEB7F1C14381430
91387003FC91386000F0160014E05CA45CB3AA8048487EB612F0A427347DB32E>114
D<D907FE13C090387FFF8148B512E33907F803FF390FC0007F4848133F48C7121F003E14
0F007E1407127C00FC1403A315017EA27E7F6C6C90C7FC13F013FF6C13F86CEBFF806C14
E06C14F86C14FEC680013F1480010714C0D9003F13E014039138007FF0151F00E0140FED
07F8A26C1403A215017EA36C15F0A26C14036C15E015076DEB0FC06DEB1F80D8FDF0EB3F
0039F8FC01FE39F07FFFF8D8E01F13E0D8C00390C7FC25367CB42E>I<D97F80EC7F80B5
91B5FCA400031503C61500017F157FB3AC17FFA35EA3013F5C6EEB077FA2011F020E7F6D
6C011C13F06E0178EBFFC0903903FC01F06DB512E06D6C1380912607FC00EB80003A357C
B341>117 D<B60007B5D8F007B5FCA400039027E0001FFEC713F06C0180D90FF8EC7FC0
6C0307ED3F80F21F00017F0203151EA26D6C801A1CA26D6C496C5CA26E6E1478010FDA0E
7F1470A26E6F13F00107DA1C3F5CA26EEDC0010103DA381F5CA26E0178EBE0030101DA70
0F5CA26E01F0EBF0076DDAE00791C7FCA2DA7F81ECF80EEEC003A2DA3FC36E5AEE8001A2
DA1FE76E5A93C7FCA2DA0FFEEC7F70A219F06E486E5AA36E486E5AA36E486E5AA36E486E
C8FC50347EB255>119 D<B60103B51280A4000301F09039007FF800C601C0EC3FE0017F
ED1F8095C7FC133F6E141E131F171C6E143C010F15388001075DA26E14F001035D800101
4A5AA26E13036D5D1580027F49C8FCA26F5A023F130E15E0021F5BA2EDF03C020F133815
F802075BA2EDFCF002035B15FE6E6C5AA36E5BA26FC9FCA3153EA2151CA2153C15381578
1570A215F05D14015DA2003E495A127F486C48CAFCA2140E141E495A6C5B007C5B383F03
E06CB45A00075BD801FCCBFC394B7EB23E>121 D E
%EndDVIPSBitmapFont
%DVIPSBitmapFont: Fs cmbx12 17.28 29
/Fs 29 120 df<BB12E0F2FF801BF01BFE757E1CF0D800010280C7000780DF007F13FE08
0F6D7E0801807480093F7F090F13FC757F757F877580767F8A88767F8A888AA2767FA28A
881F80A37614C0A41FE0A5881FF0B05214E0A51FC0A4521480A31F006466A2525BA2525B
A2525B666499B55A515C5191C7FC515B515B515B097F5B50B512C008075C083F91C8FC07
07B512FCBD12F01CC051C9FC1BF81B8008E0CAFC6C627AE17C>68
D<BD12FCA488A2D8000102C0C71201F1000F1A01F2007F1B3F1B0F1B07757EA28787A288
A3F43F80A31C1FA3197EA3F40FC0A499C7FC19FEA31801A218031807181F18FF93B6FCA6
EEC000181F180718031801A21800A21D7E197EA21DFCA696C812011DF8A31C03A3F407F0
A31C0FA21C1F1C3F1DE01C7F1CFF63631B0F093F13C098B5FC1A0797B6FCBEFCA31D80A3
5F617AE06A>I<B912F8A6D8000102C0CBFCB3B3B1F307E0A5F30FC0A61B1FA31B3F1C80
A21B7FA21BFFA262A262625013006262624FB5FC1907191F4EB6FCBDFC63A553627AE161
>76 D<B700C0083FB612F070627097B7FCA37061D800010DF8C7FC70F103EFA202FD6DF1
07CFA202FC6DF10F8FA36F6DF01F0FA26F6D183EA26F6D187CA26F6D18F8A36F6DEF01F0
A26F6DEF03E0A26F6DEF07C0A26F6DEF0F80A3706DEE1F00A2706D163EA2706D5EA2706D
5EA3706D4B5AA2706D4B5AA2706D4B5AA2706D4B5AA3716D4AC7FCA2716D143EA2716D5C
A2716D5CA3716D495AA2716D495AA2716D495AA2716D495AA3726D48C8FCA272EBC03EA2
726D5AA2726D5AA372EBF9F0A272EBFFE0A2725CA2725CA37390C9FCA2735AA2735A9038
1FFFC0B700F86E480207B812F0A3735AA2735A8C627AE199>I<B700E0040FB712808282
8282A2D800016EDC000101FCC7FC719338001FC08383A28302FD808302FC80816F7F6F80
6F8084816F806F806F8084707F8270807080857080827080708085717F83718071807180
868371807180727F8672808472807280877280847280737F87731480857314C07314E01C
F07314F8857314FC7413FE7413FF1D9F867414DF7414FF86A286868787A287878787A287
87888888A288888890261FFFC084B712F8881D7F1D3F1D1F775A71627AE17E>I<BA12F8
F1FFE01AFEF2FFC01BF01BFED800010280C76C7F070714C0070014F0747F081F7F747F74
7F7480A2748089A37480A389A865A3505CA265A2505C9AC9FC505B505B505B087F5B4FB5
5A0707148096B548CAFC93B812F81BC050CBFC621AFF932680000314C0DE007F7F071F13
F8737F737F737F73808885888688A2747FA688A688A676140FF71F80A374801F3F867714
00745E746E5BB96E6E5B746E485A75EBFE07091F90B55A090715E009015DCF003F91C7FC
0A0013FC71647AE178>82 D<DBFFFCEC01E0020FD9FFE01303027F02FC130749B7130F01
07EEC01F011F16F049D9C007EBF83F4948C7383FFE7FD9FFF8020FB5FC4801E014014849
804849153F91C97E484882001F834982003F83845B007F187FA2193FA200FF181FA27F19
0FA27FA26D17078080806C01F893C7FC80ECFF8015F86CECFFC016FC6CEDFFE017FE6CEE
FFE018F86C17FE6C717E6C846C846D17F86D836D836D8313036D18806D6C17C0020F17E0
1401DA000F16F01500040715F8EE007F1703050014FC183F84060713FE84A2007C8300FC
83A2197FA3193F7EA31AFC7EA27F1AF86D177F7F1AF06D17FF6D18E06D5E01FF18C06E4B
138002E04B130002F84B5A02FFED3FFC01CF01E0ECFFF8018301FF010F5B010191B65A6D
6C5E48011F93C7FC48010315FC48D9003F14E048020149C8FC476677E35A>I<001FBEFC
A64849C79126E0000F148002E0180091C8171F498601F81A0349864986A2491B7FA2491B
3F007F1DC090C9181FA4007E1C0FA600FE1DE0481C07A5CA95C7FCB3B3B3A3021FBAFCA6
63617AE070>I<B800F8011FB80203B7FCA6D8000F91C9000102E0CAEBFE006D72F20FF0
7072715A230F6D73627072171F6D6A708277173F6D7397C7FC70846B6E72197E707217FE
6E726170855118016E6870731503636E68704C6E15076E68718451180F6EDE7E7F607172
151F6E06FE61714B7E08016F153F6E4E6C95C8FC71840803616F4D6C177E7102076F15FE
6F66714B7E080F7013016F4D6C5F7185081F18036F4D6C5F71023F7013076F94C75F7284
50180F6F047E6E5E7272131F1AFE6F4C6E5EDEE00171133F6F4C6E93C9FC06F084070361
704B6E157E06F87213FE1907704B6E5DDEFC0F1881704B6E5D06FE19C1071F18C3704B6E
5DDEFF3F18E7706407BFC9FC07FF18FF704A705CA3704A705CA27099CAFC4F82A2714970
5BA37149705BA27149705BA37149705BA37190CB5BA27148725AA37148725A714872CBFC
A0637DE1A7>87 D<913803FFFE027FEBFFF00103B612FE010F6F7E4916E090273FFE001F
7FD97FE001077FD9FFF801017F486D6D7F717E486D6E7F85717FA2717FA36C496E7FA26C
5B6D5AEB1FC090C9FCA74BB6FC157F0207B7FC147F49B61207010F14C0013FEBFE004913
F048B512C04891C7FC485B4813F85A5C485B5A5CA2B55AA45FA25F806C5E806C047D7F6E
EB01F96C6DD903F1EBFF806C01FED90FE114FF6C9027FFC07FC01580000191B5487E6C6C
4B7E011F02FC130F010302F001011400D9001F90CBFC49437CC14E>97
D<903807FF80B6FCA6C6FC7F7FB3A8EFFFF8040FEBFF80047F14F00381B612FC038715FF
038F010014C0DBBFF0011F7FDBFFC001077F93C76C7F4B02007F03F8824B6F7E4B6F1380
4B17C0851BE0A27313F0A21BF8A37313FCA41BFEAE1BFCA44F13F8A31BF0A24F13E0A24F
13C06F17804F1300816F4B5A6F4A5B4AB402075B4A6C6C495B9126F83FE0013F13C09127
F00FFC03B55A4A6CB648C7FCDAC00115F84A6C15E091C7001F91C8FC90C8000313E04F65
7BE35A>I<92380FFFF04AB67E020F15F0023F15FC91B77E01039039FE001FFF4901F801
0113804901E0010713C04901804913E0017F90C7FC49484A13F0A2485B485B5A5C5A7113
E0485B7113C048701380943800FE0095C7FC485BA4B5FCAE7EA280A27EA2806C18FCA26C
6D150119F87E6C6D15036EED07F06C18E06C6D150F6D6DEC1FC06D01E0EC7F806D6DECFF
00010701FCEB03FE6D9039FFC03FFC010091B512F0023F5D020F1580020102FCC7FCDA00
0F13C03E437BC148>I<F17FF8050FB5FCA6EF000F8484B3A892380FFF804AB512F8020F
14FE023FECFF8391B712E301039138807FF3499039F8000FFB011F01E00103B5FC494913
004990C87E49488148498148834A815A485BA2485BA25AA3485BA4B5FCAE7EA46C7FA37E
A26C7FA26C5F806C5F6C6D5D6C6D5D017F93B5FC6D6C6C0103806D6D49806D01F0D91FF7
EBFFFE6D9039FE01FFE7010190B612876D6CECFE07021F14F8020314E09127003FFE00EC
C0004F657BE35A>I<92380FFFC04AB512FC020FECFF80023F15E091B712F80103D9FE03
7F499039F0007FFF011F01C0011F7F49496D7F4990C76C7F49486E7F48498048844A8048
84485B727E5A5C48717EA35A5C721380A2B5FCA391B9FCA41A0002C0CBFCA67EA380A27E
A27E6E160FF11F806C183F6C7FF17F006C7F6C6D16FE6C17016D6C4B5A6D6D4A5A6D01E0
4A5A6D6DEC3FE0010301FC49B45A6D9026FFC01F90C7FC6D6C90B55A021F15F8020715E0
020092C8FC030713F041437CC14A>I<EE3FFC0307B51280033F14C04AB612F0020715F8
4A9038F03FFC4AEB807F913A7FFE00FFFE4A5A4B4813FF4913F05B4913E0A24913C0A270
13FE4949EB7FFCEF3FF8EF1FF0EF07C094C7FCB0B812C0A6D8001F01C0C8FCB3B3B0007F
B612FCA638657CE431>I<F107F8DB7FFEEC3FFE020FB5D8F001B5FC027FDAFE03148049
B7128F49DCDFFD13C0010FD9F00FEBFFC149D9800114014990C7EBFC0349486E6C7E4948
EC3FFF48496E018113800780130048F0C03E97C7FC48496E7FA34884A96C60A36C6D4A5B
A26C60A26C6D4A90C8FC6D6C4A5A6D6C4A5A6D6D485BDBF00F5B4990B612C060D97C7F4A
C9FCD9FC0F14F09126007FFECAFC92CCFC1201A47FA27F8014F091B77E18FE6CEFFFC019
F06D17FC19FF6D846D846D846D84013F8490BAFC0003854801E0C712014890C9000F7F48
4816014848EE007F4848717E8512FF5B85A56D5F007F616D173F003F616D177F6C6C4D5A
6C01C003035B6C6D4B5B6C01F8031F5BC601FF92B5C7FC6D01F8011F5B011F90B712F801
0717E0010094C8FC020F15F0DA003F01FCC9FC4A607CC151>I<EB0FE0EB3FF8497E48B5
FCA24880A24880A76C5CA26C91C7FCA238007FFC6D5AEB0FE090C9FCAF903807FF80007F
B5FCA6C6FC7F7FB3B3AEB712C0A622657BE42C>105 D<903807FF80B6FCA6C6FC7F7FB3
A90503B61280A6DD003FEB8000DE0FFCC7FCF01FF04E5AF0FFC04D5B4D90C8FCEF07FC4D
5AEF3FF04D5A4D5A4C90C9FC4C5AEE0FFC4C5A4C5AEE7FC04C7E03837F03877F158F039F
7F03BF7F92B5FC838403FC804B7E03F0804B6C7F4B6C7F1580707F707F707FA270807080
717FA2717F717F717FA2717F717F83867180727F95B57EB7D8E00FECFFF0A64C647BE355
>107 D<903807FF80B6FCA6C6FC7F7FB3B3B3B3ADB712E0A623647BE32C>I<902607FF80
D91FFFEEFFF8B691B500F00207EBFF80040702FC023F14E0041F02FF91B612F84C6F4881
93267FE07F6D4801037F922781FE001F9027E00FF0007FC6DA83F86D9026F01FC06D7F6D
D987F06D4A487F6DD98FC0DBF87EC7804C6D027C80039FC76E488203BEEEFDF003BC6E4A
8003FC04FF834B5FA24B5FA24B94C8FCA44B5EB3B2B7D8F007B7D8803FB612FCA67E417B
C087>I<902607FF80EB1FFFB691B512F0040714FC041F14FF4C8193267FE07F7F922781
FE001F7FC6DA83F86D7F6DD987F07F6DD98FC0814C7F039FC78015BE03BC8003FC825DA2
5DA25DA45DB3B2B7D8F007B71280A651417BC05A>I<923807FFE092B6FC020715E0021F
15F8027F15FE494848C66C6C7E010701F0010F13E04901C001037F49496D7F4990C87F49
486F7E49486F7E48496F13804819C04A814819E048496F13F0A24819F8A348496F13FCA3
4819FEA4B518FFAD6C19FEA46C6D4B13FCA36C19F8A26C6D4B13F0A26C19E06C6D4B13C0
A26C6D4B13806C6D4B13006D6C4B5A6D6D495B6D6D495B010701F0010F13E06D01FE017F
5B010090B7C7FC023F15FC020715E0020092C8FC030713E048437CC151>I<902607FF80
EBFFF8B6010FEBFF80047F14F00381B612FC038715FF038F010114C09227BFF0003F7FC6
DAFFC0010F7F6D91C76C7F6D496E7F03F86E7F4B6E7F4B17804B6F13C0A27313E0A27313
F0A21BF885A21BFCA3851BFEAE4F13FCA41BF861A21BF0611BE0611BC06F92B512801B00
6F5C6F4A5B6F4A5B03FF4A5B70495B04E0017F13C09226CFFC03B55A03C7B648C7FC03C1
15F803C015E0041F91C8FC040313E093CBFCB3A3B712F0A64F5D7BC05A>I<D90FFFEB0F
FCB690383FFF8093B512E04B14F04B14F8923907FC7FFC92390FE0FFFEC6EC1F806DD93F
0113FF6D133E157E157C15F8A215F07013FEA24BEB7FFCEF3FF8EF0FE04B90C7FCA55DB3
B0B712F8A638417BC042>114 D<913A3FFF8007800107B5EAF81F011FECFE7F017F91B5
FC48B8FC48EBE0014890C7121FD80FFC1407D81FF0801600485A007F167F49153FA212FF
171FA27F7F7F6D92C7FC13FF14E014FF6C14F8EDFFC06C15FC16FF6C16C06C16F06C826C
826C826C82013F1680010F16C01303D9007F15E0020315F0EC001F1500041F13F8160700
7C150100FC81177F6C163FA2171F7EA26D16F0A27F173F6D16E06D157F6D16C001FEEDFF
806D0203130002C0EB0FFE02FCEB7FFC01DFB65A010F5DD8FE0315C026F8007F49C7FC48
010F13E035437BC140>I<EC07E0A6140FA5141FA3143FA2147FA214FF5BA25B5B5B5B13
7F48B5FC000F91B512FEB8FCA5D8001F01E0C8FCB3AFEF0FC0AC171F6D6D1480A2173F6D
16006F5B6D6D137E6D6D5B6DEBFF836EEBFFF86E5C020F14C002035C9126003FFCC7FC32
5C7DDA3F>I<902607FFC0ED3FFEB60207B5FCA6C6EE00076D826D82B3B3A260A360A260
7F60183E6D6D147E4E7F6D6D4948806D6DD907F0ECFF806D01FFEB3FE06D91B55A6E1500
021F5C020314F8DA003F018002F0C7FC51427BC05A>I<B700C00103B512FCA6C66C01C0
C8381FFE006D6DED07F0A26D6D5E190F6D6D5E191F6D606F153F6D95C7FC6F5DA26D6D15
7E19FE6D6E5C18016E5E7013036E5E701307A26E6D5C180F6E6D5C181F6E6D5C183F6E93
C8FC705BA26E6D13FEA26E6E5A17816FEBC1F817C36F5C17E76F5C17FFA26F5CA26F5CA2
6F91C9FCA26F5BA36F5BA2705AA2705AA2705AA2705A4E417DBF55>I<B70081B600FC01
03B512FCA6C66C0180C701FCC8381FFE006F6FED03F86D047F5F856F6E16076D646F7014
0F6D705F866F6E161F6D646F4A6D143F6D99C7FC4E7F6F616D1B7E6F4A6D14FE6D6395B5
7E7001FC15016E62DCC0016E13036EDBF87F5D05038004E0496C14076E62DCF007ED800F
6E4B6C5D050F15C004F8496C141F6E62DCFC1FEDE03F6E4B6C92C8FC053F15F004FE496C
5C6E197E7048EDF8FE6E027E6D5C05FE15FC4D6D13FD6F601BFF6F496E5BA24D806F60A2
6F496E5BA24D806F60A26F496E90C9FCA294C87E6F5FA26F486F5A047C6F5A6E417DBF75
>I E
%EndDVIPSBitmapFont
end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: a4
a4
%%EndPaperSize

%%EndSetup
%%Page: 1 1
1 0 bop 249 315 a Fs(Surviv)-9 b(able)55 b(Em)l(b)t(edding)d(of)h
(Logical)i(T)-13 b(op)t(ologies)924 498 y(in)54 b(WDM)g(Ring)g(Net)l(w)
l(orks)428 962 y Fr(Hw)m(a)7 b(jung)36 b(Lee)1102 918
y Fq(1)1148 962 y Fr(,)j(Hongsik)e(Choi)1911 918 y Fq(1)1955
962 y Fr(,)i(Suresh)g(Subramaniam)3119 918 y Fq(2)3159
962 y Fr(,)1247 1111 y(and)g(Hy)m(eong-Ah)e(Choi)2328
1068 y Fq(1)527 1286 y Fp(1)566 1319 y Fo(Dept.)c(of)g(Computer)h
(Scienc)-5 b(e,)1698 1286 y Fp(2)1737 1319 y Fo(Dept.)33
b(of)g(Ele)-5 b(ct.)32 b(&)g(Computer)i(Engr.)1110 1432
y(The)f(Ge)-5 b(or)g(ge)34 b(Washington)g(University)1346
1545 y(Washington,)g(DC)e(20052)942 1657 y Fn(f)p Fo(hjle)-5
b(e,)33 b(hongsik,)h(sur)-5 b(esh,)33 b(choi)p Fn(g)p
Fo(@se)-5 b(as.gwu.e)g(du)p 166 1963 3288 4 v 166 2093
a Fm(Abstract)166 2299 y Fl(W)d(e)43 b(consider)d(the)i(design)e(of)h
(surviv)-5 b(able)39 b(logical)i(top)s(ologies)h(o)m(v)m(er)g(ph)m
(ysical)e(WDM)j(ring)166 2412 y(net)m(w)m(orks.)e(The)f(logical)f(top)s
(ology)i(consists)e(of)h(the)h(same)f(set)h(of)f(no)s(des)f(as)i(the)f
(ph)m(ysical)166 2525 y(top)s(ology)-8 b(,)22 b(and)f(the)g(links)e(of)
i(the)g(logical)g(top)s(ology)g(are)h(ligh)m(tpaths)e(in)g(the)h(ph)m
(ysical)f(top)s(ology)-8 b(.)166 2638 y(The)28 b(logical)f(top)s(ology)
h(is)f(said)g(to)i(b)s(e)f Fo(survivable)g Fl(if)f(the)h(failure)e(of)i
(an)m(y)g(single)f(ph)m(ysical)g(link)166 2751 y(do)s(es)36
b(not)h(disconnect)g(the)f(logical)h(top)s(ology)-8 b(.)37
b(In)f(this)g(pap)s(er,)g(w)m(e)h(consider)e(the)i(follo)m(wing)166
2864 y(problem.)25 b(Giv)m(en)i(a)g(logical)f(top)s(ology)h(with)f
(ligh)m(tpath)g(end-no)s(des,)f(route)i(the)g(ligh)m(tpaths)f(to)166
2977 y(mak)m(e)36 b(the)e(logical)h(top)s(ology)g(surviv)-5
b(able)32 b(if)h(p)s(ossible.)g(Otherwise,)g(determine)h(and)g(em)m(b)s
(ed)166 3090 y(the)d(minim)m(um)c(n)m(um)m(b)s(er)i(of)i(additional)d
(ligh)m(tpaths)h(to)i(ac)m(hiev)m(e)h(surviv)-5 b(abilit)m(y)d(.)166
3361 y Fo(Key)32 b(wor)-5 b(ds:)68 b Fl(WDM,)31 b(Surviv)-5
b(able,)28 b(Logical)j(T)-8 b(op)s(ology,)30 b(Ph)m(ysical)g(T)-8
b(op)s(ology,)30 b(Logical)166 3474 y(T)-8 b(op)s(ology)31
b(Em)m(b)s(edding,)d(Ring)h(Net)m(w)m(ork)p 166 3578
V 166 4103 a Fk(1)112 b(In)m(tro)s(duction)166 4447 y
Fj(Optical)38 b(net)m(w)m(orks)k(emplo)m(ying)d(W)-8
b(a)m(v)m(elength)40 b(Division)e(Multiplexing)g(\(WDM\))i(and)166
4567 y(w)m(a)m(v)m(elength-routing)24 b(are)f(capable)h(of)f(pro)m
(viding)g(ligh)m(tpaths)g(to)g(higher)g(service)i(la)m(y)m(ers.)166
4688 y(Ligh)m(tpaths)35 b(are)h(optical)d(circuit-switc)m(hed)i(paths)h
(that)f(ha)m(v)m(e)i(transmission)d(rates)i(of)166 4808
y(a)f(few)g(Gb/s.)g(By)g(the)h(use)g(of)e(WDM,)h(m)m(ultiple)d(ligh)m
(tpaths)i(ma)m(y)h(tra)m(v)m(erse)i(the)e(same)166 4928
y(optical)c(\014b)s(er)i(link,)e(eac)m(h)j(one)f(using)f(a)g
(di\013eren)m(t)h(w)m(a)m(v)m(elength.)p 166 5056 299
4 v 166 5120 a Fi(?)257 5153 y Fl(This)g(w)m(ork)i(w)m(as)h(supp)s
(orted)d(in)h(part)h(b)m(y)f(the)i(D)m(ARP)-8 b(A)36
b(under)e(gran)m(t)h(N66001-00-18949)166 5266 y(\(co-funded)d(b)m(y)g
(NSA\),)h(b)m(y)f(the)g(DISA)g(under)f(NSA-LUCITE)g(con)m(tract,)k(and)
c(b)m(y)h(the)h(NSF)166 5379 y(under)c(gran)m(t)i(ANI-9973098.)196
5712 y Fh(Preprin)m(t)e(submitted)g(to)i(Elsevier)e(Science)1239
b(8)31 b(June)f(2002)p eop
%%Page: 2 2
2 1 bop 166 83 a Fj(Surviv)-5 b(abilit)m(y)26 b(is)h(a)h(v)m(ery)i(imp)
s(ortan)m(t)c(requiremen)m(t)i(for)f(high-sp)s(eed)h(optical)e(net)m(w)
m(orks.)166 203 y(There)32 b(has)g(b)s(een)f(a)g(large)f(amoun)m(t)g
(of)g(w)m(ork)i(that)f(fo)s(cuses)h(on)f(pre-allo)s(cating)c(bac)m(kup)
166 324 y(capacit)m(y)48 b(so)g(that)f(an)m(y)i(failed)d(ligh)m(tpaths)
g(ma)m(y)i(b)s(e)g(restored)h(rapidly)d(as)i(so)s(on)f(as)166
444 y(normal)33 b(op)s(eration)g(is)i(disrupted)g(in)f(the)h(ev)m(en)m
(t)i(of)d(link)f(break.)j(The)g(prop)s(osed)f(tec)m(h-)166
565 y(niques)42 b(are)f(classi\014ed)g(as)g(either)g(link)f(protection)
h(or)g(path)g(protection,)f(dep)s(ending)166 685 y(on)f(whether)h(the)g
(rerouting)e(of)g(ligh)m(tpaths)g(is)h(done)g(around)g(the)h(failed)d
(link,)h(or)h(on)166 805 y(an)f(end-to-end)g(basis.)h(Protection)f(at)f
(the)i(optical)d(la)m(y)m(er)j(is)e(considered)i(to)f(b)s(e)h(fast,)166
926 y(partly)g(b)s(ecause)i(of)f(the)g(pro)m(ximit)m(y)f(of)g(the)h
(optical)e(la)m(y)m(er)i(to)g(the)g(ph)m(ysical)g(la)m(y)m(er)g(at)166
1046 y(whic)m(h)28 b(the)g(failure)e(is)i(\014rst)g(detected,)h(and)f
(partly)f(b)s(ecause)i(of)e(the)i(coarse)f(gran)m(ularit)m(y)166
1166 y(at)k(whic)m(h)h(restoration)f(is)g(done)h(\(at)f(the)h(ligh)m
(tpath)e(or)i(\014b)s(er)g(lev)m(el\).)166 1407 y(When)38
b(an)e(electronic)g(service)i(la)m(y)m(er)f(is)f(em)m(b)s(edded)h(o)m
(v)m(er)h(a)e(WDM)h(optical)e(net)m(w)m(ork,)166 1528
y(then)f(it)e(ma)m(y)h(b)s(e)g(the)h(case)g(that)e(the)i(electronic)e
(la)m(y)m(er)i(incorp)s(orates)e(its)h(o)m(wn)h(surviv-)166
1648 y(abilit)m(y)27 b(functions,)i(thereb)m(y)i(making)d(the)h
(optical)e(la)m(y)m(er)j(reco)m(v)m(ery)h(redundan)m(t)f(and,)f(in)166
1768 y(the)39 b(w)m(orst)h(case,)g(p)s(erhaps)g(con\015icting.)e(F)-8
b(urthermore,)39 b(when)h(a)f(ph)m(ysical)g(link)e(fails,)166
1889 y(it)j(ma)m(y)g(not)h(b)s(e)f(necessary)j(for)d(all)f(the)i
(a\013ected)h(ligh)m(tpath)d(tra\016c)i(to)f(b)s(e)h(restored.)166
2009 y(Th)m(us,)27 b(there)f(is)f(a)g(case)h(to)f(b)s(e)h(made)f(for)g
(reco)m(v)m(ery)i(to)e(b)s(e)h(done)g(solely)e(at)h(the)h(electronic)
166 2130 y(la)m(y)m(er.)35 b(If)g(the)h(electronic)e(la)m(y)m(er)h(w)m
(ere)i(the)e(IP)h(la)m(y)m(er,)f(then)h(the)f(only)g(requiremen)m(t)g
(for)166 2250 y(the)e(la)m(y)m(er)g(to)f(b)s(e)h(surviv)-5
b(able)32 b(is)g(that)g(it)g(b)s(e)h(connected.)166 2491
y(Motiv)-5 b(ated)33 b(b)m(y)i(the)f(ab)s(o)m(v)m(e,)h(w)m(e)g
(consider)f(in)f(this)g(pap)s(er)h(the)h(em)m(b)s(edding)e(of)g(an)h
(elec-)166 2611 y(tronic)23 b(la)m(y)m(er)i(on)f(a)f(ph)m(ysical)h(WDM)
h(net)m(w)m(ork)g(suc)m(h)h(that)e(the)g(electronic)g(la)m(y)m(er)g
(net)m(w)m(ork)166 2731 y(is)34 b(connected)i(when)g(a)e(single)g(link)
f(fails.)g(The)i(connectivit)m(y)g(at)g(the)g(electronic)e(la)m(y)m(er)
166 2852 y(is)27 b(represen)m(ted)k(b)m(y)e(the)f Fg(lo)-5
b(gic)g(al)29 b(top)-5 b(olo)g(gy)p Fj(.)28 b(The)h(logical)c(top)s
(ology)h(is)h(a)h(top)s(ology)e(whic)m(h)166 2972 y(has)41
b(as)g(its)g(no)s(des)g(the)h(set)f(of)g(electronic)f(no)s(des.)h(The)h
(edges)g(of)f(the)g(logical)d(top)s(ol-)166 3093 y(ogy)33
b(corresp)s(ond)h(to)f(the)h(set)g(of)f(ligh)m(tpaths)f(that)h(are)g
(established)h(o)m(v)m(er)g(the)g(ph)m(ysical)166 3213
y(top)s(ology)-8 b(.)166 3454 y(As)25 b(men)m(tioned)f(ab)s(o)m(v)m(e,)
h(m)m(ultiple)d(ligh)m(tpaths)h(ma)m(y)h(b)s(e)h(routed)f(o)m(v)m(er)i
(the)f(same)f(ph)m(ysical)166 3574 y(link,)h(and)i(therefore,)f(it)g
(is)f(p)s(ossible)h(for)g(a)g(single)f(ph)m(ysical)h(link)f(failure)g
(to)g(break)i(more)166 3694 y(than)c(one)g(edge)g(in)f(the)h(logical)d
(top)s(ology)-8 b(.)21 b(Since)h(surviv)-5 b(abilit)m(y)21
b(at)i(the)g(logical)c(top)s(ology)166 3815 y(dep)s(ends)45
b(on)d(the)i(a)m(v)-5 b(ailabilit)m(y)38 b(of)43 b(m)m(ultiple)d
(routes)k(b)s(et)m(w)m(een)g(no)s(des)g(at)e(the)i(logical)166
3935 y(la)m(y)m(er,)31 b(it)e(is)h(clear)g(that)g(there)h(m)m(ust)g(b)s
(e)g(some)f(amoun)m(t)g(of)g(co)s(ordination)e(b)s(et)m(w)m(een)k(the)
166 4056 y(t)m(w)m(o)c(la)m(y)m(ers)g(if)f(surviv)-5
b(abilit)m(y)25 b(has)j(to)f(b)s(e)h(ac)m(hiev)m(ed)h(at)e(the)h
(logical)c(la)m(y)m(er.)k(In)f(this)g(pap)s(er,)166 4176
y(w)m(e)39 b(fo)s(cus)f(on)g(the)g(design)g(of)g(logical)d(top)s
(ologies)h(that)h(are)h Fg(survivable)p Fj(.)f(W)-8 b(e)39
b(de\014ne)g(a)166 4296 y(logical)29 b(top)s(ology)h(to)i(b)s(e)g
(surviv)-5 b(able)31 b(if)g(the)h(failure)e(of)h(an)m(y)i(single)e(ph)m
(ysical)h(link)e(do)s(es)166 4417 y(not)46 b(disconnect)i(the)e
(logical)e(top)s(ology)-8 b(.)44 b(Surviv)-5 b(able)46
b(logical)e(top)s(ology)g(design)j(not)166 4537 y(only)28
b(in)m(v)m(olv)m(es)i(the)f(determination)d(of)j(the)g(logical)c(edges)
30 b(but)f(also)f(the)h(em)m(b)s(edding)f(of)166 4658
y(those)33 b(edges)h(on)e(the)h(ph)m(ysical)g(top)s(ology)-8
b(,)31 b(i.e.,)h(the)h(routing)f(of)g(the)h(ligh)m(tpaths.)166
4898 y(There)44 b(has)f(b)s(een)g(some)f(recen)m(t)i(researc)m(h)g(in)e
(the)h(surviv)-5 b(able)42 b(design)g(of)g(surviv)-5
b(able)166 5019 y(logical)33 b(top)s(ologies.)h(In)i([1],)g(the)g
(problem)f(of)h(em)m(b)s(edding)f(ligh)m(tpaths)g(suc)m(h)i(that)f(the)
166 5139 y(minim)m(um)f(n)m(um)m(b)s(er)j(of)g(source-destination)g
(pairs)f(are)h(disconnected)i(up)s(on)e(a)g(ph)m(ys-)166
5259 y(ical)k(link)h(failure)g(at)g(the)i(logical)c(la)m(y)m(er)j(w)m
(as)h(considered,)g(and)f(some)g(optimization)166 5380
y(heuristics)39 b(w)m(ere)g(presen)m(ted.)i(In)77 b([2])39
b(and)76 b([3],)39 b(a)f(similar)d(problem)i(w)m(as)j(considered)1769
5712 y(2)p eop
%%Page: 3 3
3 2 bop 166 83 a Fj(and)29 b(some)f(conditions)g(for)h(the)g(surviv)-5
b(abilit)m(y)27 b(of)h(a)g(logical)e(top)s(ology)h(w)m(ere)j(presen)m
(ted.)166 203 y(In)35 b(those)h(three)g(pap)s(ers,)g(the)f(ph)m(ysical)
g(top)s(ology)f(w)m(as)i(assumed)g(to)e(b)s(e)i(an)f(arbitrary)166
324 y(mesh.)28 b(In)g(this)f(pap)s(er,)h(w)m(e)h(consider)f(a)f(ph)m
(ysical)h(ring)e(net)m(w)m(ork)k(with)d(links)g(orien)m(ted)g(in)166
444 y(b)s(oth)i(the)g(clo)s(c)m(kwise)g(and)h(coun)m(terclo)s(c)m
(kwise)g(directions.)e(Ring)g(net)m(w)m(orks)j(are)e(imp)s(or-)166
565 y(tan)m(t)f(b)s(ecause)h(the)f(prev)-5 b(alen)m(t)27
b(top)s(ology)f(for)h(SONET)i(is)e(the)h(ring.)f(As)h(these)h(net)m(w)m
(orks)166 685 y(are)39 b(upgraded)g(to)g(WDM,)f(it)g(is)g(lik)m(ely)g
(that)h(the)g(top)s(ology)e(will)f(b)s(e)j(main)m(tained)e(for)166
805 y(some)28 b(time)f(b)s(efore)h(gro)m(wing)g(in)m(to)f(a)h(mesh)h
(net)m(w)m(ork.)g(Secondly)-8 b(,)29 b(the)g(simplicit)m(y)c(of)j(the)
166 926 y(top)s(ology)h(enables)h(us)h(to)f(tak)m(e)h(a)f(deep)s(er)i
(lo)s(ok)d(in)m(to)g(the)i(complexit)m(y)e(of)h(the)h(problem.)166
1148 y(In)f(the)h(next)g(section,)f(w)m(e)h(formally)c(state)j(the)h
(problem)d(w)m(e)j(attempt)f(to)f(solv)m(e)i(in)e(this)166
1269 y(pap)s(er.)e(Some)g(insigh)m(t)e(in)m(to)h(the)i(complexit)m(y)e
(of)g(the)i(problem)d(is)i(presen)m(ted)i(in)d(Section)166
1389 y(3.)f(W)-8 b(e)25 b(presen)m(t)i(a)d(heuristic)h(algorithm)d
(based)j(on)g(shortest)h(path)f(routing)f(in)g(Section)h(4)166
1509 y(and)k(obtain)f(some)h(n)m(umerical)e(results.)j(Concluding)e
(remarks)h(in)f(Section)h(5)f(complete)166 1630 y(the)33
b(pap)s(er.)166 2048 y Fk(2)112 b(Problem)36 b(F)-9 b(orm)m(ulation)166
2391 y Fj(Consider)27 b(a)g(logical)d(top)s(ology)h(sho)m(wn)k(in)d
(Figure)g(1\(a\))g(corresp)s(onding)h(to)g(the)g(connec-)166
2511 y(tion)k(request)i(set)f Ff(R)d Fj(=)e Fe(f)p Fj(\(0)p
Ff(;)17 b Fj(1\))p Ff(;)g Fj(\(0)p Ff(;)g Fj(2\))p Ff(;)g
Fj(\(0)p Ff(;)g Fj(4\))p Ff(;)g Fj(\(1)p Ff(;)g Fj(3\))p
Ff(;)g Fj(\(1)p Ff(;)g Fj(5\))p Ff(;)g Fj(\(2)p Ff(;)g
Fj(4)o(\))p Ff(;)g Fj(\(2)p Ff(;)f Fj(5\))p Ff(;)h Fj(\(3)p
Ff(;)f Fj(5\))p Fe(g)25 b Fj(to)31 b(b)s(e)166 2632 y(em)m(b)s(edded)36
b(o)m(v)m(er)f(a)g(WDM)f(ring)g(net)m(w)m(ork)i(with)e(six)h(no)s(des.)
g(Figure)e(1\(b-c\))i(sho)m(w)g(the)166 2752 y(ph)m(ysical)23
b(ring)f(top)s(ology)f(and)i(t)m(w)m(o)h(di\013eren)m(t)f(ligh)m(tpath)
e(em)m(b)s(eddings.)i(The)h(em)m(b)s(edding)166 2873
y(sho)m(wn)37 b(in)d(\(b\))i(is)f(surviv)-5 b(able,)35
b(i.e.,)g(the)h(logical)c(top)s(ology)i(remains)g(connected)k(when)166
2993 y(an)m(y)43 b(single)d(ph)m(ysical)i(link)f(fails,)f(whereas)j
(the)g(em)m(b)s(edding)e(in)g(\(c\))h(is)g(not)f(b)s(ecause,)166
3113 y(when)34 b(ring)d(link)h(\(0,1\))g(fails,)f(the)i(logical)c(top)s
(ology)i(b)s(ecomes)i(disconnected.)343 4055 y @beginspecial
0 @llx 0 @lly 545 @urx 156 @ury 1008 @rhi @setspecial
%%BeginDocument: fig/fig1.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: C:\WINNT\Profiles\fam\Personal\Research\allaten\fig1.ps
%%CreationDate: () ()
%%BoundingBox: 0 0 545 156
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 545 156
%AI3_TileBox: 0 0 545 156
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

u
 [] 0 d
0.0000 w
  0.000 0.000 0.000 1.000 K
1 J
1 j
  0.4800 86.0400 m
  0.7200 88.2000 L
  1.3200 90.2400 L
  2.4000 92.0400 L
  3.8400 93.7200 L
  5.6400 94.9200 L
  7.5600 95.8800 L
  9.7200 96.2400 L
  11.8800 96.2400 L
  13.9200 95.8800 L
  15.9600 94.9200 L
  17.6400 93.7200 L
  19.0800 92.0400 L
  20.1600 90.2400 L
  20.8800 88.2000 L
  21.0000 86.0400 L
  20.8800 83.8800 L
  20.1600 81.8400 L
  19.0800 80.0400 L
  17.6400 78.3600 L
  15.9600 77.1600 L
  13.9200 76.2000 L
  11.8800 75.8400 L
  9.7200 75.8400 L
  7.5600 76.2000 L
  5.6400 77.1600 L
  3.8400 78.3600 L
  2.4000 80.0400 L
  1.3200 81.8400 L
  0.7200 83.8800 L
  0.4800 86.0400 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 8.2800 83.0400 0 Tp
TP
84.485107 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  41.5200 116.7600 m
  41.7600 118.9200 L
  42.3600 120.9600 L
  43.4400 122.8800 L
  44.8800 124.4400 L
  46.6800 125.6400 L
  48.6000 126.6000 L
  50.7600 126.9600 L
  52.9200 126.9600 L
  54.9600 126.6000 L
  56.8800 125.6400 L
  58.6800 124.4400 L
  60.1200 122.8800 L
  61.2000 120.9600 L
  61.8000 118.9200 L
  62.0400 116.7600 L
  61.8000 114.7200 L
  61.2000 112.6800 L
  60.1200 110.8800 L
  58.6800 109.2000 L
  56.8800 108.0000 L
  54.9600 107.1600 L
  52.9200 106.6800 L
  50.7600 106.6800 L
  48.6000 107.1600 L
  46.6800 108.0000 L
  44.8800 109.2000 L
  43.4400 110.8800 L
  42.3600 112.6800 L
  41.7600 114.7200 L
  41.5200 116.7600 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 49.3200 113.8800 0 Tp
TP
84.485107 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(0\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  41.5200 55.2000 m
  41.7600 57.3600 L
  42.3600 59.4000 L
  43.4400 61.2000 L
  44.8800 62.8800 L
  46.6800 64.0800 L
  48.6000 64.9200 L
  50.7600 65.4000 L
  52.9200 65.4000 L
  54.9600 64.9200 L
  56.8800 64.0800 L
  58.6800 62.8800 L
  60.1200 61.2000 L
  61.2000 59.4000 L
  61.8000 57.3600 L
  62.0400 55.2000 L
  61.8000 53.0400 L
  61.2000 51.0000 L
  60.1200 49.0800 L
  58.6800 47.5200 L
  56.8800 46.3200 L
  54.9600 45.3600 L
  52.9200 45.0000 L
  50.7600 45.0000 L
  48.6000 45.3600 L
  46.6800 46.3200 L
  44.8800 47.5200 L
  43.4400 49.0800 L
  42.3600 51.0000 L
  41.7600 53.0400 L
  41.5200 55.2000 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 49.3200 52.2000 0 Tp
TP
84.485107 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  82.6800 116.7600 m
  82.9200 118.9200 L
  83.5200 120.9600 L
  84.6000 122.8800 L
  86.0400 124.4400 L
  87.8400 125.6400 L
  89.7600 126.6000 L
  91.8000 126.9600 L
  93.9600 126.9600 L
  96.1200 126.6000 L
  98.0400 125.6400 L
  99.8400 124.4400 L
  101.2800 122.8800 L
  102.3600 120.9600 L
  102.9600 118.9200 L
  103.2000 116.7600 L
  102.9600 114.7200 L
  102.3600 112.6800 L
  101.2800 110.8800 L
  99.8400 109.2000 L
  98.0400 108.0000 L
  96.1200 107.1600 L
  93.9600 106.6800 L
  91.8000 106.6800 L
  89.7600 107.1600 L
  87.8400 108.0000 L
  86.0400 109.2000 L
  84.6000 110.8800 L
  83.5200 112.6800 L
  82.9200 114.7200 L
  82.6800 116.7600 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 90.3600 113.8800 0 Tp
TP
84.485107 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  82.6800 55.2000 m
  82.9200 57.3600 L
  83.5200 59.4000 L
  84.6000 61.2000 L
  86.0400 62.8800 L
  87.8400 64.0800 L
  89.7600 64.9200 L
  91.8000 65.4000 L
  93.9600 65.4000 L
  96.1200 64.9200 L
  98.0400 64.0800 L
  99.8400 62.8800 L
  101.2800 61.2000 L
  102.3600 59.4000 L
  102.9600 57.3600 L
  103.2000 55.2000 L
  102.9600 53.0400 L
  102.3600 51.0000 L
  101.2800 49.0800 L
  99.8400 47.5200 L
  98.0400 46.3200 L
  96.1200 45.3600 L
  93.9600 45.0000 L
  91.8000 45.0000 L
  89.7600 45.3600 L
  87.8400 46.3200 L
  86.0400 47.5200 L
  84.6000 49.0800 L
  83.5200 51.0000 L
  82.9200 53.0400 L
  82.6800 55.2000 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 90.3600 52.2000 0 Tp
TP
84.485107 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(5\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  123.7200 86.0400 m
  123.8400 88.2000 L
  124.5600 90.2400 L
  125.6400 92.0400 L
  127.0800 93.7200 L
  128.7600 94.9200 L
  130.8000 95.8800 L
  132.8400 96.2400 L
  135.0000 96.2400 L
  137.1600 95.8800 L
  139.0800 94.9200 L
  140.8800 93.7200 L
  142.3200 92.0400 L
  143.4000 90.2400 L
  144.0000 88.2000 L
  144.2400 86.0400 L
  144.0000 83.8800 L
  143.4000 81.8400 L
  142.3200 80.0400 L
  140.8800 78.3600 L
  139.0800 77.1600 L
  137.1600 76.2000 L
  135.0000 75.8400 L
  132.8400 75.8400 L
  130.8000 76.2000 L
  128.7600 77.1600 L
  127.0800 78.3600 L
  125.6400 80.0400 L
  124.5600 81.8400 L
  123.8400 83.8800 L
  123.7200 86.0400 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 131.4000 83.0400 0 Tp
TP
84.485107 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
2.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  18.1200 93.2400 m
  42.4800 112.5600 L
S
U
u
  0.000 0.000 0.000 1.000 K
  62.0400 116.7600 m
  82.6800 116.7600 L
S
U
u
  0.000 0.000 0.000 1.000 K
  102.2400 112.4400 m
  126.6000 93.2400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  126.6000 78.8400 m
  102.2400 59.5200 L
S
U
u
  0.000 0.000 0.000 1.000 K
  62.0400 55.2000 m
  82.6800 55.2000 L
S
U
u
  0.000 0.000 0.000 1.000 K
  42.4800 59.5200 m
  18.2400 78.8400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  51.8400 106.5600 m
  51.8400 65.5200 L
S
U
u
  0.000 0.000 0.000 1.000 K
  92.8800 106.5600 m
  92.8800 65.5200 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  204.0000 85.5600 m
  204.2400 89.0400 L
  204.9600 92.4000 L
  206.0400 95.8800 L
  207.7200 99.1200 L
  209.6400 102.3600 L
  212.1600 105.4800 L
  214.9200 108.3600 L
  218.1600 111.1200 L
  221.6400 113.6400 L
  225.4800 115.9200 L
  229.6800 117.8400 L
  234.1200 119.6400 L
  238.6800 121.2000 L
  243.4800 122.4000 L
  248.4000 123.3600 L
  253.4400 123.9600 L
  258.6000 124.2000 L
  263.7600 124.2000 L
  268.8000 123.9600 L
  273.7200 123.3600 L
  278.6400 122.4000 L
  283.4400 121.2000 L
  288.1200 119.6400 L
  292.5600 117.8400 L
  296.6400 115.9200 L
  300.4800 113.6400 L
  304.0800 111.1200 L
  307.2000 108.3600 L
  310.0800 105.4800 L
  312.4800 102.3600 L
  314.5200 99.1200 L
  316.0800 95.8800 L
  317.2800 92.4000 L
  318.0000 89.0400 L
  318.1200 85.5600 L
  318.0000 82.0800 L
  317.2800 78.6000 L
  316.0800 75.1200 L
  314.5200 71.8800 L
  312.4800 68.6400 L
  310.0800 65.5200 L
  307.2000 62.6400 L
  304.0800 59.8800 L
  300.4800 57.3600 L
  296.6400 55.0800 L
  292.5600 53.0400 L
  288.1200 51.2400 L
  283.4400 49.6800 L
  278.6400 48.4800 L
  273.7200 47.6400 L
  268.8000 46.9200 L
  263.7600 46.6800 L
  258.6000 46.6800 L
  253.4400 46.9200 L
  248.4000 47.6400 L
  243.4800 48.4800 L
  238.6800 49.6800 L
  234.1200 51.2400 L
  229.6800 53.0400 L
  225.4800 55.0800 L
  221.6400 57.3600 L
  218.1600 59.8800 L
  214.9200 62.6400 L
  212.1600 65.5200 L
  209.6400 68.6400 L
  207.7200 71.8800 L
  206.0400 75.1200 L
  204.9600 78.6000 L
  204.2400 82.0800 L
  204.0000 85.5600 L
B
U
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  225.9600 119.4000 m
  226.0800 121.4400 L
  226.8000 123.3600 L
  227.7600 125.1600 L
  229.0800 126.6000 L
  230.7600 127.8000 L
  232.6800 128.6400 L
  234.6000 129.1200 L
  236.6400 129.1200 L
  238.6800 128.6400 L
  240.4800 127.8000 L
  242.1600 126.6000 L
  243.4800 125.1600 L
  244.5600 123.3600 L
  245.1600 121.4400 L
  245.4000 119.4000 L
  245.1600 117.3600 L
  244.5600 115.5600 L
  243.4800 113.8800 L
  242.1600 112.3200 L
  240.4800 111.1200 L
  238.6800 110.2800 L
  236.6400 109.9200 L
  234.6000 109.9200 L
  232.6800 110.2800 L
  230.7600 111.1200 L
  229.0800 112.3200 L
  227.7600 113.8800 L
  226.8000 115.5600 L
  226.0800 117.3600 L
  225.9600 119.4000 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 233.1600 116.5200 0 Tp
TP
84.485107 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(0\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  276.8400 51.4800 m
  277.0800 53.5200 L
  277.6800 55.4400 L
  278.6400 57.2400 L
  280.0800 58.6800 L
  281.7600 59.8800 L
  283.5600 60.7200 L
  285.6000 61.2000 L
  287.6400 61.2000 L
  289.5600 60.7200 L
  291.4800 59.8800 L
  293.0400 58.6800 L
  294.4800 57.2400 L
  295.4400 55.4400 L
  296.0400 53.5200 L
  296.2800 51.4800 L
  296.0400 49.4400 L
  295.4400 47.5200 L
  294.4800 45.7200 L
  293.0400 44.2800 L
  291.4800 43.0800 L
  289.5600 42.2400 L
  287.6400 41.7600 L
  285.6000 41.7600 L
  283.5600 42.2400 L
  281.7600 43.0800 L
  280.0800 44.2800 L
  278.6400 45.7200 L
  277.6800 47.5200 L
  277.0800 49.4400 L
  276.8400 51.4800 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 284.0400 48.4800 0 Tp
TP
84.485107 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  196.6800 85.5600 m
  196.9200 87.4800 L
  197.5200 89.5200 L
  198.6000 91.2000 L
  199.9200 92.7600 L
  201.6000 93.9600 L
  203.4000 94.8000 L
  205.4400 95.1600 L
  207.4800 95.1600 L
  209.4000 94.8000 L
  211.3200 93.9600 L
  213.0000 92.7600 L
  214.3200 91.2000 L
  215.2800 89.5200 L
  216.0000 87.4800 L
  216.1200 85.5600 L
  216.0000 83.5200 L
  215.2800 81.6000 L
  214.3200 79.8000 L
  213.0000 78.2400 L
  211.3200 77.0400 L
  209.4000 76.3200 L
  207.4800 75.8400 L
  205.4400 75.8400 L
  203.4000 76.3200 L
  201.6000 77.0400 L
  199.9200 78.2400 L
  198.6000 79.8000 L
  197.5200 81.6000 L
  196.9200 83.5200 L
  196.6800 85.5600 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 203.8800 82.5600 0 Tp
TP
84.485107 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(5\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  306.0000 85.5600 m
  306.2400 87.4800 L
  306.8400 89.5200 L
  307.9200 91.2000 L
  309.2400 92.7600 L
  310.9200 93.9600 L
  312.7200 94.8000 L
  314.7600 95.1600 L
  316.8000 95.1600 L
  318.7200 94.8000 L
  320.6400 93.9600 L
  322.2000 92.7600 L
  323.6400 91.2000 L
  324.6000 89.5200 L
  325.2000 87.4800 L
  325.4400 85.5600 L
  325.2000 83.5200 L
  324.6000 81.6000 L
  323.6400 79.8000 L
  322.2000 78.2400 L
  320.6400 77.0400 L
  318.7200 76.3200 L
  316.8000 75.8400 L
  314.7600 75.8400 L
  312.7200 76.3200 L
  310.9200 77.0400 L
  309.2400 78.2400 L
  307.9200 79.8000 L
  306.8400 81.6000 L
  306.2400 83.5200 L
  306.0000 85.5600 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 313.2000 82.5600 0 Tp
TP
84.485107 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  276.8400 119.4000 m
  277.0800 121.4400 L
  277.6800 123.3600 L
  278.6400 125.1600 L
  280.0800 126.6000 L
  281.7600 127.8000 L
  283.5600 128.6400 L
  285.6000 129.1200 L
  287.6400 129.1200 L
  289.5600 128.6400 L
  291.4800 127.8000 L
  293.0400 126.6000 L
  294.4800 125.1600 L
  295.4400 123.3600 L
  296.0400 121.4400 L
  296.2800 119.4000 L
  296.0400 117.3600 L
  295.4400 115.5600 L
  294.4800 113.8800 L
  293.0400 112.3200 L
  291.4800 111.1200 L
  289.5600 110.2800 L
  287.6400 109.9200 L
  285.6000 109.9200 L
  283.5600 110.2800 L
  281.7600 111.1200 L
  280.0800 112.3200 L
  278.6400 113.8800 L
  277.6800 115.5600 L
  277.0800 117.3600 L
  276.8400 119.4000 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 284.0400 116.5200 0 Tp
TP
84.485107 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
2.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  225.9600 119.4000 m
  224.0400 119.4000 L
  222.2400 119.2800 L
  220.5600 119.1600 L
  219.0000 119.0400 L
  217.4400 118.8000 L
  216.1200 118.5600 L
  214.6800 118.2000 L
  213.4800 117.8400 L
  212.2800 117.4800 L
  211.2000 117.1200 L
  210.1200 116.7600 L
  209.0400 116.4000 L
  208.0800 115.9200 L
  207.2400 115.4400 L
  206.2800 114.9600 L
  205.4400 114.4800 L
  204.6000 114.0000 L
  201.3600 111.8400 L
  198.3600 109.8000 L
  195.8400 107.7600 L
  193.6800 105.6000 L
  191.6400 103.5600 L
  189.9600 101.5200 L
  188.5200 99.3600 L
  187.3200 97.3200 L
  186.3600 95.2800 L
  185.6400 93.2400 L
  185.1600 91.3200 L
  184.8000 89.2800 L
  184.6800 87.3600 L
  184.6800 85.3200 L
  184.9200 83.4000 L
  185.1600 81.4800 L
  185.6400 79.6800 L
  186.0000 78.6000 L
  186.2400 77.6400 L
  186.6000 76.5600 L
  187.0800 75.6000 L
  187.5600 74.6400 L
  188.0400 73.5600 L
  188.5200 72.6000 L
  189.1200 71.6400 L
  189.8400 70.5600 L
  190.5600 69.6000 L
  191.2800 68.5200 L
  192.2400 67.4400 L
  193.0800 66.3600 L
  194.0400 65.2800 L
  195.3600 63.8400 L
  196.9200 62.4000 L
  198.6000 60.9600 L
  200.4000 59.5200 L
  202.3200 58.0800 L
  204.3600 56.7600 L
  206.6400 55.5600 L
  208.9200 54.4800 L
  211.4400 53.5200 L
  214.0800 52.6800 L
  216.8400 52.0800 L
  219.7200 51.6000 L
  222.7200 51.4800 L
  225.9600 51.4800 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  225.9600 51.4800 m
  226.0800 53.5200 L
  226.8000 55.4400 L
  227.7600 57.2400 L
  229.0800 58.6800 L
  230.7600 59.8800 L
  232.6800 60.7200 L
  234.6000 61.2000 L
  236.6400 61.2000 L
  238.6800 60.7200 L
  240.4800 59.8800 L
  242.1600 58.6800 L
  243.4800 57.2400 L
  244.5600 55.4400 L
  245.1600 53.5200 L
  245.4000 51.4800 L
  245.1600 49.4400 L
  244.5600 47.5200 L
  243.4800 45.7200 L
  242.1600 44.2800 L
  240.4800 43.0800 L
  238.6800 42.2400 L
  236.6400 41.7600 L
  234.6000 41.7600 L
  232.6800 42.2400 L
  230.7600 43.0800 L
  229.0800 44.2800 L
  227.7600 45.7200 L
  226.8000 47.5200 L
  226.0800 49.4400 L
  225.9600 51.4800 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 233.1600 48.4800 0 Tp
TP
84.485107 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
2.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  322.8000 78.7200 m
  323.5200 76.9200 L
  324.2400 75.1200 L
  324.9600 73.5600 L
  325.4400 71.8800 L
  326.0400 70.4400 L
  326.5200 69.0000 L
  326.8800 67.5600 L
  327.2400 66.2400 L
  327.4800 65.0400 L
  327.8400 63.8400 L
  327.9600 62.7600 L
  328.2000 61.6800 L
  328.3200 60.6000 L
  328.4400 59.6400 L
  328.4400 58.6800 L
  328.5600 57.7200 L
  328.5600 56.8800 L
  328.5600 55.9200 L
  328.4400 55.0800 L
  328.4400 54.3600 L
  328.3200 53.5200 L
  327.9600 50.2800 L
  327.3600 47.2800 L
  326.5200 44.4000 L
  325.5600 41.7600 L
  324.4800 39.3600 L
  323.1600 37.3200 L
  321.8400 35.2800 L
  320.2800 33.3600 L
  318.7200 31.6800 L
  317.0400 30.1200 L
  315.3600 28.6800 L
  313.5600 27.4800 L
  311.7600 26.2800 L
  309.8400 25.2000 L
  308.0400 24.3600 L
  306.2400 23.5200 L
  304.4400 22.6800 L
  302.6400 22.0800 L
  300.9600 21.3600 L
  299.2800 20.8800 L
  297.7200 20.2800 L
  296.5200 19.9200 L
  295.4400 19.5600 L
  294.3600 19.2000 L
  293.2800 18.8400 L
  292.3200 18.6000 L
  291.3600 18.3600 L
  290.5200 18.0000 L
  289.6800 17.7600 L
  288.8400 17.5200 L
  288.0000 17.4000 L
  287.2800 17.1600 L
  286.4400 16.9200 L
  285.7200 16.8000 L
  285.0000 16.5600 L
  284.2800 16.4400 L
  282.3600 15.9600 L
  280.4400 15.7200 L
  278.5200 15.3600 L
  276.4800 15.1200 L
  274.5600 14.8800 L
  272.6400 14.6400 L
  270.8400 14.5200 L
  269.0400 14.2800 L
  267.1200 14.2800 L
  265.3200 14.1600 L
  263.6400 14.1600 L
  260.8800 14.1600 L
  258.2400 14.2800 L
  255.7200 14.5200 L
  253.3200 14.7600 L
  251.0400 15.0000 L
  248.8800 15.3600 L
  246.7200 15.7200 L
  244.6800 16.0800 L
  242.7600 16.4400 L
  240.7200 16.8000 L
  238.8000 17.1600 L
  237.2400 17.5200 L
  235.6800 17.7600 L
  234.1200 18.1200 L
  232.5600 18.4800 L
  231.0000 18.8400 L
  229.4400 19.2000 L
  228.0000 19.5600 L
  226.4400 20.0400 L
  224.8800 20.5200 L
  223.4400 21.0000 L
  222.0000 21.7200 L
  220.4400 22.3200 L
  219.0000 23.1600 L
  217.5600 24.0000 L
  216.3600 24.8400 L
  215.0400 25.8000 L
  213.8400 26.7600 L
  212.5200 27.8400 L
  211.3200 29.0400 L
  210.1200 30.3600 L
  208.9200 31.8000 L
  207.7200 33.3600 L
  206.5200 35.0400 L
  205.3200 36.7200 L
  204.1200 38.7600 L
  203.0400 40.6800 L
  201.8400 42.8400 L
  200.7600 45.2400 L
  200.0400 47.0400 L
  199.3200 48.7200 L
  198.6000 50.6400 L
  198.0000 52.4400 L
  197.4000 54.4800 L
  196.9200 56.4000 L
  196.5600 58.3200 L
  196.2000 60.3600 L
  196.0800 62.2800 L
  196.0800 64.3200 L
  196.3200 66.2400 L
  196.6800 68.1600 L
  197.1600 70.0800 L
  198.0000 71.8800 L
  198.9600 73.6800 L
  200.1600 75.4800 L
  201.6000 77.0400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  320.6400 77.1600 m
  321.1200 75.8400 L
  321.4800 74.4000 L
  321.7200 72.7200 L
  321.9600 71.0400 L
  322.0800 69.2400 L
  322.0800 67.3200 L
  322.0800 65.4000 L
  321.9600 63.3600 L
  321.7200 61.3200 L
  321.4800 59.2800 L
  321.1200 57.3600 L
  320.5200 55.3200 L
  319.9200 53.2800 L
  319.2000 51.3600 L
  318.4800 49.5600 L
  317.5200 47.7600 L
  316.6800 46.4400 L
  315.8400 45.2400 L
  315.0000 44.0400 L
  314.0400 42.9600 L
  313.0800 41.8800 L
  312.0000 40.9200 L
  311.0400 39.9600 L
  309.9600 39.0000 L
  308.8800 38.2800 L
  307.8000 37.5600 L
  306.7200 36.8400 L
  305.7600 36.1200 L
  304.6800 35.5200 L
  303.7200 35.0400 L
  302.6400 34.4400 L
  301.8000 34.0800 L
  301.2000 33.8400 L
  300.7200 33.6000 L
  300.2400 33.4800 L
  299.7600 33.2400 L
  299.2800 33.1200 L
  298.8000 32.8800 L
  298.4400 32.7600 L
  297.9600 32.6400 L
  297.4800 32.5200 L
  297.0000 32.4000 L
  296.5200 32.2800 L
  296.0400 32.1600 L
  295.5600 32.0400 L
  294.0000 31.8000 L
  292.3200 31.4400 L
  290.6400 31.2000 L
  288.7200 30.9600 L
  286.8000 30.7200 L
  284.8800 30.6000 L
  282.8400 30.4800 L
  280.6800 30.4800 L
  278.5200 30.4800 L
  276.3600 30.6000 L
  274.2000 30.8400 L
  272.0400 31.2000 L
  269.7600 31.5600 L
  267.6000 32.1600 L
  265.5600 32.6400 L
  263.6400 33.3600 L
  261.8400 34.0800 L
  259.9200 34.9200 L
  258.1200 35.7600 L
  256.3200 36.8400 L
  254.5200 37.8000 L
  252.8400 38.8800 L
  251.2800 40.0800 L
  249.7200 41.4000 L
  248.2800 42.7200 L
  246.8400 44.1600 L
  245.6400 45.7200 L
  244.4400 47.2800 L
S
U
u
  0.000 0.000 0.000 1.000 K
  296.2800 119.4000 m
  298.5600 119.7600 L
  300.8400 119.7600 L
  303.1200 119.7600 L
  305.2800 119.5200 L
  307.4400 119.1600 L
  309.4800 118.6800 L
  311.5200 118.0800 L
  313.4400 117.3600 L
  315.3600 116.6400 L
  317.2800 115.6800 L
  318.9600 114.6000 L
  320.6400 113.5200 L
  322.3200 112.3200 L
  323.7600 111.0000 L
  325.2000 109.6800 L
  326.5200 108.3600 L
  327.7200 106.9200 L
  328.9200 105.3600 L
  329.8800 103.9200 L
  330.8400 102.3600 L
  331.6800 100.8000 L
  332.4000 99.2400 L
  333.0000 97.5600 L
  333.6000 96.0000 L
  334.0800 94.4400 L
  334.4400 92.7600 L
  334.8000 91.2000 L
  335.0400 89.5200 L
  335.1600 87.9600 L
  335.2800 86.4000 L
  335.2800 84.8400 L
  335.1600 83.2800 L
  335.0400 82.0800 L
  334.9200 80.8800 L
  334.8000 79.6800 L
  334.5600 78.4800 L
  334.2000 77.2800 L
  333.9600 76.0800 L
  333.4800 75.0000 L
  333.1200 73.9200 L
  332.6400 72.7200 L
  332.0400 71.6400 L
  331.4400 70.5600 L
  330.7200 69.4800 L
  330.0000 68.4000 L
  329.2800 67.3200 L
  327.8400 65.5200 L
  326.1600 63.7200 L
  324.3600 62.0400 L
  322.4400 60.3600 L
  320.2800 58.8000 L
  318.1200 57.3600 L
  315.7200 56.0400 L
  313.2000 54.8400 L
  310.6800 53.7600 L
  307.9200 52.9200 L
  305.1600 52.2000 L
  302.2800 51.7200 L
  299.2800 51.4800 L
  296.2800 51.4800 L
S
U
u
  0.000 0.000 0.000 1.000 K
  203.8800 76.2000 m
  203.2800 72.0000 L
  203.1600 67.9200 L
  203.4000 64.2000 L
  203.8800 60.6000 L
  204.8400 57.1200 L
  206.0400 54.0000 L
  207.4800 51.0000 L
  209.0400 48.2400 L
  210.8400 45.7200 L
  212.6400 43.4400 L
  214.5600 41.2800 L
  216.4800 39.4800 L
  218.5200 37.9200 L
  220.3200 36.6000 L
  222.1200 35.4000 L
  223.8000 34.4400 L
  225.2400 33.8400 L
  225.4800 33.7200 L
  225.7200 33.6000 L
  225.8400 33.6000 L
  226.0800 33.4800 L
  226.3200 33.3600 L
  226.4400 33.3600 L
  226.6800 33.2400 L
  226.9200 33.2400 L
  227.0400 33.1200 L
  227.2800 33.1200 L
  227.4000 33.1200 L
  227.6400 33.0000 L
  227.7600 33.0000 L
  228.0000 32.8800 L
  229.8000 32.5200 L
  231.8400 32.0400 L
  233.8800 31.6800 L
  236.0400 31.3200 L
  238.2000 31.0800 L
  240.3600 30.8400 L
  242.7600 30.6000 L
  245.0400 30.4800 L
  247.4400 30.4800 L
  249.7200 30.6000 L
  252.1200 30.8400 L
  254.2800 31.0800 L
  256.3200 31.4400 L
  258.3600 32.0400 L
  260.5200 32.7600 L
  262.5600 33.6000 L
  264.7200 34.6800 L
  266.8800 36.1200 L
  269.0400 37.6800 L
  271.2000 39.4800 L
  273.2400 41.7600 L
  275.5200 44.4000 L
  277.8000 47.4000 L
S
U
u
  0.000 0.000 0.000 1.000 K
  203.8800 94.8000 m
  203.2800 96.6000 L
  202.8000 98.4000 L
  202.4400 100.3200 L
  202.3200 102.3600 L
  202.3200 104.2800 L
  202.4400 106.3200 L
  202.6800 108.3600 L
  203.1600 110.4000 L
  203.6400 112.5600 L
  204.3600 114.6000 L
  205.0800 116.6400 L
  206.0400 118.5600 L
  207.1200 120.6000 L
  208.3200 122.6400 L
  209.5200 124.5600 L
  210.9600 126.3600 L
  212.5200 128.1600 L
  214.0800 129.9600 L
  215.7600 131.5200 L
  217.5600 133.0800 L
  219.4800 134.5200 L
  221.5200 135.9600 L
  223.5600 137.1600 L
  225.7200 138.2400 L
  227.8800 139.2000 L
  230.0400 139.9200 L
  232.2000 140.5200 L
  234.4800 141.1200 L
  236.7600 141.4800 L
  239.0400 141.7200 L
  241.3200 141.9600 L
  243.7200 141.9600 L
  246.0000 141.9600 L
  248.4000 141.7200 L
  250.6800 141.4800 L
  253.0800 141.1200 L
  255.3600 140.6400 L
  257.6400 140.0400 L
  259.9200 139.3200 L
  262.0800 138.6000 L
  264.2400 137.7600 L
  266.2800 136.8000 L
  268.3200 135.7200 L
  270.2400 134.6400 L
  272.0400 133.4400 L
  273.7200 132.1200 L
  275.2800 130.8000 L
  276.8400 129.3600 L
  278.2800 127.8000 L
  279.6000 126.2400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  318.3600 94.9200 m
  319.0800 96.6000 L
  319.5600 98.5200 L
  319.8000 100.3200 L
  320.0400 102.3600 L
  320.0400 104.2800 L
  319.9200 106.3200 L
  319.5600 108.3600 L
  319.2000 110.4000 L
  318.6000 112.5600 L
  318.0000 114.6000 L
  317.1600 116.6400 L
  316.2000 118.5600 L
  315.1200 120.6000 L
  313.9200 122.5200 L
  312.7200 124.4400 L
  311.2800 126.3600 L
  309.7200 128.1600 L
  308.1600 129.8400 L
  306.4800 131.5200 L
  304.6800 133.0800 L
  302.7600 134.5200 L
  300.7200 135.8400 L
  298.6800 137.0400 L
  296.5200 138.1200 L
  294.2400 139.0800 L
  292.2000 139.8000 L
  289.9200 140.5200 L
  287.7600 141.0000 L
  285.4800 141.3600 L
  283.2000 141.7200 L
  280.8000 141.8400 L
  278.5200 141.8400 L
  276.1200 141.8400 L
  273.8400 141.6000 L
  271.5600 141.3600 L
  269.2800 141.0000 L
  267.0000 140.5200 L
  264.7200 139.9200 L
  262.4400 139.3200 L
  260.2800 138.6000 L
  258.1200 137.6400 L
  256.0800 136.8000 L
  254.0400 135.7200 L
  252.1200 134.6400 L
  250.3200 133.4400 L
  248.5200 132.1200 L
  246.8400 130.8000 L
  245.2800 129.3600 L
  243.9600 127.8000 L
  242.6400 126.2400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  244.4400 123.4800 m
  246.9600 125.7600 L
  249.7200 127.6800 L
  252.4800 129.0000 L
  255.2400 130.0800 L
  258.1200 130.6800 L
  261.0000 130.9200 L
  263.7600 130.8000 L
  266.5200 130.3200 L
  269.1600 129.4800 L
  271.5600 128.4000 L
  273.8400 127.0800 L
  275.8800 125.4000 L
  277.8000 123.4800 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  406.3200 69.2400 m
  406.5600 72.7200 L
  407.1600 76.0800 L
  408.3600 79.5600 L
  409.9200 82.9200 L
  411.9600 86.0400 L
  414.3600 89.1600 L
  417.2400 92.0400 L
  420.3600 94.8000 L
  423.9600 97.3200 L
  427.8000 99.6000 L
  431.8800 101.6400 L
  436.2000 103.4400 L
  440.8800 105.0000 L
  445.6800 106.2000 L
  450.6000 107.1600 L
  455.6400 107.7600 L
  460.6800 108.0000 L
  465.8400 108.0000 L
  471.0000 107.7600 L
  476.0400 107.1600 L
  480.9600 106.2000 L
  485.7600 105.0000 L
  490.3200 103.4400 L
  494.7600 101.6400 L
  498.9600 99.6000 L
  502.8000 97.3200 L
  506.1600 94.8000 L
  509.4000 92.0400 L
  512.2800 89.1600 L
  514.6800 86.0400 L
  516.7200 82.9200 L
  518.2800 79.5600 L
  519.3600 76.0800 L
  520.0800 72.7200 L
  520.3200 69.2400 L
  520.0800 65.7600 L
  519.3600 62.2800 L
  518.2800 58.8000 L
  516.7200 55.5600 L
  514.6800 52.3200 L
  512.2800 49.2000 L
  509.4000 46.3200 L
  506.1600 43.5600 L
  502.8000 41.0400 L
  498.9600 38.8800 L
  494.7600 36.8400 L
  490.3200 35.0400 L
  485.7600 33.6000 L
  480.9600 32.2800 L
  476.0400 31.4400 L
  471.0000 30.7200 L
  465.8400 30.4800 L
  460.6800 30.4800 L
  455.6400 30.7200 L
  450.6000 31.4400 L
  445.6800 32.2800 L
  440.8800 33.6000 L
  436.2000 35.0400 L
  431.8800 36.8400 L
  427.8000 38.8800 L
  423.9600 41.0400 L
  420.3600 43.5600 L
  417.2400 46.3200 L
  414.3600 49.2000 L
  411.9600 52.3200 L
  409.9200 55.5600 L
  408.3600 58.8000 L
  407.1600 62.2800 L
  406.5600 65.7600 L
  406.3200 69.2400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  428.0400 103.2000 m
  428.2800 105.2400 L
  428.8800 107.1600 L
  429.9600 108.9600 L
  431.2800 110.4000 L
  432.9600 111.6000 L
  434.7600 112.4400 L
  436.8000 112.9200 L
  438.8400 112.9200 L
  440.7600 112.4400 L
  442.6800 111.6000 L
  444.2400 110.4000 L
  445.6800 108.9600 L
  446.6400 107.1600 L
  447.2400 105.2400 L
  447.4800 103.2000 L
  447.2400 101.1600 L
  446.6400 99.2400 L
  445.6800 97.5600 L
  444.2400 96.0000 L
  442.6800 94.8000 L
  440.7600 93.9600 L
  438.8400 93.6000 L
  436.8000 93.6000 L
  434.7600 93.9600 L
  432.9600 94.8000 L
  431.2800 96.0000 L
  429.9600 97.5600 L
  428.8800 99.2400 L
  428.2800 101.1600 L
  428.0400 103.2000 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 435.2400 100.2000 0 Tp
TP
84.485107 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(0\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  479.0400 35.2800 m
  479.2800 37.3200 L
  480.0000 39.1200 L
  480.9600 40.9200 L
  482.2800 42.3600 L
  483.9600 43.5600 L
  485.7600 44.4000 L
  487.8000 44.8800 L
  489.8400 44.8800 L
  491.8800 44.4000 L
  493.6800 43.5600 L
  495.3600 42.3600 L
  496.6800 40.9200 L
  497.7600 39.1200 L
  498.3600 37.3200 L
  498.6000 35.2800 L
  498.3600 33.2400 L
  497.7600 31.3200 L
  496.6800 29.5200 L
  495.3600 28.0800 L
  493.6800 26.8800 L
  491.8800 26.0400 L
  489.8400 25.5600 L
  487.8000 25.5600 L
  485.7600 26.0400 L
  483.9600 26.8800 L
  482.2800 28.0800 L
  480.9600 29.5200 L
  480.0000 31.3200 L
  479.2800 33.2400 L
  479.0400 35.2800 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 486.3600 32.2800 0 Tp
TP
84.485107 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  399.0000 69.2400 m
  399.2400 71.1600 L
  399.8400 73.2000 L
  400.8000 74.8800 L
  402.2400 76.4400 L
  403.8000 77.6400 L
  405.7200 78.4800 L
  407.6400 78.8400 L
  409.6800 78.8400 L
  411.7200 78.4800 L
  413.5200 77.6400 L
  415.2000 76.4400 L
  416.6400 74.8800 L
  417.6000 73.2000 L
  418.2000 71.1600 L
  418.4400 69.2400 L
  418.2000 67.2000 L
  417.6000 65.2800 L
  416.6400 63.4800 L
  415.2000 61.9200 L
  413.5200 60.7200 L
  411.7200 60.0000 L
  409.6800 59.5200 L
  407.6400 59.5200 L
  405.7200 60.0000 L
  403.8000 60.7200 L
  402.2400 61.9200 L
  400.8000 63.4800 L
  399.8400 65.2800 L
  399.2400 67.2000 L
  399.0000 69.2400 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 406.2000 66.2400 0 Tp
TP
84.485107 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(5\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  508.2000 69.2400 m
  508.3200 71.1600 L
  509.0400 73.2000 L
  510.0000 74.8800 L
  511.3200 76.4400 L
  513.0000 77.6400 L
  514.9200 78.4800 L
  516.8400 78.8400 L
  518.8800 78.8400 L
  520.9200 78.4800 L
  522.7200 77.6400 L
  524.4000 76.4400 L
  525.7200 74.8800 L
  526.8000 73.2000 L
  527.4000 71.1600 L
  527.6400 69.2400 L
  527.4000 67.2000 L
  526.8000 65.2800 L
  525.7200 63.4800 L
  524.4000 61.9200 L
  522.7200 60.7200 L
  520.9200 60.0000 L
  518.8800 59.5200 L
  516.8400 59.5200 L
  514.9200 60.0000 L
  513.0000 60.7200 L
  511.3200 61.9200 L
  510.0000 63.4800 L
  509.0400 65.2800 L
  508.3200 67.2000 L
  508.2000 69.2400 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 515.4000 66.2400 0 Tp
TP
84.485107 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  479.0400 103.2000 m
  479.2800 105.2400 L
  480.0000 107.1600 L
  480.9600 108.9600 L
  482.2800 110.4000 L
  483.9600 111.6000 L
  485.7600 112.4400 L
  487.8000 112.9200 L
  489.8400 112.9200 L
  491.8800 112.4400 L
  493.6800 111.6000 L
  495.3600 110.4000 L
  496.6800 108.9600 L
  497.7600 107.1600 L
  498.3600 105.2400 L
  498.6000 103.2000 L
  498.3600 101.1600 L
  497.7600 99.2400 L
  496.6800 97.5600 L
  495.3600 96.0000 L
  493.6800 94.8000 L
  491.8800 93.9600 L
  489.8400 93.6000 L
  487.8000 93.6000 L
  485.7600 93.9600 L
  483.9600 94.8000 L
  482.2800 96.0000 L
  480.9600 97.5600 L
  480.0000 99.2400 L
  479.2800 101.1600 L
  479.0400 103.2000 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 486.3600 100.2000 0 Tp
TP
84.485107 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
2.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  428.0400 103.2000 m
  426.2400 103.2000 L
  424.4400 103.0800 L
  422.7600 102.9600 L
  421.2000 102.8400 L
  419.7600 102.6000 L
  418.3200 102.3600 L
  417.0000 102.0000 L
  415.6800 101.6400 L
  414.6000 101.2800 L
  413.4000 100.9200 L
  412.3200 100.4400 L
  411.3600 100.0800 L
  410.4000 99.6000 L
  409.4400 99.1200 L
  408.6000 98.6400 L
  407.7600 98.1600 L
  406.9200 97.6800 L
  403.5600 95.5200 L
  400.6800 93.4800 L
  398.0400 91.4400 L
  395.7600 89.2800 L
  393.8400 87.2400 L
  392.0400 85.2000 L
  390.6000 83.0400 L
  389.4000 81.0000 L
  388.4400 78.9600 L
  387.7200 76.9200 L
  387.2400 75.0000 L
  387.0000 72.9600 L
  386.7600 71.0400 L
  386.8800 69.0000 L
  387.0000 67.0800 L
  387.3600 65.1600 L
  387.8400 63.3600 L
  388.0800 62.2800 L
  388.4400 61.3200 L
  388.8000 60.2400 L
  389.1600 59.2800 L
  389.6400 58.3200 L
  390.1200 57.2400 L
  390.7200 56.2800 L
  391.3200 55.3200 L
  391.9200 54.2400 L
  392.6400 53.2800 L
  393.4800 52.2000 L
  394.3200 51.1200 L
  395.2800 50.0400 L
  396.2400 48.9600 L
  397.6800 47.5200 L
  399.1200 46.0800 L
  400.8000 44.6400 L
  402.6000 43.2000 L
  404.6400 41.7600 L
  406.6800 40.4400 L
  408.8400 39.2400 L
  411.2400 38.2800 L
  413.6400 37.3200 L
  416.2800 36.4800 L
  419.0400 35.8800 L
  421.9200 35.4000 L
  425.0400 35.2800 L
  428.0400 35.2800 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  428.0400 35.2800 m
  428.2800 37.3200 L
  428.8800 39.1200 L
  429.9600 40.9200 L
  431.2800 42.3600 L
  432.9600 43.5600 L
  434.7600 44.4000 L
  436.8000 44.8800 L
  438.8400 44.8800 L
  440.7600 44.4000 L
  442.6800 43.5600 L
  444.2400 42.3600 L
  445.6800 40.9200 L
  446.6400 39.1200 L
  447.2400 37.3200 L
  447.4800 35.2800 L
  447.2400 33.2400 L
  446.6400 31.3200 L
  445.6800 29.5200 L
  444.2400 28.0800 L
  442.6800 26.8800 L
  440.7600 26.0400 L
  438.8400 25.5600 L
  436.8000 25.5600 L
  434.7600 26.0400 L
  432.9600 26.8800 L
  431.2800 28.0800 L
  429.9600 29.5200 L
  428.8800 31.3200 L
  428.2800 33.2400 L
  428.0400 35.2800 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 435.2400 32.2800 0 Tp
TP
84.485107 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
2.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  524.8800 75.9600 m
  525.6000 77.8800 L
  526.3200 79.6800 L
  526.9200 81.3600 L
  527.5200 82.9200 L
  528.0000 84.4800 L
  528.4800 85.9200 L
  528.8400 87.3600 L
  529.2000 88.6800 L
  529.5600 89.8800 L
  529.8000 91.0800 L
  529.9200 92.2800 L
  530.1600 93.3600 L
  530.2800 94.3200 L
  530.2800 95.4000 L
  530.4000 96.3600 L
  530.4000 97.3200 L
  530.4000 98.1600 L
  530.4000 99.0000 L
  530.2800 99.8400 L
  530.2800 100.6800 L
  530.1600 101.5200 L
  529.6800 104.7600 L
  529.0800 107.8800 L
  528.2400 110.6400 L
  527.1600 113.2800 L
  525.9600 115.6800 L
  524.6400 117.8400 L
  523.2000 119.8800 L
  521.7600 121.6800 L
  520.0800 123.3600 L
  518.4000 124.9200 L
  516.6000 126.3600 L
  514.6800 127.5600 L
  512.8800 128.7600 L
  510.9600 129.7200 L
  509.1600 130.6800 L
  507.2400 131.5200 L
  505.5600 132.2400 L
  503.7600 132.8400 L
  501.9600 133.4400 L
  500.2800 134.0400 L
  498.7200 134.5200 L
  497.5200 134.8800 L
  496.3200 135.2400 L
  495.2400 135.6000 L
  494.1600 135.9600 L
  493.2000 136.2000 L
  492.2400 136.4400 L
  491.2800 136.6800 L
  490.4400 136.9200 L
  489.6000 137.1600 L
  488.7600 137.4000 L
  487.9200 137.6400 L
  487.2000 137.7600 L
  486.3600 138.0000 L
  485.6400 138.1200 L
  484.9200 138.2400 L
  483.0000 138.7200 L
  480.9600 138.9600 L
  479.0400 139.3200 L
  477.0000 139.5600 L
  475.0800 139.8000 L
  473.1600 139.9200 L
  471.1200 140.0400 L
  469.2000 140.1600 L
  467.4000 140.2800 L
  465.6000 140.2800 L
  463.8000 140.2800 L
  460.9200 140.1600 L
  458.2800 140.0400 L
  455.7600 139.8000 L
  453.3600 139.5600 L
  450.9600 139.2000 L
  448.8000 138.8400 L
  446.6400 138.4800 L
  444.6000 138.1200 L
  442.5600 137.6400 L
  440.5200 137.2800 L
  438.6000 136.8000 L
  437.0400 136.5600 L
  435.3600 136.2000 L
  433.8000 135.8400 L
  432.2400 135.4800 L
  430.6800 135.1200 L
  429.1200 134.7600 L
  427.6800 134.2800 L
  426.1200 133.9200 L
  424.6800 133.3200 L
  423.1200 132.7200 L
  421.6800 132.1200 L
  420.1200 131.4000 L
  418.6800 130.5600 L
  417.2400 129.7200 L
  415.9200 128.8800 L
  414.7200 127.9200 L
  413.4000 126.8400 L
  412.2000 125.7600 L
  410.8800 124.5600 L
  409.6800 123.1200 L
  408.4800 121.6800 L
  407.2800 120.1200 L
  406.0800 118.4400 L
  404.8800 116.7600 L
  403.8000 114.8400 L
  402.6000 112.6800 L
  401.5200 110.4000 L
  400.4400 108.0000 L
  399.7200 106.4400 L
  399.0000 104.6400 L
  398.4000 102.9600 L
  397.8000 101.1600 L
  397.2000 99.2400 L
  396.7200 97.4400 L
  396.3600 95.5200 L
  396.1200 93.7200 L
  396.0000 91.8000 L
  395.8800 89.8800 L
  396.0000 87.9600 L
  396.2400 86.1600 L
  396.7200 84.3600 L
  397.3200 82.5600 L
  398.0400 80.7600 L
  399.1200 79.0800 L
  400.3200 77.5200 L
  401.7600 75.9600 L
S
U
u
  522.8400 60.8400 m
  523.2000 59.5200 L
  523.5600 58.0800 L
  523.8000 56.4000 L
  524.0400 54.7200 L
  524.1600 52.9200 L
  524.2800 51.0000 L
  524.2800 49.0800 L
  524.1600 47.0400 L
  523.9200 45.0000 L
  523.5600 42.9600 L
  523.2000 41.0400 L
  522.7200 39.0000 L
  522.1200 37.0800 L
  521.4000 35.1600 L
  520.5600 33.3600 L
  519.7200 31.5600 L
  518.8800 30.2400 L
  518.0400 29.0400 L
  517.0800 27.8400 L
  516.2400 26.7600 L
  515.1600 25.6800 L
  514.2000 24.7200 L
  513.1200 23.7600 L
  512.0400 22.8000 L
  511.0800 21.9600 L
  510.0000 21.2400 L
  508.9200 20.5200 L
  507.8400 19.8000 L
  506.7600 19.2000 L
  505.8000 18.7200 L
  504.9600 18.1200 L
  504.0000 17.7600 L
  503.5200 17.5200 L
  503.0400 17.2800 L
  502.5600 17.1600 L
  502.0800 16.9200 L
  501.6000 16.8000 L
  501.1200 16.5600 L
  500.6400 16.4400 L
  500.1600 16.3200 L
  499.6800 16.2000 L
  499.2000 16.0800 L
  498.7200 15.9600 L
  498.2400 15.8400 L
  497.7600 15.7200 L
  496.2000 15.4800 L
  494.6400 15.1200 L
  492.8400 14.8800 L
  491.0400 14.6400 L
  489.1200 14.4000 L
  487.0800 14.2800 L
  485.0400 14.1600 L
  483.0000 14.1600 L
  480.8400 14.1600 L
  478.6800 14.2800 L
  476.4000 14.5200 L
  474.2400 14.8800 L
  471.9600 15.2400 L
  469.6800 15.8400 L
  467.7600 16.4400 L
  465.8400 17.0400 L
  463.9200 17.7600 L
  462.1200 18.6000 L
  460.2000 19.4400 L
  458.4000 20.5200 L
  456.7200 21.4800 L
  455.0400 22.6800 L
  453.3600 23.8800 L
  451.8000 25.2000 L
  450.3600 26.5200 L
  449.0400 27.9600 L
  447.7200 29.5200 L
  446.6400 31.0800 L
S
U
u
  0.000 0.000 0.000 1.000 K
  498.6000 103.2000 m
  501.0000 103.5600 L
  503.4000 103.5600 L
  505.6800 103.5600 L
  507.9600 103.3200 L
  510.1200 102.9600 L
  512.4000 102.4800 L
  514.5600 101.8800 L
  516.6000 101.1600 L
  518.6400 100.3200 L
  520.5600 99.3600 L
  522.4800 98.2800 L
  524.2800 97.2000 L
  525.9600 96.0000 L
  527.5200 94.6800 L
  528.9600 93.3600 L
  530.4000 92.0400 L
  531.7200 90.6000 L
  532.9200 89.0400 L
  534.0000 87.6000 L
  534.9600 86.0400 L
  535.8000 84.4800 L
  536.6400 82.9200 L
  537.2400 81.2400 L
  537.8400 79.6800 L
  538.3200 78.1200 L
  538.8000 76.4400 L
  539.1600 74.8800 L
  539.4000 73.2000 L
  539.5200 71.6400 L
  539.6400 70.0800 L
  539.6400 68.5200 L
  539.5200 66.9600 L
  539.5200 65.7600 L
  539.2800 64.5600 L
  539.1600 63.3600 L
  538.9200 62.1600 L
  538.5600 60.9600 L
  538.2000 59.7600 L
  537.8400 58.6800 L
  537.3600 57.6000 L
  536.7600 56.4000 L
  536.2800 55.3200 L
  535.5600 54.2400 L
  534.8400 53.1600 L
  534.1200 52.0800 L
  533.2800 51.0000 L
  531.7200 49.2000 L
  530.0400 47.4000 L
  528.1200 45.7200 L
  526.0800 44.0400 L
  523.8000 42.4800 L
  521.5200 41.0400 L
  519.0000 39.7200 L
  516.3600 38.6400 L
  513.6000 37.5600 L
  510.7200 36.7200 L
  507.8400 36.0000 L
  504.8400 35.5200 L
  501.7200 35.2800 L
  498.6000 35.2800 L
S
U
u
  0.000 0.000 0.000 1.000 K
  406.2000 59.8800 m
  405.6000 55.6800 L
  405.3600 51.6000 L
  405.6000 47.8800 L
  406.2000 44.2800 L
  407.0400 40.8000 L
  408.2400 37.8000 L
  409.6800 34.8000 L
  411.2400 32.0400 L
  413.0400 29.5200 L
  414.9600 27.2400 L
  416.8800 25.0800 L
  418.8000 23.2800 L
  420.7200 21.6000 L
  422.6400 20.2800 L
  424.4400 19.0800 L
  426.0000 18.1200 L
  427.5600 17.5200 L
  427.6800 17.4000 L
  427.9200 17.2800 L
  428.0400 17.2800 L
  428.2800 17.1600 L
  428.4000 17.0400 L
  428.6400 17.0400 L
  428.8800 16.9200 L
  429.0000 16.9200 L
  429.2400 16.9200 L
  429.3600 16.8000 L
  429.6000 16.8000 L
  429.7200 16.6800 L
  429.9600 16.6800 L
  430.0800 16.6800 L
  432.0000 16.2000 L
  433.9200 15.7200 L
  435.9600 15.3600 L
  438.1200 15.0000 L
  440.2800 14.7600 L
  442.5600 14.5200 L
  444.8400 14.2800 L
  447.1200 14.1600 L
  449.5200 14.1600 L
  451.9200 14.2800 L
  454.3200 14.5200 L
  456.3600 14.7600 L
  458.4000 15.1200 L
  460.5600 15.7200 L
  462.6000 16.4400 L
  464.7600 17.2800 L
  466.8000 18.3600 L
  468.9600 19.8000 L
  471.1200 21.3600 L
  473.2800 23.2800 L
  475.5600 25.5600 L
  477.7200 28.2000 L
  480.0000 31.2000 L
S
U
u
  0.000 0.000 0.000 1.000 K
  406.2000 78.4800 m
  405.6000 80.2800 L
  405.1200 82.0800 L
  404.7600 84.0000 L
  404.6400 86.0400 L
  404.5200 87.9600 L
  404.6400 90.0000 L
  405.0000 92.0400 L
  405.3600 94.0800 L
  405.9600 96.2400 L
  406.5600 98.2800 L
  407.4000 100.3200 L
  408.3600 102.3600 L
  409.3200 104.4000 L
  410.5200 106.4400 L
  411.8400 108.3600 L
  413.2800 110.1600 L
  414.7200 111.9600 L
  416.2800 113.7600 L
  418.0800 115.3200 L
  419.8800 116.7600 L
  421.6800 118.3200 L
  423.7200 119.6400 L
  425.7600 120.8400 L
  427.9200 121.9200 L
  430.0800 122.8800 L
  432.2400 123.6000 L
  434.4000 124.2000 L
  436.5600 124.8000 L
  438.8400 125.1600 L
  441.1200 125.4000 L
  443.5200 125.6400 L
  445.8000 125.6400 L
  448.2000 125.6400 L
  450.4800 125.4000 L
  452.8800 125.1600 L
  455.1600 124.8000 L
  457.4400 124.3200 L
  459.7200 123.7200 L
  462.0000 123.0000 L
  464.1600 122.2800 L
  466.3200 121.4400 L
  468.3600 120.4800 L
  470.4000 119.4000 L
  472.3200 118.3200 L
  474.2400 117.1200 L
  475.9200 115.9200 L
  477.6000 114.6000 L
  479.1600 113.1600 L
  480.6000 111.6000 L
  481.9200 110.0400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  520.5600 78.6000 m
  521.1600 80.2800 L
  521.6400 82.2000 L
  522.0000 84.0000 L
  522.1200 86.0400 L
  522.1200 87.9600 L
  522.0000 90.0000 L
  521.7600 92.0400 L
  521.2800 94.0800 L
  520.8000 96.2400 L
  520.0800 98.2800 L
  519.2400 100.3200 L
  518.4000 102.3600 L
  517.3200 104.4000 L
  516.1200 106.3200 L
  514.8000 108.2400 L
  513.3600 110.1600 L
  511.9200 111.9600 L
  510.2400 113.6400 L
  508.5600 115.3200 L
  506.7600 116.7600 L
  504.9600 118.2000 L
  503.0400 119.5200 L
  500.8800 120.7200 L
  498.7200 121.8000 L
  496.5600 122.7600 L
  494.4000 123.4800 L
  492.2400 124.2000 L
  489.9600 124.6800 L
  487.6800 125.0400 L
  485.4000 125.4000 L
  483.1200 125.5200 L
  480.7200 125.5200 L
  478.4400 125.5200 L
  476.0400 125.4000 L
  473.7600 125.0400 L
  471.3600 124.6800 L
  469.0800 124.2000 L
  466.8000 123.6000 L
  464.6400 123.0000 L
  462.3600 122.2800 L
  460.3200 121.3200 L
  458.1600 120.4800 L
  456.2400 119.4000 L
  454.2000 118.3200 L
  452.4000 117.1200 L
  450.7200 115.9200 L
  449.0400 114.6000 L
  447.4800 113.1600 L
  446.0400 111.6000 L
  444.7200 110.0400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  446.6400 107.2800 m
  449.1600 109.5600 L
  451.8000 111.4800 L
  454.5600 112.8000 L
  457.4400 113.8800 L
  460.3200 114.4800 L
  463.0800 114.7200 L
  465.9600 114.6000 L
  468.6000 114.1200 L
  471.2400 113.2800 L
  473.7600 112.2000 L
  476.0400 110.8800 L
  478.2000 109.2000 L
  480.0000 107.2800 L
S
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
 @endspecial 679 4175 a(\(a\))874 b(\(b\))995 b(\(c\))166
4475 y Fl(Fig.)28 b(1.)h(\(a\))g(A)f(logical)g(top)s(ology)-8
b(,)29 b(\(b\))f(a)g(surviv)-5 b(able)26 b(em)m(b)s(edding,)g(and)i
(\(c\))h(a)f(non-surviv)-5 b(able)166 4588 y(em)m(b)s(edding.)166
4778 y Fj(Consider)41 b(another)f(example)f(sho)m(wn)j(in)d(Figure)g
(2,)h(in)f(whic)m(h)i(the)f(logical)d(top)s(ology)166
4898 y(in)31 b(\(a\))h(has)g(an)g(edge-cut)g(of)g(size)g(t)m(w)m(o)h
Fe(f)p Ff(e)1707 4913 y Fp(1)1746 4898 y Ff(;)17 b(e)1835
4913 y Fp(2)1874 4898 y Fe(g)32 b Fj(\(these)h(t)m(w)m(o)g(logical)c
(edges)k(corresp)s(ond)166 5019 y(to)k(the)g(t)m(w)m(o)g(connection)g
(requests)i(\()p Ff(a;)17 b(b)p Fj(\))37 b(and)g(\()p
Ff(c;)17 b(d)p Fj(\))37 b(assuming)f(no)s(des)h Ff(a;)17
b(c;)g(b)p Fj(,)37 b(and)g Ff(d)166 5139 y Fj(are)e(lo)s(cated)f(in)g
(the)h(ring)f(in)g(this)h(sequence\).)j(An)m(y)e(route)f(assignmen)m(t)
f(of)h(ligh)m(tpaths)166 5259 y(corresp)s(onding)43 b(to)g(logical)d
(links)j(\()p Ff(a;)17 b(b)p Fj(\))44 b(and)f(\()p Ff(c;)17
b(d)p Fj(\))43 b(alw)m(a)m(ys)g(share)h(a)g(ph)m(ysical)f(link,)166
5380 y(and)32 b(the)h(logical)c(top)s(ology)i(b)s(ecomes)h
(disconnected)i(when)f(the)g(shared)g(ph)m(ysical)f(link)1769
5712 y(3)p eop
%%Page: 4 4
4 3 bop 594 780 a @beginspecial 0 @llx 0 @lly 455 @urx
146 @ury 936 @rhi @setspecial
%%BeginDocument: fig/fig2.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: C:\WINNT\Profiles\fam\Personal\Research\allaten\fig2.ps
%%CreationDate: () ()
%%BoundingBox: 0 0 455 146
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 455 146
%AI3_TileBox: 0 0 455 146
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

u
 [] 0 d
0.2500 w
  0.000 0.000 0.000 1.000 K
1 J
1 j
  66.8657 71.7612 m
  66.6269 78.2090 L
S
U
u
  0.000 0.000 0.000 1.000 K
  66.6269 78.2090 m
  66.2687 84.4179 L
S
U
u
  66.2687 84.4179 m
  65.6716 90.5075 L
S
U
u
  65.6716 90.5075 m
  64.8358 96.2388 L
S
U
u
  64.8358 96.2388 m
  63.7612 101.7313 L
S
U
u
  63.7612 101.7313 m
  62.4478 106.9851 L
S
U
u
  62.4478 106.9851 m
  61.0149 112.0000 L
S
U
u
  61.0149 112.0000 m
  59.3433 116.6567 L
S
U
u
  59.3433 116.6567 m
  57.5522 120.9552 L
S
U
u
  57.5522 120.9552 m
  55.6418 124.8955 L
S
U
u
  55.6418 124.8955 m
  53.4925 128.5970 L
S
U
u
  53.4925 128.5970 m
  51.3433 131.8209 L
S
U
u
  51.3433 131.8209 m
  48.9552 134.6866 L
S
U
u
  48.9552 134.6866 m
  46.5672 137.0746 L
S
U
u
  46.5672 137.0746 m
  44.0597 139.2239 L
S
U
u
  44.0597 139.2239 m
  41.4328 140.7761 L
S
U
u
  41.4328 140.7761 m
  38.8060 141.9701 L
S
U
u
  38.8060 141.9701 m
  36.0597 142.5672 L
S
U
u
  36.0597 142.5672 m
  33.3134 142.8060 L
S
U
u
  33.3134 142.8060 m
  30.5672 142.5672 L
S
U
u
  30.5672 142.5672 m
  27.8209 141.7313 L
S
U
u
  27.8209 141.7313 m
  25.0746 140.4179 L
S
U
u
  25.0746 140.4179 m
  22.3284 138.6269 L
S
U
u
  22.3284 138.6269 m
  19.7015 136.1194 L
S
U
u
  19.7015 136.1194 m
  16.9552 133.1343 L
S
U
u
  16.9552 133.1343 m
  14.0896 129.1940 L
S
U
u
  14.0896 129.1940 m
  11.5821 124.7761 L
S
U
u
  11.5821 124.7761 m
  9.1940 119.8806 L
S
U
u
  9.1940 119.8806 m
  7.1642 114.6269 L
S
U
u
  7.1642 114.6269 m
  5.3731 109.0149 L
S
U
u
  5.3731 109.0149 m
  3.9403 103.1642 L
S
U
u
  3.9403 103.1642 m
  2.6269 97.1940 L
S
U
u
  2.6269 97.1940 m
  1.6716 90.8657 L
S
U
u
  1.6716 90.8657 m
  1.0746 84.5373 L
S
U
u
  1.0746 84.5373 m
  0.5970 78.0896 L
S
U
u
  0.5970 78.0896 m
  0.4776 71.5224 L
S
U
u
  0.4776 71.5224 m
  0.5970 65.0746 L
S
U
u
  0.5970 65.0746 m
  1.0746 58.6269 L
S
U
u
  1.0746 58.6269 m
  1.7910 52.1791 L
S
U
u
  1.7910 52.1791 m
  2.7463 45.9701 L
S
U
u
  2.7463 45.9701 m
  3.9403 39.8806 L
S
U
u
  3.9403 39.8806 m
  5.4925 34.0299 L
S
U
u
  5.4925 34.0299 m
  7.2836 28.4179 L
S
U
u
  7.2836 28.4179 m
  9.3134 23.2836 L
S
U
u
  9.3134 23.2836 m
  11.5821 18.3881 L
S
U
u
  11.5821 18.3881 m
  14.2090 13.9701 L
S
U
u
  14.2090 13.9701 m
  17.0746 10.0299 L
S
U
u
  17.0746 10.0299 m
  19.8209 7.0448 L
S
U
u
  19.8209 7.0448 m
  22.5672 4.6567 L
S
U
u
  22.5672 4.6567 m
  25.3134 2.7463 L
S
U
u
  25.3134 2.7463 m
  28.0597 1.5522 L
S
U
u
  28.0597 1.5522 m
  30.8060 0.7164 L
S
U
u
  30.8060 0.7164 m
  33.5522 0.4776 L
S
U
u
  33.5522 0.4776 m
  36.4179 0.7164 L
S
U
u
  36.4179 0.7164 m
  39.0448 1.4328 L
S
U
u
  39.0448 1.4328 m
  41.6716 2.6269 L
S
U
u
  41.6716 2.6269 m
  44.2985 4.1791 L
S
U
u
  44.2985 4.1791 m
  46.8060 6.3284 L
S
U
u
  46.8060 6.3284 m
  49.1940 8.7164 L
S
U
u
  49.1940 8.7164 m
  51.5821 11.5821 L
S
U
u
  51.5821 11.5821 m
  53.7313 14.9254 L
S
U
u
  53.7313 14.9254 m
  55.7612 18.5075 L
S
U
u
  55.7612 18.5075 m
  57.7910 22.4478 L
S
U
u
  57.7910 22.4478 m
  59.4627 26.8657 L
S
U
u
  59.4627 26.8657 m
  61.1343 31.4030 L
S
U
u
  61.1343 31.4030 m
  62.5672 36.5373 L
S
U
u
  62.5672 36.5373 m
  63.8806 41.7910 L
S
U
u
  63.8806 41.7910 m
  64.8358 47.2836 L
S
U
u
  64.8358 47.2836 m
  65.6716 53.0149 L
S
U
u
  65.6716 53.0149 m
  66.3881 59.1045 L
S
U
u
  66.3881 59.1045 m
  66.7463 65.3134 L
S
U
u
  66.7463 65.3134 m
  66.8657 71.7612 L
S
U
u
  0.000 0.000 0.000 1.000 K
  199.5224 74.0299 m
  199.4030 80.4776 L
S
U
u
  199.4030 80.4776 m
  198.9254 86.6866 L
S
U
u
  198.9254 86.6866 m
  198.3284 92.7761 L
S
U
u
  198.3284 92.7761 m
  197.4925 98.5075 L
S
U
u
  197.4925 98.5075 m
  196.4179 104.0000 L
S
U
u
  196.4179 104.0000 m
  195.1045 109.2537 L
S
U
u
  195.1045 109.2537 m
  193.6716 114.2687 L
S
U
u
  193.6716 114.2687 m
  192.0000 118.8060 L
S
U
u
  192.0000 118.8060 m
  190.2090 123.1045 L
S
U
u
  190.2090 123.1045 m
  188.2985 127.0448 L
S
U
u
  188.2985 127.0448 m
  186.1493 130.7463 L
S
U
u
  186.1493 130.7463 m
  184.0000 133.9701 L
S
U
u
  184.0000 133.9701 m
  181.4925 136.8358 L
S
U
u
  181.4925 136.8358 m
  179.1045 139.2239 L
S
U
u
  179.1045 139.2239 m
  176.5970 141.2537 L
S
U
u
  176.5970 141.2537 m
  174.0896 142.9254 L
S
U
u
  174.0896 142.9254 m
  171.4627 144.0000 L
S
U
u
  171.4627 144.0000 m
  168.7164 144.7164 L
S
U
u
  168.7164 144.7164 m
  165.9701 144.9552 L
S
U
u
  165.9701 144.9552 m
  163.2239 144.5970 L
S
U
u
  163.2239 144.5970 m
  160.4776 143.8806 L
S
U
u
  160.4776 143.8806 m
  157.7313 142.5672 L
S
U
u
  157.7313 142.5672 m
  154.9851 140.6567 L
S
U
u
  154.9851 140.6567 m
  152.3582 138.2687 L
S
U
u
  152.3582 138.2687 m
  149.7313 135.2836 L
S
U
u
  149.7313 135.2836 m
  146.8657 131.3433 L
S
U
u
  146.8657 131.3433 m
  144.2388 126.9254 L
S
U
u
  144.2388 126.9254 m
  141.8507 122.0299 L
S
U
u
  141.8507 122.0299 m
  139.8209 116.8955 L
S
U
u
  139.8209 116.8955 m
  138.0299 111.2836 L
S
U
u
  138.0299 111.2836 m
  136.5970 105.4328 L
S
U
u
  136.5970 105.4328 m
  135.4030 99.3433 L
S
U
u
  135.4030 99.3433 m
  134.4478 93.1343 L
S
U
u
  134.4478 93.1343 m
  133.7313 86.8060 L
S
U
u
  133.7313 86.8060 m
  133.2537 80.3582 L
S
U
u
  133.2537 80.3582 m
  133.1343 73.7910 L
S
U
u
  133.1343 73.7910 m
  133.3731 67.3433 L
S
U
u
  133.3731 67.3433 m
  133.7313 60.8955 L
S
U
u
  133.7313 60.8955 m
  134.4478 54.5672 L
S
U
u
  134.4478 54.5672 m
  135.4030 48.3582 L
S
U
u
  135.4030 48.3582 m
  136.5970 42.2687 L
S
U
u
  136.5970 42.2687 m
  138.1493 36.5373 L
S
U
u
  138.1493 36.5373 m
  139.9403 30.9254 L
S
U
u
  139.9403 30.9254 m
  141.9701 25.6716 L
S
U
u
  141.9701 25.6716 m
  144.3582 20.7761 L
S
U
u
  144.3582 20.7761 m
  146.8657 16.3582 L
S
U
u
  146.8657 16.3582 m
  149.7313 12.4179 L
S
U
u
  149.7313 12.4179 m
  152.4776 9.5522 L
S
U
u
  152.4776 9.5522 m
  155.2239 7.0448 L
S
U
u
  155.2239 7.0448 m
  157.9701 5.2537 L
S
U
u
  157.9701 5.2537 m
  160.7164 3.9403 L
S
U
u
  160.7164 3.9403 m
  163.4627 3.2239 L
S
U
u
  163.4627 3.2239 m
  166.2090 2.9851 L
S
U
u
  166.2090 2.9851 m
  168.9552 3.2239 L
S
U
u
  168.9552 3.2239 m
  171.7015 3.9403 L
S
U
u
  171.7015 3.9403 m
  174.3284 5.0149 L
S
U
u
  174.3284 5.0149 m
  176.8358 6.6866 L
S
U
u
  176.8358 6.6866 m
  179.3433 8.7164 L
S
U
u
  179.3433 8.7164 m
  181.8507 11.2239 L
S
U
u
  181.8507 11.2239 m
  184.2388 14.0896 L
S
U
u
  184.2388 14.0896 m
  186.3881 17.3134 L
S
U
u
  186.3881 17.3134 m
  188.5373 20.8955 L
S
U
u
  188.5373 20.8955 m
  190.4478 24.9552 L
S
U
u
  190.4478 24.9552 m
  192.2388 29.2537 L
S
U
u
  192.2388 29.2537 m
  193.7910 33.9104 L
S
U
u
  193.7910 33.9104 m
  195.2239 38.9254 L
S
U
u
  195.2239 38.9254 m
  196.5373 44.1791 L
S
U
u
  196.5373 44.1791 m
  197.6119 49.6716 L
S
U
u
  197.6119 49.6716 m
  198.4478 55.4030 L
S
U
u
  198.4478 55.4030 m
  199.0448 61.3731 L
S
U
u
  199.0448 61.3731 m
  199.4030 67.5821 L
S
U
u
  199.4030 67.5821 m
  199.5224 74.0299 L
S
U
u
2.2500 w
  0.000 0.000 0.000 1.000 K
  47.0448 101.3731 m
  152.9552 101.3731 L
S
U
u
  0.000 0.000 0.000 1.000 K
  48.0000 44.7761 m
  152.2388 44.7761 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 97.3134 109.6119 0 Tp
TP
93.770997 Tz
/_Helvetica 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 104.0000 105.5522 0 Tp
TP
96.933362 Tz
/_Helvetica 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 97.3134 52.0597 0 Tp
TP
93.770997 Tz
/_Helvetica 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 104.0000 48.1194 0 Tp
TP
96.933362 Tz
/_Helvetica 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.0003 -1.0000 1.0000 0.0003 22.5691 84.6567 0 Tp
TP
/_Helvetica 30.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.0003 -1.0000 1.0000 0.0003 184.9572 84.6567 0 Tp
TP
/_Helvetica 30.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
  25.6716 100.7761 m
  25.9104 103.0448 L
  26.5075 105.1940 L
  27.7015 107.1045 L
  29.1343 108.7761 L
  30.9254 110.2090 L
  33.0746 111.1642 L
  35.2239 111.5224 L
  37.6119 111.5224 L
  39.7612 111.1642 L
  41.7910 110.2090 L
  43.5821 108.7761 L
  45.1343 107.1045 L
  46.2090 105.1940 L
  46.9254 103.0448 L
  47.1642 100.7761 L
  46.9254 98.6269 L
  46.2090 96.4776 L
  45.1343 94.5672 L
  43.5821 92.8955 L
  41.7910 91.5821 L
  39.7612 90.6269 L
  37.6119 90.1493 L
  35.2239 90.1493 L
  33.0746 90.6269 L
  30.9254 91.5821 L
  29.1343 92.8955 L
  27.7015 94.5672 L
  26.5075 96.4776 L
  25.9104 98.6269 L
  25.6716 100.7761 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 33.6716 97.1940 0 Tp
TP
85.246361 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
  253.3731 66.8657 m
  253.6119 69.9701 L
  254.2090 73.0746 L
  255.5224 76.1791 L
  257.0746 79.1642 L
  259.1045 82.1493 L
  261.4925 85.0149 L
  264.3582 87.7612 L
  267.7015 90.5075 L
  271.2836 93.0149 L
  275.2239 95.4030 L
  279.6418 97.6716 L
  284.2985 99.7015 L
  289.1940 101.6119 L
  294.4478 103.4030 L
  299.8209 104.9552 L
  305.5522 106.2687 L
  311.4030 107.3433 L
  317.3731 108.2985 L
  323.4627 108.8955 L
  329.6716 109.4925 L
  336.0000 109.7313 L
  342.2090 109.7313 L
  348.4179 109.4925 L
  354.6269 108.8955 L
  360.7164 108.2985 L
  366.6866 107.3433 L
  372.5373 106.2687 L
  378.1493 104.9552 L
  383.6418 103.4030 L
  388.8955 101.6119 L
  393.7910 99.7015 L
  398.4478 97.6716 L
  402.8657 95.4030 L
  406.9254 93.0149 L
  410.5075 90.5075 L
  413.7313 87.7612 L
  416.5970 85.0149 L
  419.1045 82.1493 L
  421.1343 79.1642 L
  422.6866 76.1791 L
  423.7612 73.0746 L
  424.4776 69.9701 L
  424.7164 66.8657 L
  424.4776 63.7612 L
  423.7612 60.6567 L
  422.6866 57.5522 L
  421.1343 54.5672 L
  419.1045 51.5821 L
  416.5970 48.7164 L
  413.7313 45.9701 L
  410.5075 43.3433 L
  406.9254 40.7164 L
  402.8657 38.3284 L
  398.4478 35.9403 L
  393.7910 33.9104 L
  388.8955 32.0000 L
  383.6418 30.2090 L
  378.1493 28.7761 L
  372.5373 27.4627 L
  366.6866 26.2687 L
  360.7164 25.4328 L
  354.6269 24.7164 L
  348.4179 24.2388 L
  342.2090 24.0000 L
  336.0000 24.0000 L
  329.6716 24.2388 L
  323.4627 24.7164 L
  317.3731 25.4328 L
  311.4030 26.2687 L
  305.5522 27.4627 L
  299.8209 28.7761 L
  294.4478 30.2090 L
  289.1940 32.0000 L
  284.2985 33.9104 L
  279.6418 35.9403 L
  275.2239 38.3284 L
  271.2836 40.7164 L
  267.7015 43.3433 L
  264.3582 45.9701 L
  261.4925 48.7164 L
  259.1045 51.5821 L
  257.0746 54.5672 L
  255.5224 57.5522 L
  254.2090 60.6567 L
  253.6119 63.7612 L
  253.3731 66.8657 L
B
U
u
  0.000 0.000 0.000 0.000 k
  328.3582 110.2090 m
  328.5970 112.4776 L
  329.3134 114.6269 L
  330.3881 116.5373 L
  331.9403 118.2090 L
  333.7313 119.5224 L
  335.7612 120.3582 L
  337.9104 120.8358 L
  340.1791 120.8358 L
  342.3284 120.3582 L
  344.4776 119.5224 L
  346.2687 118.2090 L
  347.7015 116.5373 L
  348.8955 114.6269 L
  349.4925 112.4776 L
  349.7313 110.2090 L
  349.4925 107.9403 L
  348.8955 105.7910 L
  347.7015 103.8806 L
  346.2687 102.2090 L
  344.4776 100.8955 L
  342.3284 99.9403 L
  340.1791 99.4627 L
  337.9104 99.4627 L
  335.7612 99.9403 L
  333.7313 100.8955 L
  331.9403 102.2090 L
  330.3881 103.8806 L
  329.3134 105.7910 L
  328.5970 107.9403 L
  328.3582 110.2090 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 336.4776 106.5075 0 Tp
TP
85.246361 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
  328.3582 24.4776 m
  328.5970 26.7463 L
  329.3134 28.8955 L
  330.3881 30.8060 L
  331.9403 32.4776 L
  333.7313 33.7910 L
  335.7612 34.6269 L
  337.9104 35.1045 L
  340.1791 35.1045 L
  342.3284 34.6269 L
  344.4776 33.7910 L
  346.2687 32.4776 L
  347.7015 30.8060 L
  348.8955 28.8955 L
  349.4925 26.7463 L
  349.7313 24.4776 L
  349.4925 22.3284 L
  348.8955 20.1791 L
  347.7015 18.2687 L
  346.2687 16.5970 L
  344.4776 15.2836 L
  342.3284 14.3284 L
  340.1791 13.8507 L
  337.9104 13.8507 L
  335.7612 14.3284 L
  333.7313 15.2836 L
  331.9403 16.5970 L
  330.3881 18.2687 L
  329.3134 20.1791 L
  328.5970 22.3284 L
  328.3582 24.4776 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 336.1194 20.8955 0 Tp
TP
85.246361 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(b\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
  242.6269 68.2985 m
  242.8657 70.5672 L
  243.5821 72.7164 L
  244.6567 74.6269 L
  246.2090 76.2985 L
  248.0000 77.6119 L
  250.0299 78.4478 L
  252.1791 78.9254 L
  254.5672 78.9254 L
  256.7164 78.4478 L
  258.7463 77.6119 L
  260.6567 76.2985 L
  262.0896 74.6269 L
  263.1642 72.7164 L
  263.8806 70.5672 L
  264.1194 68.2985 L
  263.8806 66.1493 L
  263.1642 64.0000 L
  262.0896 62.0896 L
  260.6567 60.4179 L
  258.7463 59.1045 L
  256.7164 58.1493 L
  254.5672 57.6716 L
  252.1791 57.6716 L
  250.0299 58.1493 L
  248.0000 59.1045 L
  246.2090 60.4179 L
  244.6567 62.0896 L
  243.5821 64.0000 L
  242.8657 66.1493 L
  242.6269 68.2985 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 250.3881 64.7164 0 Tp
TP
85.246361 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(d\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
  413.9701 68.2985 m
  414.2090 70.5672 L
  414.9254 72.7164 L
  416.1194 74.6269 L
  417.5522 76.2985 L
  419.3433 77.6119 L
  421.3731 78.4478 L
  423.6418 78.9254 L
  425.7910 78.9254 L
  428.0597 78.4478 L
  430.0896 77.6119 L
  431.8806 76.2985 L
  433.3134 74.6269 L
  434.5075 72.7164 L
  435.2239 70.5672 L
  435.3433 68.2985 L
  435.2239 66.1493 L
  434.5075 64.0000 L
  433.3134 62.0896 L
  431.8806 60.4179 L
  430.0896 59.1045 L
  428.0597 58.1493 L
  425.7910 57.6716 L
  423.6418 57.6716 L
  421.3731 58.1493 L
  419.3433 59.1045 L
  417.5522 60.4179 L
  416.1194 62.0896 L
  414.9254 64.0000 L
  414.2090 66.1493 L
  413.9701 68.2985 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 422.0896 64.7164 0 Tp
TP
85.246361 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(c\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  379.5821 23.0448 m
  409.1940 33.7910 L
  401.7910 54.3284 L
  372.1791 43.5821 L
  379.5821 23.0448 L
F
U
0 To
0.9398 0.3418 -0.3418 0.9398 382.2445 28.4179 0 Tp
TP
/_Helvetica 23.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  277.0149 54.3284 m
  306.5075 43.5821 L
  299.1045 23.0448 L
  269.6119 33.7910 L
  277.0149 54.3284 L
F
U
0 To
0.9398 -0.3418 0.3418 0.9398 277.5887 35.3433 0 Tp
TP
/_Helvetica 23.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  405.7313 90.1493 m
  376.1194 100.8955 L
  383.5224 121.4328 L
  413.1343 110.6866 L
  405.7313 90.1493 L
F
U
0 To
0.9398 -0.3418 0.3418 0.9398 384.0961 102.4478 0 Tp
TP
/_Helvetica 23.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
2.2500 w
  0.000 0.000 0.000 1.000 K
1 j
  348.7761 114.7463 m
  353.9104 116.4179 L
  359.0448 117.7313 L
  364.2985 118.6866 L
  369.5522 119.1642 L
  374.8060 119.4030 L
  380.0597 119.1642 L
  385.3134 118.6866 L
  390.5672 117.9701 L
  395.7015 116.8955 L
  400.8358 115.7015 L
  405.8507 114.1493 L
  410.6269 112.4776 L
  415.2836 110.5672 L
  415.8806 110.3284 L
  416.5970 109.9701 L
  417.3134 109.7313 L
  418.0299 109.3731 L
  418.7463 108.8955 L
  419.4627 108.5373 L
  420.1791 108.1791 L
  421.0149 107.7015 L
  421.8507 107.2239 L
  422.6866 106.7463 L
  423.5224 106.2687 L
  424.0000 106.0299 L
  424.3582 105.7910 L
  424.8358 105.4328 L
  425.3134 105.1940 L
  425.7910 104.8358 L
  426.2687 104.5970 L
  426.7463 104.2388 L
  427.2239 103.8806 L
  427.8209 103.6418 L
  428.2985 103.2836 L
  428.7761 102.9254 L
  429.2537 102.5672 L
  429.7313 102.3284 L
  430.2090 101.9701 L
  430.6866 101.6119 L
  433.3134 99.5821 L
  435.8209 97.4328 L
  438.0896 95.4030 L
  440.1194 93.2537 L
  441.9104 91.1045 L
  443.4627 88.8358 L
  444.7761 86.6866 L
  445.9701 84.4179 L
  446.9254 82.1493 L
  447.7612 79.8806 L
  448.3582 77.6119 L
  448.7164 75.2239 L
  448.9552 72.9552 L
  448.9552 70.5672 L
  448.8358 68.1791 L
  448.4776 65.7910 L
  448.0000 63.4030 L
  447.6418 61.9701 L
  447.2836 60.5373 L
  446.8060 59.2239 L
  446.3284 57.7910 L
  445.7313 56.3582 L
  445.1343 54.9254 L
  444.4179 53.6119 L
  443.7015 52.1791 L
  442.8657 50.7463 L
  442.0299 49.4328 L
  441.1940 48.1194 L
  440.2388 46.8060 L
  439.1642 45.4925 L
  438.2090 44.1791 L
  437.0149 42.8657 L
  435.9403 41.6716 L
  434.6269 40.4776 L
  433.4328 39.2836 L
  432.7164 38.6866 L
  432.1194 38.2090 L
  431.4030 37.6119 L
  430.6866 37.0149 L
  429.9701 36.5373 L
  429.2537 35.8209 L
  428.5373 35.3433 L
  427.8209 34.8657 L
  427.1045 34.2687 L
  426.3881 33.7910 L
  425.5522 33.3134 L
  424.8358 32.8358 L
  424.1194 32.3582 L
  423.4030 31.8806 L
  422.5672 31.4030 L
  421.8507 31.0448 L
  421.1343 30.5672 L
  420.2985 30.0896 L
  419.5821 29.7313 L
  418.8657 29.2537 L
  414.6866 27.1045 L
  410.6269 25.3134 L
  406.6866 23.6418 L
  402.8657 22.2090 L
  399.0448 21.0149 L
  395.3433 20.0597 L
  391.7612 19.3433 L
  388.2985 18.6269 L
  384.8358 18.2687 L
  381.4925 17.9104 L
  378.1493 17.7910 L
  374.8060 17.6716 L
  371.4627 17.7910 L
  368.2388 17.9104 L
  365.0149 18.1493 L
  361.7910 18.3881 L
  358.5672 18.7463 L
  355.2239 19.1045 L
  352.0000 19.4627 L
  348.7761 19.8209 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  275.9403 90.1493 m
  305.4328 100.8955 L
  298.0299 121.4328 L
  268.5373 110.6866 L
  275.9403 90.1493 L
F
U
0 To
0.9398 0.3418 -0.3418 0.9398 278.6027 95.5224 0 Tp
TP
/_Helvetica 23.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
2.2500 w
  0.000 0.000 0.000 1.000 K
1 j
  253.3731 79.0448 m
  254.9254 82.5075 L
  256.4776 85.8507 L
  258.0299 89.0746 L
  259.8209 92.1791 L
  261.6119 95.0448 L
  263.4030 97.9104 L
  265.4328 100.5373 L
  267.3433 103.1642 L
  269.4925 105.5522 L
  271.6418 107.9403 L
  273.7910 110.2090 L
  276.0597 112.3582 L
  278.3284 114.3881 L
  280.7164 116.1791 L
  282.9851 117.9701 L
  285.4925 119.6418 L
  287.8806 121.1940 L
  290.3881 122.7463 L
  292.8955 124.0597 L
  295.4030 125.3731 L
  297.9104 126.5672 L
  300.5373 127.6418 L
  303.0448 128.5970 L
  305.6716 129.5522 L
  308.1791 130.3881 L
  311.5224 131.4627 L
  314.8657 132.2985 L
  318.2090 133.0149 L
  321.4328 133.6119 L
  324.7761 134.0896 L
  328.1194 134.4478 L
  331.3433 134.8060 L
  334.5672 134.9254 L
  337.7910 135.0448 L
  341.0149 135.0448 L
  344.1194 134.9254 L
  347.2239 134.6866 L
  350.2090 134.4478 L
  353.3134 134.0896 L
  356.1791 133.6119 L
  359.1642 133.1343 L
  362.0299 132.5373 L
  364.7761 131.9403 L
  367.5224 131.2239 L
  370.2687 130.5075 L
  372.8955 129.7910 L
  375.4030 128.9552 L
  377.9104 128.0000 L
  380.2985 127.1642 L
  382.6866 126.2090 L
  384.9552 125.1343 L
  387.7015 123.9403 L
  390.2090 122.6269 L
  392.7164 121.3134 L
  395.1045 119.8806 L
  397.3731 118.4478 L
  399.5224 117.0149 L
  401.6716 115.5821 L
  403.5821 114.0299 L
  405.3731 112.4776 L
  407.0448 110.8060 L
  408.7164 109.0149 L
  410.2687 107.3433 L
  411.7015 105.5522 L
  413.1343 103.7612 L
  414.4478 101.9701 L
  415.6418 100.0597 L
  416.8358 98.1493 L
  417.9104 96.2388 L
  418.9851 94.2090 L
  419.9403 92.1791 L
  420.8955 90.1493 L
  421.7313 88.0000 L
  422.5672 85.8507 L
  423.2836 83.5821 L
  424.0000 81.3134 L
  424.7164 79.0448 L
S
U
u
0.2500 w
  0.000 0.000 0.000 1.000 K
  152.9552 100.7761 m
  153.1940 103.0448 L
  153.9104 105.1940 L
  154.9851 107.1045 L
  156.5373 108.7761 L
  158.3284 110.2090 L
  160.3582 111.1642 L
  162.5075 111.5224 L
  164.7761 111.5224 L
  166.9254 111.1642 L
  168.9552 110.2090 L
  170.8657 108.7761 L
  172.2985 107.1045 L
  173.3731 105.1940 L
  174.0896 103.0448 L
  174.3284 100.7761 L
  174.0896 98.6269 L
  173.3731 96.4776 L
  172.2985 94.5672 L
  170.8657 92.8955 L
  168.9552 91.5821 L
  166.9254 90.6269 L
  164.7761 90.1493 L
  162.5075 90.1493 L
  160.3582 90.6269 L
  158.3284 91.5821 L
  156.5373 92.8955 L
  154.9851 94.5672 L
  153.9104 96.4776 L
  153.1940 98.6269 L
  152.9552 100.7761 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 160.7164 97.1940 0 Tp
TP
85.246361 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(b\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
  152.9552 45.3731 m
  153.1940 47.6418 L
  153.9104 49.6716 L
  154.9851 51.7015 L
  156.5373 53.2537 L
  158.3284 54.5672 L
  160.3582 55.5224 L
  162.5075 56.0000 L
  164.7761 56.0000 L
  166.9254 55.5224 L
  168.9552 54.5672 L
  170.8657 53.2537 L
  172.2985 51.7015 L
  173.3731 49.6716 L
  174.0896 47.6418 L
  174.3284 45.3731 L
  174.0896 43.1045 L
  173.3731 40.9552 L
  172.2985 39.0448 L
  170.8657 37.3731 L
  168.9552 35.9403 L
  166.9254 35.1045 L
  164.7761 34.6269 L
  162.5075 34.6269 L
  160.3582 35.1045 L
  158.3284 35.9403 L
  156.5373 37.3731 L
  154.9851 39.0448 L
  153.9104 40.9552 L
  153.1940 43.1045 L
  152.9552 45.3731 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 160.7164 41.7910 0 Tp
TP
85.246361 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(d\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.2500 w
  0.000 0.000 0.000 1.000 K
1 j
  25.6716 45.3731 m
  25.9104 47.6418 L
  26.5075 49.6716 L
  27.7015 51.7015 L
  29.1343 53.2537 L
  30.9254 54.5672 L
  33.0746 55.5224 L
  35.2239 56.0000 L
  37.6119 56.0000 L
  39.7612 55.5224 L
  41.7910 54.5672 L
  43.5821 53.2537 L
  45.1343 51.7015 L
  46.2090 49.6716 L
  46.9254 47.6418 L
  47.1642 45.3731 L
  46.9254 43.1045 L
  46.2090 40.9552 L
  45.1343 39.0448 L
  43.5821 37.3731 L
  41.7910 35.9403 L
  39.7612 35.1045 L
  37.6119 34.6269 L
  35.2239 34.6269 L
  33.0746 35.1045 L
  30.9254 35.9403 L
  29.1343 37.3731 L
  27.7015 39.0448 L
  26.5075 40.9552 L
  25.9104 43.1045 L
  25.6716 45.3731 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 33.6716 41.7910 0 Tp
TP
85.246361 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(c\r) Tx
TO
  0.000 0.000 0.000 1.000 K
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1099 960 a Fj(\(a\))1144 b(\(b\))166 1260
y Fl(Fig.)34 b(2.)g(\(a\))g(A)g(logical)f(top)s(ology)g(with)f(an)i
(edge-cut)g(of)g(size)f(2,)h(and)f(\(b\))g(a)h(non-surviv)-5
b(able)166 1373 y(em)m(b)s(edding)29 b(of)h(the)h(cut-edge.)166
1880 y Fj(fails.)45 b(The)j(ab)s(o)m(v)m(e)g(t)m(w)m(o)g(examples)f
(lead)f(us)h(to)g(the)g(form)m(ulation)d(of)j(the)g(follo)m(wing)166
2001 y(optimization)29 b(problem.)165 2306 y Fe(\017)49
b Fg(Survivable)g(L)-5 b(o)g(gic)g(al)49 b(T)-7 b(op)i(olo)g(gy)49
b(Design)f(Pr)-5 b(oblem)50 b(\(SL)-7 b(TDP\):)47 b Fj(Giv)m(en)i(a)g
(ph)m(ysical)264 2426 y(WDM)37 b(ring)g(net)m(w)m(ork)i(with)e
Ff(n)h Fj(no)s(des)h(\(where)f(the)g(no)s(de)g(set)h(is)e(denoted)h(b)m
(y)h Ff(V)58 b Fj(=)264 2547 y Fe(f)p Fj(0)p Ff(;)17
b Fe(\001)g(\001)g(\001)d Ff(;)j(n)5 b Fe(\000)g Fj(1)p
Fe(g)p Fj(\))24 b(and)g(a)g(set)h(of)f(connection)g(requests)i
Ff(R)j Fj(=)f Fe(f)p Fj(\()p Ff(i;)17 b(j)6 b Fj(\))23
b Fe(j)h Ff(i;)17 b(j)34 b Fe(2)28 b Ff(V)22 b Fe(g)h
Fj(\(where)264 2667 y(for)37 b(an)m(y)h(t)m(w)m(o)h(connections)f(\()p
Ff(i;)17 b(j)6 b Fj(\))p Ff(;)17 b Fj(\()p Ff(i)1642
2631 y Fd(0)1665 2667 y Ff(;)g(j)1755 2631 y Fd(0)1778
2667 y Fj(\))36 b Fe(2)h Ff(R)q Fj(,)h(\()p Ff(i;)17
b(j)6 b Fj(\))36 b Fe(6)p Fj(=)h(\()p Ff(i)2514 2631
y Fd(0)2537 2667 y Ff(;)17 b(j)2627 2631 y Fd(0)2650
2667 y Fj(\)\),)38 b(\014nd)g(a)f(route)h(for)264 2787
y(eac)m(h)33 b(ligh)m(tpath)f(\()p Ff(i;)17 b(j)6 b Fj(\))28
b Fe(2)h Ff(R)34 b Fj(suc)m(h)g(that)f(the)h(logical)29
b(top)s(ology)j(remains)g(connected,)264 2908 y(if)41
b(p)s(ossible,)h(after)g(the)h(failure)e(of)h(an)m(y)h(single)e(ph)m
(ysical)i(link.)e(Otherwise,)i(deter-)264 3028 y(mine)27
b(and)h(em)m(b)s(ed)h(the)g(minim)m(um)c(n)m(um)m(b)s(er)k(of)f
(additional)d(ligh)m(tpaths)j(to)g(mak)m(e)g(the)264
3149 y(logical)h(top)s(ology)i(surviv)-5 b(able.)166
3454 y(Note)47 b(that)g(when)i(the)e(giv)m(en)g(logical)d(top)s(ology)i
(is)h(not)g(connected)i(or)d(has)i(a)f(cut-)166 3574
y(edge,)32 b(there)h(is)e(no)g(route)h(assignmen)m(t)f(that)h(can)f
(mak)m(e)h(the)g(logical)d(top)s(ology)h(surviv-)166
3694 y(able)36 b(without)f(ha)m(ving)h(additional)d(ligh)m(tpaths.)j
(Some)f(logical)e(top)s(ologies)h(that)i(ha)m(v)m(e)166
3815 y(edge-cuts)g(of)e(size)h(t)m(w)m(o,)h(ho)m(w)m(ev)m(er,)h(ha)m(v)
m(e)g(route)e(assignmen)m(ts)g(that)f(mak)m(e)h(the)h(logical)166
3935 y(top)s(ology)g(surviv)-5 b(able,)37 b(while)g(some)g(do)h(not)f
(as)h(sho)m(wn)h(in)e(Figure)f(2.)h(In)h(this)f(pap)s(er,)166
4056 y(w)m(e)g(c)m(ho)s(ose)g(to)f(c)m(haracterize)h(the)f(surviv)-5
b(abilit)m(y)34 b(of)i(a)g(logical)d(top)s(ology)h(based)j(on)f(its)166
4176 y(edge-connectivit)m(y)-8 b(.)38 b(W)-8 b(e)38 b(\014rst)h(observ)
m(e)g(that)e(if)g(the)h(logical)d(top)s(ology)h(is)h(completely)166
4296 y(connected,)g(then)g(it)d(can)i(alw)m(a)m(ys)g(b)s(e)g(made)f
(surviv)-5 b(able)35 b(b)m(y)i(establishing)d(the)i(single-)166
4417 y(hop)k(ligh)m(tpaths)g Fe(f)p Fj(\()p Ff(i;)17
b Fj(\()p Ff(i)27 b Fj(+)g(1\)\045)p Ff(n)p Fj(\))41
b Fe(j)g Fj(0)g Fe(\024)g Ff(i)g Fe(\024)g Ff(n)28 b
Fe(\000)g Fj(1)p Fe(g)p Fj(.)40 b(The)h(rest)g(of)f(the)h(ligh)m
(tpaths)166 4537 y(ma)m(y)29 b(b)s(e)g(em)m(b)s(edded)h(in)e(an)m(y)h
(arbitrary)f(manner.)h(An)g(in)m(teresting)g(question)g(then)h(is)e(to)
166 4658 y(determine)e(in)f(p)s(olynomial)d(time)j(whether)i(there)g
(exists)g(an)f(em)m(b)s(edding)f(of)h(ligh)m(tpaths)166
4778 y(when)31 b(the)g(giv)m(en)f(logical)d(top)s(ology)i(is)g
Ff(k)s Fj(-edge)i(connected)g(for)f(an)g(arbitrary)f
Ff(k)s Fj(.)h(In)h(our)166 4898 y(earlier)e(pap)s(er)h([4],)g(w)m(e)h
(sho)m(w)m(ed)h(that)d(if)g(the)h(logical)d(top)s(ology)i
Ff(G)h Fj(is)f(3-edge)h(connected)166 5019 y(or)j(4-edge)f(connected,)j
(there)f(exist)f(examples)g(of)f Ff(G)h Fj(that)f(for)h(whic)m(h)g
(surviv)-5 b(able)33 b(em-)166 5139 y(b)s(eddings)43
b(do)g(not)f(exist.)h(Those)h(examples)f(are)g(repro)s(duced)h(in)e
(the)h(next)g(section,)166 5259 y(where)e(w)m(e)g(also)e(consider)h(a)f
(sp)s(ecial)g(routing,)g(namely)g(the)h(shortest)h(path)f(routing,)166
5380 y(and)33 b(presen)m(t)h(some)e(results)h(on)g(the)g(problem)e
(complexit)m(y)-8 b(.)1769 5712 y(4)p eop
%%Page: 5 5
5 4 bop 166 83 a Fk(3)112 b(Problem)36 b(Complexit)m(y)166
473 y Fj(In)g(this)f(section,)h(w)m(e)h(\014rst)f(address)h(the)f
(question:)h(giv)m(en)e(an)h(arbitrary)f(in)m(teger)g
Ff(k)s Fj(,)h(is)166 594 y(there)27 b(an)m(y)h Ff(k)s
Fj(-edge)f(connected)h(logical)c(top)s(ology)h(for)h(whic)m(h)h(no)g
(ligh)m(tpath)e(em)m(b)s(edding)166 714 y(can)33 b(mak)m(e)f(the)h
(logical)c(top)s(ology)i(surviv)-5 b(able?)31 b(W)-8
b(e)33 b(then)g(consider)g(a)f(sp)s(ecial)f(routing)166
834 y(algorithm,)23 b(namely)j(shortest)h(path)g(routing)e(and)h(sho)m
(w)i(that)e(if)f(the)i(minim)m(um)c(degree)166 955 y(of)g(the)i
(logical)20 b(top)s(ology)i(is)i(at)f(least)h Fe(d)p
Fj(2)p Ff(n=)p Fj(3)p Fe(e)f Fj(\(i.e.,)h(eac)m(h)h(no)s(de)e(is)h
(connected)h(to)f(at)f(least)166 1075 y Fe(d)p Fj(2)p
Ff(n=)p Fj(3)p Fe(e)28 b Fj(other)g(no)s(des\),)h(shortest)g(path)g
(routing)e(of)g(the)i(ligh)m(tpaths)e(alw)m(a)m(ys)h(mak)m(es)h(the)166
1195 y(logical)h(top)s(ology)h(surviv)-5 b(able.)166
1802 y Fg(3.1)99 b Ff(k)s Fg(-Edge)35 b(Conne)-5 b(cte)g(d)33
b(L)-5 b(o)g(gic)g(al)34 b(T)-7 b(op)i(olo)g(gies)166
2192 y Fj(As)38 b(discussed)g(earlier,)e(no)h(ligh)m(tpath)e(em)m(b)s
(edding)i(can)g(ac)m(hiev)m(e)h(surviv)-5 b(abilit)m(y)35
b(if)h(the)166 2312 y(logical)19 b(top)s(ology)h(is)h(1-edge)h
(connected,)h(and)f(some)g(2-edge-connected)h(logical)18
b(top)s(olo-)166 2433 y(gies)27 b(cannot)h(ac)m(hiev)m(e)h(surviv)-5
b(abilit)m(y)d(.)25 b(In)j(the)g(follo)m(wing,)d(w)m(e)k(sho)m(w)f
(examples)g(of)f(3-edge)166 2553 y(and)33 b(4-edge)f(connected)i
(logical)c(top)s(ologies)g(that)j(cannot)g(ac)m(hiev)m(e)g(surviv)-5
b(abilit)m(y)d(.)166 2823 y(Figure)35 b(3)h(sho)m(ws)h(a)f(4-edge)g
(connected)i(logical)33 b(top)s(ology)h(and)j(a)e(ring)g(net)m(w)m(ork)
j(with)166 2943 y(the)33 b(corresp)s(onding)f(no)s(des.)h(First)e(note)
i(that)f(the)g(ligh)m(tpaths)f(corresp)s(onding)i(to)f(log-)166
3064 y(ical)d(edges)k(\()p Ff(a)692 3079 y Fp(1)731 3064
y Ff(;)17 b(a)826 3079 y Fp(2)866 3064 y Fj(\))31 b(and)g(\()p
Ff(a)1212 3079 y Fp(3)1252 3064 y Ff(;)17 b(a)1347 3079
y Fp(4)1386 3064 y Fj(\))31 b(m)m(ust)g(share)h(at)f(least)g(one)g(ph)m
(ysical)g(link)f(regardless)166 3184 y(of)g(their)f(route)i(assignmen)m
(ts.)f(The)h(ring)f(net)m(w)m(ork)h(in)f(Figure)f(3)h(sho)m(ws)i(the)e
(case)i(when)166 3304 y(ligh)m(tpaths)26 b(are)i(established)g(from)e
Ff(a)1548 3319 y Fp(1)1615 3304 y Fj(to)h Ff(a)1780 3319
y Fp(2)1847 3304 y Fj(and)h(from)e Ff(a)2308 3319 y Fp(3)2375
3304 y Fj(to)h Ff(a)2540 3319 y Fp(4)2607 3304 y Fj(b)s(oth)h(in)e(the)
i(coun)m(ter-)166 3425 y(clo)s(c)m(kwise)42 b(direction,)f(and)h(they)h
(share)f(ph)m(ysical)g(links)f(b)s(et)m(w)m(een)j Ff(a)2797
3440 y Fp(1)2879 3425 y Fj(and)d Ff(a)3128 3440 y Fp(4)3168
3425 y Fj(.)h(No)m(w,)166 3545 y(consider)37 b(the)g(ligh)m(tpath)e
(assignmen)m(ts)i(for)f(logical)d(links)j(\()p Ff(e)2469
3560 y Fp(1)2508 3545 y Ff(;)17 b(e)2597 3560 y Fp(2)2637
3545 y Fj(\))36 b(and)h(\()p Ff(e)2988 3560 y Fp(3)3027
3545 y Ff(;)17 b(e)3116 3560 y Fp(4)3156 3545 y Fj(\).)36
b(F)-8 b(our)166 3666 y(p)s(ossible)33 b(assignmen)m(ts)g(are)h(sho)m
(wn)g(in)f(Figure)f(4,)h(in)g(whic)m(h)h(an)m(y)g(t)m(w)m(o)g(ligh)m
(tpaths)e(cor-)166 3786 y(resp)s(onding)44 b(to)g(\()p
Ff(e)888 3801 y Fp(1)927 3786 y Ff(;)17 b(e)1016 3801
y Fp(2)1056 3786 y Fj(\))44 b(and)g(\()p Ff(e)1422 3801
y Fp(3)1462 3786 y Ff(;)17 b(e)1551 3801 y Fp(4)1590
3786 y Fj(\))44 b(share)h(at)f(least)f(one)i(ph)m(ysical)f(link,)f(and)
h(the)166 3906 y(shared)29 b(ph)m(ysical)f(links)f(lie)g(b)s(et)m(w)m
(een)j Ff(a)1616 3921 y Fp(1)1684 3906 y Fj(and)e Ff(a)1920
3921 y Fp(4)1960 3906 y Fj(.)g(Therefore,)h(the)g(failure)d(of)i(an)m
(y)h(ph)m(ys-)166 4027 y(ical)34 b(link)g(shared)i(b)m(y)g(four)f(ligh)
m(tpaths)f(corresp)s(onding)h(to)g(\()p Ff(a)2500 4042
y Fp(1)2540 4027 y Ff(;)17 b(a)2635 4042 y Fp(2)2674
4027 y Fj(\),)36 b(\()p Ff(a)2864 4042 y Fp(3)2903 4027
y Ff(;)17 b(a)2998 4042 y Fp(4)3037 4027 y Fj(\),)36
b(\()p Ff(e)3221 4042 y Fp(1)3260 4027 y Ff(;)17 b(e)3349
4042 y Fp(2)3389 4027 y Fj(\),)166 4147 y(and)36 b(\()p
Ff(e)442 4162 y Fp(3)482 4147 y Ff(;)17 b(e)571 4162
y Fp(4)610 4147 y Fj(\))36 b(will)d(break)k(all)c(these)k(logical)c
(links,)i(hence)i(making)e(the)h(logical)d(top)s(ol-)166
4267 y(ogy)i(disconnected.)h(\(Note)f(that)f(the)h(edge-cut)g
Ff(C)2075 4282 y Fp(1)2149 4267 y Fj(corresp)s(onds)h(to)e(the)h(four)g
(logical)166 4388 y(links.\))26 b(Similar)e(argumen)m(ts)j(can)g(b)s(e)
g(applied)e(to)i(sho)m(w)h(that)f(the)g(logical)d(top)s(ology)h(will)
166 4508 y(b)s(ecome)f(disconnected)i(for)e(an)m(y)g(of)g(the)h
(remaining)d(three)j(p)s(ossible)e(route)h(assignmen)m(ts)166
4629 y(for)36 b(\()p Ff(a)408 4644 y Fp(1)448 4629 y
Ff(;)17 b(a)543 4644 y Fp(2)582 4629 y Fj(\))37 b(and)g(\()p
Ff(a)940 4644 y Fp(3)979 4629 y Ff(;)17 b(a)1074 4644
y Fp(4)1114 4629 y Fj(\))36 b(b)m(y)i(deleting)e Ff(C)1771
4644 y Fp(1)1810 4629 y Ff(;)17 b(C)1924 4644 y Fp(2)1963
4629 y Fj(,)37 b(and)g Ff(C)2291 4644 y Fp(3)2367 4629
y Fj(when)h(the)f(shared)h(ph)m(ysical)166 4749 y(link)31
b(fails.)166 5019 y(Figure)k(5)h(sho)m(ws)i(a)f(3-edge-connected)g
(logical)c(top)s(ology)i(and)i(a)f(ring)f(net)m(w)m(ork)j(with)166
5139 y(the)j(corresp)s(onding)f(no)s(des.)h(One)f(can)g(v)m(erify)h(b)m
(y)g(a)f(similar)d(argumen)m(t)j(used)h(in)e(the)166
5259 y(case)i(for)e(the)i(4-edge)e(connected)j(logical)37
b(top)s(ology)h(that)i(no)g(ligh)m(tpath)e(em)m(b)s(edding)166
5380 y(can)33 b(mak)m(e)g(the)g(sho)m(wn)h(logical)29
b(top)s(ology)i(surviv)-5 b(able.)1769 5712 y(5)p eop
%%Page: 6 6
6 5 bop 160 1539 a @beginspecial 0 @llx 0 @lly 506 @urx
236 @ury 3960 @rwi @setspecial
%%BeginDocument: fig/fig_edge_cut_of_4.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: D:\papers\IS\fig\fig_edge_cut_of_4.ps
%%CreationDate: () ()
%%BoundingBox: 0 0 506 236
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 506 236
%AI3_TileBox: 0 0 506 236
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

u
 [] 0 d
2.0000 w
  0.000 0.000 0.000 1.000 K
1 J
1 j
  120.6389 211.6872 m
  165.5641 211.6872 L
S
U
u
  0.000 0.000 0.000 1.000 K
  120.3993 177.0649 m
  166.0433 177.0649 L
S
U
u
1.0000 w
  0.000 0.000 0.000 1.000 K
  120.6389 211.6872 m
  120.3993 177.0649 L
S
U
u
  0.000 0.000 0.000 1.000 K
  165.5641 211.6872 m
  166.0433 177.0649 L
S
U
u
  0.000 0.000 0.000 1.000 K
  165.5641 211.6872 m
  230.1364 158.9750 L
S
U
u
  166.0433 177.0649 m
  186.7687 159.4542 L
S
U
u
  0.000 0.000 0.000 1.000 K
  165.5641 211.6872 m
  186.7687 159.4542 L
S
U
u
  0.000 0.000 0.000 1.000 K
  166.0433 177.0649 m
  230.1364 158.9750 L
S
U
u
  0.000 0.000 0.000 1.000 K
  186.0499 126.3894 m
  186.0499 99.4343 L
S
U
u
  0.000 0.000 0.000 1.000 K
  230.1364 126.3894 m
  230.1364 99.4343 L
S
U
u
  186.0499 126.3894 m
  230.1364 99.4343 L
S
U
u
  230.1364 126.3894 m
  186.0499 99.4343 L
S
U
u
  159.4542 46.8419 m
  186.7687 68.0466 L
S
U
u
  0.000 0.000 0.000 1.000 K
  159.6938 12.8186 m
  230.1364 68.0466 L
S
U
u
  0.000 0.000 0.000 1.000 K
  159.4542 46.8419 m
  230.1364 68.0466 L
S
U
u
  0.000 0.000 0.000 1.000 K
  186.7687 68.0466 m
  159.6938 12.8186 L
S
U
u
  0.000 0.000 0.000 1.000 K
  94.2829 78.5890 m
  119.4409 46.8419 L
S
U
u
  0.000 0.000 0.000 1.000 K
  59.3012 78.5890 m
  121.1181 12.8186 L
S
U
u
  59.3012 78.5890 m
  119.4409 46.8419 L
S
U
u
  94.2829 78.5890 m
  121.1181 12.8186 L
S
U
u
  59.7804 147.7138 m
  120.6389 211.6872 L
S
U
u
  0.000 0.000 0.000 1.000 K
  95.0017 147.4742 m
  120.3993 177.0649 L
S
U
u
  0.000 0.000 0.000 1.000 K
  120.6389 211.6872 m
  95.0017 147.4742 L
S
U
u
  0.000 0.000 0.000 1.000 K
  59.7804 147.7138 m
  120.3993 177.0649 L
S
U
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  110.0965 211.4476 m
  110.2163 213.7238 L
  110.9351 215.8802 L
  112.1331 217.7970 L
  113.5707 219.4742 L
  115.4875 220.7920 L
  117.5241 221.7504 L
  119.6805 222.2296 L
  121.9567 222.2296 L
  124.1131 221.7504 L
  126.2696 220.7920 L
  128.0666 219.4742 L
  129.5042 217.7970 L
  130.7022 215.8802 L
  131.4210 213.7238 L
  131.6606 211.4476 L
  131.4210 209.1714 L
  130.7022 207.0150 L
  129.5042 205.0982 L
  128.0666 203.4210 L
  126.2696 202.1032 L
  124.1131 201.1448 L
  121.9567 200.6656 L
  119.6805 200.6656 L
  117.5241 201.1448 L
  115.4875 202.1032 L
  113.5707 203.4210 L
  112.1331 205.0982 L
  110.9351 207.0150 L
  110.2163 209.1714 L
  110.0965 211.4476 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 115.8469 207.8536 0 Tp
TP
85.019893 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(b\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 121.8369 203.9002 0 Tp
TP
87.008261 Tz
/_Times-Roman 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  109.6173 176.8253 m
  109.8569 178.9817 L
  110.4559 181.0183 L
  111.4143 182.9351 L
  112.8519 184.6123 L
  114.5291 186.0499 L
  116.3261 187.0083 L
  118.4825 187.6073 L
  120.6389 187.8469 L
  122.7953 187.6073 L
  124.8319 187.0083 L
  126.7488 186.0499 L
  128.4260 184.6123 L
  129.7438 182.9351 L
  130.8220 181.0183 L
  131.4210 178.9817 L
  131.6606 176.8253 L
  131.4210 174.7887 L
  130.8220 172.7521 L
  129.7438 170.8353 L
  128.4260 169.1581 L
  126.7488 167.8403 L
  124.8319 166.7621 L
  122.7953 166.1631 L
  120.6389 165.9235 L
  118.4825 166.1631 L
  116.3261 166.7621 L
  114.5291 167.8403 L
  112.8519 169.1581 L
  111.4143 170.8353 L
  110.4559 172.7521 L
  109.8569 174.7887 L
  109.6173 176.8253 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 115.6073 173.3511 0 Tp
TP
85.019893 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(b\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 121.5973 169.3977 0 Tp
TP
87.008261 Tz
/_Times-Roman 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  155.0216 211.4476 m
  155.1414 213.7238 L
  155.8602 215.8802 L
  157.0582 217.7970 L
  158.4958 219.4742 L
  160.4126 220.7920 L
  162.4493 221.7504 L
  164.6057 222.2296 L
  166.8819 222.2296 L
  169.0383 221.7504 L
  171.1947 220.7920 L
  172.9917 219.4742 L
  174.4293 217.7970 L
  175.6273 215.8802 L
  176.3461 213.7238 L
  176.5857 211.4476 L
  176.3461 209.1714 L
  175.6273 207.0150 L
  174.4293 205.0982 L
  172.9917 203.4210 L
  171.1947 202.1032 L
  169.0383 201.1448 L
  166.8819 200.6656 L
  164.6057 200.6656 L
  162.4493 201.1448 L
  160.4126 202.1032 L
  158.4958 203.4210 L
  157.0582 205.0982 L
  155.8602 207.0150 L
  155.1414 209.1714 L
  155.0216 211.4476 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 160.7720 207.8536 0 Tp
TP
85.019893 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(b\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 166.7621 203.9002 0 Tp
TP
87.008261 Tz
/_Times-Roman 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  155.8602 176.8253 m
  156.0998 178.9817 L
  156.6988 181.0183 L
  157.7770 182.9351 L
  159.3344 184.4925 L
  161.0116 185.8103 L
  163.0483 186.6489 L
  165.0849 187.1281 L
  167.2413 187.1281 L
  169.3977 186.6489 L
  171.3145 185.8103 L
  173.1115 184.4925 L
  174.5491 182.9351 L
  175.6273 181.0183 L
  176.3461 178.9817 L
  176.5857 176.8253 L
  176.3461 174.7887 L
  175.6273 172.7521 L
  174.5491 170.9551 L
  173.1115 169.2779 L
  171.3145 168.0799 L
  169.3977 167.1215 L
  167.2413 166.6423 L
  165.0849 166.6423 L
  163.0483 167.1215 L
  161.0116 168.0799 L
  159.3344 169.2779 L
  157.7770 170.9551 L
  156.6988 172.7521 L
  156.0998 174.7887 L
  155.8602 176.8253 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 161.1314 173.3511 0 Tp
TP
85.019893 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(b\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 167.1215 169.3977 0 Tp
TP
87.008261 Tz
/_Times-Roman 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  186.7687 159.4542 m
  230.1364 158.9750 L
S
U
u
  0.000 0.000 0.000 1.000 K
  186.0499 126.3894 m
  230.1364 126.3894 L
S
U
u
2.0000 w
  0.000 0.000 0.000 1.000 K
  186.7687 159.4542 m
  186.0499 126.3894 L
S
U
u
  0.000 0.000 0.000 1.000 K
  230.1364 158.9750 m
  230.1364 126.3894 L
S
U
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
  176.5857 159.2146 m
  176.7055 161.3710 L
  177.3045 163.5275 L
  178.3827 165.4443 L
  179.9401 167.1215 L
  181.7371 168.3195 L
  183.6539 169.2779 L
  185.8103 169.7571 L
  188.0865 169.7571 L
  190.2429 169.2779 L
  192.2795 168.3195 L
  194.0765 167.1215 L
  195.5141 165.4443 L
  196.5923 163.5275 L
  197.3111 161.3710 L
  197.5507 159.2146 L
  197.3111 157.0582 L
  196.5923 154.9018 L
  195.5141 152.9850 L
  194.0765 151.4276 L
  192.2795 150.1098 L
  190.2429 149.1514 L
  188.0865 148.6722 L
  185.8103 148.6722 L
  183.6539 149.1514 L
  181.7371 150.1098 L
  179.9401 151.4276 L
  178.3827 152.9850 L
  177.3045 154.9018 L
  176.7055 157.0582 L
  176.5857 159.2146 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 182.3361 155.6206 0 Tp
TP
85.019893 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(c\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 187.6073 151.6672 0 Tp
TP
87.008261 Tz
/_Times-Roman 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  176.5857 126.1498 m
  176.7055 128.3062 L
  177.3045 130.2230 L
  178.2629 132.0200 L
  179.7005 133.5774 L
  181.3777 134.7754 L
  183.2945 135.6140 L
  185.2113 136.0932 L
  187.3677 136.0932 L
  189.2845 135.6140 L
  191.2013 134.7754 L
  192.8785 133.5774 L
  194.3161 132.0200 L
  195.2745 130.2230 L
  195.9933 128.3062 L
  196.2329 126.1498 L
  195.9933 124.1131 L
  195.2745 122.1963 L
  194.3161 120.3993 L
  192.8785 118.8419 L
  191.2013 117.6439 L
  189.2845 116.8053 L
  187.3677 116.3261 L
  185.2113 116.3261 L
  183.2945 116.8053 L
  181.3777 117.6439 L
  179.7005 118.8419 L
  178.2629 120.3993 L
  177.3045 122.1963 L
  176.7055 124.1131 L
  176.5857 126.1498 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 181.6173 122.5557 0 Tp
TP
85.019893 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(c\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 186.8885 118.6023 0 Tp
TP
87.008261 Tz
/_Times-Roman 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  220.1930 158.7354 m
  220.4326 160.8918 L
  221.0316 162.9285 L
  222.1098 164.7255 L
  223.5474 166.2829 L
  225.2246 167.4809 L
  227.1414 168.4393 L
  229.2978 168.7987 L
  231.3344 168.7987 L
  233.4908 168.4393 L
  235.4077 167.4809 L
  237.0849 166.2829 L
  238.5225 164.7255 L
  239.6007 162.9285 L
  240.1997 160.8918 L
  240.4393 158.7354 L
  240.1997 156.6988 L
  239.6007 154.6622 L
  238.5225 152.8652 L
  237.0849 151.3078 L
  235.4077 149.9900 L
  233.4908 149.1514 L
  231.3344 148.6722 L
  229.2978 148.6722 L
  227.1414 149.1514 L
  225.2246 149.9900 L
  223.5474 151.3078 L
  222.1098 152.8652 L
  221.0316 154.6622 L
  220.4326 156.6988 L
  220.1930 158.7354 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 225.7038 155.1414 0 Tp
TP
85.019893 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(c\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 230.9750 151.1880 0 Tp
TP
87.008261 Tz
/_Times-Roman 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  219.9534 126.1498 m
  220.1930 128.3062 L
  220.9118 130.4626 L
  221.9900 132.2596 L
  223.4276 133.9368 L
  225.1048 135.1348 L
  227.1414 136.0932 L
  229.1780 136.4526 L
  231.4542 136.4526 L
  233.4908 136.0932 L
  235.5275 135.1348 L
  237.2047 133.9368 L
  238.6423 132.2596 L
  239.7205 130.4626 L
  240.4393 128.3062 L
  240.6789 126.1498 L
  240.4393 124.1131 L
  239.7205 121.9567 L
  238.6423 120.1597 L
  237.2047 118.4825 L
  235.5275 117.2845 L
  233.4908 116.3261 L
  231.4542 115.9667 L
  229.1780 115.9667 L
  227.1414 116.3261 L
  225.1048 117.2845 L
  223.4276 118.4825 L
  221.9900 120.1597 L
  220.9118 121.9567 L
  220.1930 124.1131 L
  219.9534 126.1498 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 225.7038 122.5557 0 Tp
TP
85.019893 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(c\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 230.9750 118.6023 0 Tp
TP
87.008261 Tz
/_Times-Roman 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  186.0499 99.4343 m
  230.1364 99.4343 L
S
U
u
  0.000 0.000 0.000 1.000 K
  186.7687 68.0466 m
  230.1364 68.0466 L
S
U
u
2.0000 w
  0.000 0.000 0.000 1.000 K
  186.0499 99.4343 m
  186.7687 68.0466 L
S
U
u
  0.000 0.000 0.000 1.000 K
  230.1364 99.4343 m
  230.1364 68.0466 L
S
U
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
  176.5857 99.1947 m
  176.7055 101.3511 L
  177.3045 103.2679 L
  178.2629 105.0649 L
  179.7005 106.6223 L
  181.3777 107.8203 L
  183.2945 108.6589 L
  185.2113 109.1381 L
  187.3677 109.1381 L
  189.2845 108.6589 L
  191.2013 107.8203 L
  192.8785 106.6223 L
  194.3161 105.0649 L
  195.2745 103.2679 L
  195.9933 101.3511 L
  196.2329 99.1947 L
  195.9933 97.1581 L
  195.2745 95.2413 L
  194.3161 93.4443 L
  192.8785 91.8869 L
  191.2013 90.6889 L
  189.2845 89.8502 L
  187.3677 89.3710 L
  185.2113 89.3710 L
  183.2945 89.8502 L
  181.3777 90.6889 L
  179.7005 91.8869 L
  178.2629 93.4443 L
  177.3045 95.2413 L
  176.7055 97.1581 L
  176.5857 99.1947 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 181.2579 95.6007 0 Tp
TP
85.019893 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(d\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 187.2479 91.6473 0 Tp
TP
87.008261 Tz
/_Times-Roman 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  176.5857 67.8070 m
  176.7055 69.9634 L
  177.3045 72.1198 L
  178.3827 74.0366 L
  179.9401 75.5940 L
  181.7371 76.9118 L
  183.6539 77.8702 L
  185.8103 78.3494 L
  188.0865 78.3494 L
  190.2429 77.8702 L
  192.2795 76.9118 L
  194.0765 75.5940 L
  195.5141 74.0366 L
  196.5923 72.1198 L
  197.3111 69.9634 L
  197.5507 67.8070 L
  197.3111 65.6506 L
  196.5923 63.4942 L
  195.5141 61.5774 L
  194.0765 60.0200 L
  192.2795 58.8220 L
  190.2429 57.8636 L
  188.0865 57.3844 L
  185.8103 57.3844 L
  183.6539 57.8636 L
  181.7371 58.8220 L
  179.9401 60.0200 L
  178.3827 61.5774 L
  177.3045 63.4942 L
  176.7055 65.6506 L
  176.5857 67.8070 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 181.9767 64.2130 0 Tp
TP
85.019893 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(d\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 187.9667 60.2596 0 Tp
TP
87.008261 Tz
/_Times-Roman 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  219.9534 99.1947 m
  220.1930 101.3511 L
  220.9118 103.5075 L
  221.9900 105.3045 L
  223.4276 106.9817 L
  225.1048 108.1797 L
  227.1414 109.1381 L
  229.1780 109.4975 L
  231.4542 109.4975 L
  233.4908 109.1381 L
  235.5275 108.1797 L
  237.2047 106.9817 L
  238.6423 105.3045 L
  239.7205 103.5075 L
  240.4393 101.3511 L
  240.6789 99.1947 L
  240.4393 97.1581 L
  239.7205 95.0017 L
  238.6423 93.2047 L
  237.2047 91.5275 L
  235.5275 90.3295 L
  233.4908 89.3710 L
  231.4542 89.0116 L
  229.1780 89.0116 L
  227.1414 89.3710 L
  225.1048 90.3295 L
  223.4276 91.5275 L
  221.9900 93.2047 L
  220.9118 95.0017 L
  220.1930 97.1581 L
  219.9534 99.1947 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 225.3444 95.6007 0 Tp
TP
85.019893 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(d\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 231.3344 91.6473 0 Tp
TP
87.008261 Tz
/_Times-Roman 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
2.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  119.4409 46.8419 m
  159.4542 46.8419 L
S
U
u
  0.000 0.000 0.000 1.000 K
  121.1181 12.8186 m
  159.6938 12.8186 L
S
U
u
1.0000 w
  0.000 0.000 0.000 1.000 K
  119.4409 46.8419 m
  121.1181 12.8186 L
S
U
u
  0.000 0.000 0.000 1.000 K
  159.4542 46.8419 m
  159.6938 12.8186 L
S
U
u
  0.000 0.000 0.000 0.000 k
  109.6173 46.6023 m
  109.8569 48.6389 L
  110.4559 50.6755 L
  111.5341 52.4725 L
  112.9717 54.1498 L
  114.6489 55.3478 L
  116.5657 56.1864 L
  118.6023 56.6656 L
  120.7587 56.6656 L
  122.7953 56.1864 L
  124.7121 55.3478 L
  126.5092 54.1498 L
  127.8270 52.4725 L
  128.9052 50.6755 L
  129.6240 48.6389 L
  129.8636 46.6023 L
  129.6240 44.4459 L
  128.9052 42.5291 L
  127.8270 40.6123 L
  126.5092 39.0549 L
  124.7121 37.8569 L
  122.7953 37.0183 L
  120.7587 36.5391 L
  118.6023 36.5391 L
  116.5657 37.0183 L
  114.6489 37.8569 L
  112.9717 39.0549 L
  111.5341 40.6123 L
  110.4559 42.5291 L
  109.8569 44.4459 L
  109.6173 46.6023 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 115.0083 43.0083 0 Tp
TP
85.019893 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 120.2795 39.0549 0 Tp
TP
87.008261 Tz
/_Times-Roman 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  110.9351 12.6988 m
  111.1747 14.8552 L
  111.7737 16.8918 L
  112.8519 18.6889 L
  114.4093 20.3661 L
  116.0865 21.5641 L
  118.1231 22.5225 L
  120.1597 23.0017 L
  122.3161 23.0017 L
  124.4725 22.5225 L
  126.3894 21.5641 L
  128.1864 20.3661 L
  129.6240 18.6889 L
  130.7022 16.8918 L
  131.4210 14.8552 L
  131.6606 12.6988 L
  131.4210 10.5424 L
  130.7022 8.5058 L
  129.6240 6.5890 L
  128.1864 5.0316 L
  126.3894 3.7138 L
  124.4725 2.8752 L
  122.3161 2.3960 L
  120.1597 2.3960 L
  118.1231 2.8752 L
  116.0865 3.7138 L
  114.4093 5.0316 L
  112.8519 6.5890 L
  111.7737 8.5058 L
  111.1747 10.5424 L
  110.9351 12.6988 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 116.5657 9.1048 0 Tp
TP
85.019893 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 121.8369 5.0316 0 Tp
TP
87.008261 Tz
/_Times-Roman 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  149.6306 46.6023 m
  149.7504 48.6389 L
  150.4692 50.6755 L
  151.5474 52.4725 L
  152.8652 54.1498 L
  154.6622 55.3478 L
  156.5790 56.1864 L
  158.6156 56.6656 L
  160.7720 56.6656 L
  162.8087 56.1864 L
  164.7255 55.3478 L
  166.4027 54.1498 L
  167.8403 52.4725 L
  168.9185 50.6755 L
  169.5175 48.6389 L
  169.7571 46.6023 L
  169.5175 44.4459 L
  168.9185 42.5291 L
  167.8403 40.6123 L
  166.4027 39.0549 L
  164.7255 37.8569 L
  162.8087 37.0183 L
  160.7720 36.5391 L
  158.6156 36.5391 L
  156.5790 37.0183 L
  154.6622 37.8569 L
  152.8652 39.0549 L
  151.5474 40.6123 L
  150.4692 42.5291 L
  149.7504 44.4459 L
  149.6306 46.6023 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 155.0216 43.0083 0 Tp
TP
85.019893 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 160.2928 39.0549 0 Tp
TP
87.008261 Tz
/_Times-Roman 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  149.6306 12.6988 m
  149.7504 14.8552 L
  150.4692 16.8918 L
  151.5474 18.6889 L
  152.9850 20.3661 L
  154.7820 21.5641 L
  156.6988 22.5225 L
  158.8552 23.0017 L
  161.0116 23.0017 L
  163.0483 22.5225 L
  165.0849 21.5641 L
  166.7621 20.3661 L
  168.3195 18.6889 L
  169.3977 16.8918 L
  169.9967 14.8552 L
  170.2363 12.6988 L
  169.9967 10.5424 L
  169.3977 8.5058 L
  168.3195 6.5890 L
  166.7621 5.0316 L
  165.0849 3.7138 L
  163.0483 2.8752 L
  161.0116 2.3960 L
  158.8552 2.3960 L
  156.6988 2.8752 L
  154.7820 3.7138 L
  152.9850 5.0316 L
  151.5474 6.5890 L
  150.4692 8.5058 L
  149.7504 10.5424 L
  149.6306 12.6988 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 155.2612 9.1048 0 Tp
TP
85.019893 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 160.5324 5.0316 0 Tp
TP
87.008261 Tz
/_Times-Roman 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  59.7804 147.7138 m
  95.0017 147.4742 L
S
U
u
  0.000 0.000 0.000 1.000 K
  59.3012 78.5890 m
  94.2829 78.5890 L
S
U
u
2.0000 w
  0.000 0.000 0.000 1.000 K
  59.7804 147.7138 m
  59.3012 78.5890 L
S
U
u
  0.000 0.000 0.000 1.000 K
  95.0017 147.4742 m
  94.2829 78.5890 L
S
U
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
  49.9567 147.5940 m
  50.1963 149.6306 L
  50.7953 151.6672 L
  51.8735 153.4642 L
  53.3111 155.0216 L
  54.9884 156.3394 L
  56.9052 157.1780 L
  58.9418 157.6572 L
  60.9784 157.6572 L
  63.0150 157.1780 L
  65.0516 156.3394 L
  66.7288 155.0216 L
  68.1664 153.4642 L
  69.1248 151.6672 L
  69.8436 149.6306 L
  70.0832 147.5940 L
  69.8436 145.4376 L
  69.1248 143.4010 L
  68.1664 141.6040 L
  66.7288 140.0466 L
  65.0516 138.8486 L
  63.0150 137.8902 L
  60.9784 137.5308 L
  58.9418 137.5308 L
  56.9052 137.8902 L
  54.9884 138.8486 L
  53.3111 140.0466 L
  51.8735 141.6040 L
  50.7953 143.4010 L
  50.1963 145.4376 L
  49.9567 147.5940 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 55.3478 144.0000 0 Tp
TP
85.019893 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 60.4992 139.9268 0 Tp
TP
87.008261 Tz
/_Times-Roman 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  49.1181 78.3494 m
  49.2379 80.5058 L
  49.9567 82.6622 L
  51.0349 84.5790 L
  52.5923 86.2562 L
  54.3894 87.4542 L
  56.3062 88.4126 L
  58.4626 88.8918 L
  60.6190 88.8918 L
  62.7754 88.4126 L
  64.8120 87.4542 L
  66.6090 86.2562 L
  68.0466 84.5790 L
  69.1248 82.6622 L
  69.8436 80.5058 L
  70.0832 78.3494 L
  69.8436 76.1930 L
  69.1248 74.0366 L
  68.0466 72.1198 L
  66.6090 70.5624 L
  64.8120 69.2446 L
  62.7754 68.2862 L
  60.6190 67.8070 L
  58.4626 67.8070 L
  56.3062 68.2862 L
  54.3894 69.2446 L
  52.5923 70.5624 L
  51.0349 72.1198 L
  49.9567 74.0366 L
  49.2379 76.1930 L
  49.1181 78.3494 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 54.9884 74.7554 0 Tp
TP
85.019893 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 60.1398 70.8020 0 Tp
TP
87.008261 Tz
/_Times-Roman 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  84.9384 147.3544 m
  85.0582 149.5108 L
  85.7770 151.5474 L
  86.8552 153.3444 L
  88.2928 155.0216 L
  90.0899 156.2196 L
  92.0067 157.1780 L
  94.1631 157.6572 L
  96.3195 157.6572 L
  98.3561 157.1780 L
  100.3927 156.2196 L
  102.0699 155.0216 L
  103.6273 153.3444 L
  104.7055 151.5474 L
  105.3045 149.5108 L
  105.5441 147.3544 L
  105.3045 145.1980 L
  104.7055 143.1614 L
  103.6273 141.2446 L
  102.0699 139.6872 L
  100.3927 138.3694 L
  98.3561 137.5308 L
  96.3195 137.0516 L
  94.1631 137.0516 L
  92.0067 137.5308 L
  90.0899 138.3694 L
  88.2928 139.6872 L
  86.8552 141.2446 L
  85.7770 143.1614 L
  85.0582 145.1980 L
  84.9384 147.3544 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 90.5691 143.7604 0 Tp
TP
85.019893 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 95.8403 139.6872 0 Tp
TP
87.008261 Tz
/_Times-Roman 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  83.9800 78.3494 m
  84.2196 80.5058 L
  84.9384 82.6622 L
  86.0166 84.5790 L
  87.4542 86.2562 L
  89.2512 87.4542 L
  91.2879 88.4126 L
  93.4443 88.8918 L
  95.6007 88.8918 L
  97.7571 88.4126 L
  99.7937 87.4542 L
  101.5907 86.2562 L
  103.0283 84.5790 L
  104.2263 82.6622 L
  104.8253 80.5058 L
  105.0649 78.3494 L
  104.8253 76.1930 L
  104.2263 74.0366 L
  103.0283 72.1198 L
  101.5907 70.5624 L
  99.7937 69.2446 L
  97.7571 68.2862 L
  95.6007 67.8070 L
  93.4443 67.8070 L
  91.2879 68.2862 L
  89.2512 69.2446 L
  87.4542 70.5624 L
  86.0166 72.1198 L
  84.9384 74.0366 L
  84.2196 76.1930 L
  83.9800 78.3494 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 89.8502 74.7554 0 Tp
TP
85.019893 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 95.1215 70.8020 0 Tp
TP
87.008261 Tz
/_Times-Roman 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
2.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  140.6456 5.0316 m
  140.1664 10.3028 L
  139.6872 15.5740 L
  139.0882 20.8453 L
  138.3694 25.9967 L
  137.5308 31.0283 L
  136.5724 35.9401 L
  135.6140 40.8519 L
  134.4160 45.5241 L
  133.2180 49.9567 L
  131.9002 54.1498 L
  130.4626 58.2230 L
  129.0250 61.9368 L
  127.4676 65.4110 L
  125.7903 68.6456 L
  124.1131 71.5208 L
  122.4359 74.0366 L
  122.0765 74.5158 L
  121.7171 74.9950 L
  121.2379 75.4742 L
  120.8785 75.9534 L
  120.5191 76.4326 L
  120.0399 76.7920 L
  119.6805 77.2712 L
  119.2013 77.7504 L
  118.7221 78.2296 L
  118.2429 78.7088 L
  117.7637 79.1880 L
  117.2845 79.6672 L
  116.6855 80.1464 L
  116.2063 80.7454 L
  115.6073 81.2246 L
  115.0083 81.8236 L
  114.2895 82.4226 L
  113.6905 83.0216 L
  113.0915 83.6206 L
  112.3727 84.3394 L
  111.6539 84.9384 L
  110.9351 85.5374 L
  110.2163 86.1364 L
  109.4975 86.8552 L
  108.7787 87.4542 L
  108.0599 87.9334 L
  107.3411 88.5324 L
  106.6223 89.1314 L
  105.3045 89.9700 L
  103.8669 90.8087 L
  102.5491 91.5275 L
  101.2313 92.1265 L
  99.9135 92.6057 L
  98.7155 93.0849 L
  97.3977 93.4443 L
  96.0799 93.8037 L
  94.8819 94.0433 L
  93.5641 94.4027 L
  92.3661 94.6423 L
  91.0483 94.8819 L
  89.7304 95.1215 L
  88.4126 95.4809 L
  86.9750 95.7205 L
  85.6572 96.0799 L
  84.2196 96.3195 L
  82.9018 96.6789 L
  81.4642 96.9185 L
  79.9068 97.1581 L
  78.4692 97.5175 L
  76.9118 97.7571 L
  75.4742 97.9967 L
  73.7970 98.2363 L
  70.6822 98.5957 L
  67.4476 98.8353 L
  64.0932 99.0749 L
  60.6190 99.1947 L
  57.1448 99.1947 L
  53.5507 99.1947 L
  49.9567 99.1947 L
  46.3627 98.9551 L
  42.6489 98.8353 L
  39.0549 98.4759 L
  35.4609 98.2363 L
  31.8669 97.8769 L
  30.9085 97.7571 L
  30.0699 97.6373 L
  29.2313 97.5175 L
  28.3927 97.3977 L
  27.5541 97.2779 L
  26.7155 97.2779 L
  25.9967 97.1581 L
  25.2779 97.0383 L
  24.5591 96.9185 L
  23.9601 96.7987 L
  23.3611 96.7987 L
  22.8819 96.6789 L
  22.5225 96.6789 L
  22.1631 96.5591 L
S
U
u
  0.000 0.000 0.000 1.000 K
  146.8752 231.2146 m
  146.8752 226.1830 L
  146.6356 221.0316 L
  146.2762 215.8802 L
  145.7970 210.8486 L
  145.1980 205.8170 L
  144.4792 200.9052 L
  143.7604 195.9933 L
  142.9218 191.2013 L
  141.9634 186.6489 L
  140.8852 182.2163 L
  139.9268 177.9035 L
  138.8486 173.9501 L
  137.7704 170.1165 L
  136.6922 166.5225 L
  135.4942 163.1681 L
  134.4160 160.1730 L
  133.3378 157.4176 L
  132.3794 155.0216 L
  131.4210 153.1048 L
  131.1814 152.6256 L
  130.9418 152.2662 L
  130.8220 152.0266 L
  130.5824 151.6672 L
  130.3428 151.3078 L
  130.2230 151.0682 L
  129.9834 150.7088 L
  129.7438 150.3494 L
  129.5042 150.1098 L
  129.2646 149.7504 L
  129.0250 149.5108 L
  128.7854 149.1514 L
  128.4260 148.9118 L
  128.1864 148.5524 L
  127.8270 148.3128 L
  127.4676 147.9534 L
  127.1082 147.5940 L
  126.7488 147.2346 L
  126.3894 146.8752 L
  125.7903 146.3960 L
  125.3111 145.9168 L
  124.7121 145.4376 L
  123.9933 144.9584 L
  123.3943 144.3594 L
  122.6755 143.8802 L
  121.9567 143.2812 L
  121.2379 142.8020 L
  120.5191 142.3228 L
  119.6805 141.8436 L
  118.8419 141.2446 L
  117.1647 140.4060 L
  115.4875 139.4476 L
  113.6905 138.7288 L
  111.8935 137.8902 L
  110.0965 137.2912 L
  108.1797 136.5724 L
  106.3827 135.9734 L
  104.4659 135.4942 L
  102.6689 135.0150 L
  100.8719 134.5358 L
  99.0749 134.0566 L
  97.3977 133.8170 L
  95.8403 133.4576 L
  94.2829 133.2180 L
  92.7255 132.9784 L
  91.1681 132.7388 L
  89.7304 132.4992 L
  88.1730 132.3794 L
  86.6156 132.2596 L
  85.0582 132.1398 L
  83.5008 132.0200 L
  81.9434 132.0200 L
  80.2662 132.0200 L
  77.0316 132.0200 L
  73.5574 132.1398 L
  69.8436 132.2596 L
  66.1298 132.4992 L
  62.2962 132.8586 L
  58.5824 133.3378 L
  54.5092 133.6972 L
  50.5557 134.2962 L
  46.4825 134.8952 L
  42.5291 135.6140 L
  38.4559 136.3328 L
  34.5025 137.1714 L
  33.6639 137.2912 L
  32.7055 137.5308 L
  31.8669 137.7704 L
  31.0283 137.8902 L
  30.1897 138.1298 L
  29.3511 138.3694 L
  28.5125 138.4892 L
  27.7937 138.7288 L
  27.0749 138.8486 L
  26.3561 138.9684 L
  25.7571 139.2080 L
  25.1581 139.3278 L
  24.6789 139.4476 L
  24.3195 139.5674 L
  23.9601 139.6872 L
S
U
u
  0.000 0.000 0.000 1.000 K
  266.3161 148.6722 m
  261.4043 147.9534 L
  256.3727 147.1148 L
  251.2213 146.3960 L
  245.8303 145.5574 L
  240.4393 144.7188 L
  234.9285 144.0000 L
  229.2978 143.1614 L
  223.7870 142.3228 L
  218.2762 141.6040 L
  212.8852 140.7654 L
  207.4942 140.0466 L
  202.2230 139.3278 L
  197.1913 138.6090 L
  192.3993 138.0100 L
  187.7271 137.4110 L
  183.4143 136.8120 L
  179.3411 136.3328 L
  175.7471 135.8536 L
  172.2729 135.3744 L
  171.6739 135.2546 L
  171.0749 135.2546 L
  170.3561 135.1348 L
  169.7571 135.0150 L
  169.1581 135.0150 L
  168.5591 134.8952 L
  167.8403 134.8952 L
  167.2413 134.7754 L
  166.5225 134.6556 L
  165.9235 134.6556 L
  165.0849 134.5358 L
  164.3661 134.4160 L
  163.6473 134.2962 L
  162.8087 134.2962 L
  161.8502 134.1764 L
  161.0116 134.0566 L
  160.0532 133.9368 L
  158.9750 133.8170 L
  157.8968 133.6972 L
  156.6988 133.5774 L
  155.3810 133.4576 L
  154.0632 133.2180 L
  152.7454 133.0982 L
  151.4276 132.9784 L
  149.9900 132.7388 L
  148.5524 132.6190 L
  147.1148 132.4992 L
  145.6772 132.2596 L
  144.2396 132.1398 L
  142.8020 132.0200 L
  141.3644 131.7804 L
  140.0466 131.6606 L
  137.6506 131.4210 L
  135.3744 131.1814 L
  133.3378 130.9418 L
  131.3012 130.7022 L
  129.3844 130.5824 L
  127.4676 130.3428 L
  125.6705 130.2230 L
  123.9933 129.9834 L
  122.3161 129.8636 L
  120.6389 129.7438 L
  119.0815 129.5042 L
  117.4043 129.3844 L
  115.8469 129.2646 L
  114.1697 129.1448 L
  112.4925 128.9052 L
  110.8153 128.7854 L
  109.0183 128.6656 L
  107.3411 128.4260 L
  105.5441 128.3062 L
  103.7471 128.1864 L
  101.9501 127.9468 L
  100.1531 127.8270 L
  98.2363 127.7072 L
  96.4393 127.4676 L
  94.5225 127.3478 L
  92.6057 127.1082 L
  90.6889 126.9884 L
  88.7720 126.7488 L
  84.6988 126.3894 L
  80.6256 126.1498 L
  76.4326 125.7903 L
  72.2396 125.4309 L
  67.9268 125.0715 L
  63.7338 124.7121 L
  59.5408 124.3527 L
  55.4676 123.9933 L
  51.2745 123.7537 L
  47.2013 123.3943 L
  43.1281 123.1547 L
  39.0549 122.7953 L
  35.1015 122.5557 L
  34.1431 122.4359 L
  33.1847 122.3161 L
  32.2263 122.3161 L
  31.3877 122.1963 L
  30.4293 122.1963 L
  29.5907 122.0765 L
  28.7521 122.0765 L
  27.9135 121.9567 L
  27.1947 121.9567 L
  26.4759 121.8369 L
  25.8769 121.8369 L
  25.2779 121.8369 L
  24.6789 121.7171 L
  24.3195 121.7171 L
  23.9601 121.7171 L
S
U
u
  0.000 0.000 0.000 1.000 K
  266.3161 74.5158 m
  261.4043 75.3544 L
  256.3727 76.0732 L
  251.1015 76.9118 L
  245.7105 77.7504 L
  240.3195 78.5890 L
  234.8087 79.5474 L
  229.1780 80.3860 L
  223.6672 81.2246 L
  218.0366 82.1830 L
  212.6456 83.0216 L
  207.2546 83.8602 L
  201.9834 84.6988 L
  196.9517 85.4176 L
  192.0399 86.2562 L
  187.4875 86.9750 L
  183.0549 87.6938 L
  178.9817 88.2928 L
  175.3877 88.8918 L
  172.0333 89.3710 L
  171.3145 89.4908 L
  170.7155 89.6106 L
  170.1165 89.7304 L
  169.5175 89.8502 L
  168.7987 89.8502 L
  168.1997 89.9700 L
  167.6007 90.0899 L
  166.8819 90.2097 L
  166.2829 90.3295 L
  165.5641 90.4493 L
  164.8453 90.5691 L
  164.1265 90.6889 L
  163.2879 90.8087 L
  162.4493 90.9285 L
  161.6106 91.0483 L
  160.6522 91.1681 L
  159.6938 91.2879 L
  158.6156 91.5275 L
  157.5374 91.6473 L
  156.3394 91.8869 L
  155.1414 92.0067 L
  153.8236 92.2463 L
  152.3860 92.4859 L
  151.0682 92.7255 L
  149.6306 92.9651 L
  148.1930 93.2047 L
  146.7554 93.3245 L
  145.3178 93.5641 L
  143.8802 93.8037 L
  142.4426 94.0433 L
  141.0050 94.2829 L
  139.6872 94.5225 L
  137.2912 94.8819 L
  135.1348 95.2413 L
  132.9784 95.6007 L
  130.9418 95.8403 L
  129.0250 96.1997 L
  127.2280 96.4393 L
  125.4309 96.6789 L
  123.6339 97.0383 L
  121.9567 97.2779 L
  120.3993 97.5175 L
  118.7221 97.7571 L
  117.1647 97.9967 L
  115.4875 98.2363 L
  113.9301 98.5957 L
  112.2529 98.8353 L
  110.4559 99.0749 L
  108.7787 99.3145 L
  106.9817 99.6739 L
  105.3045 99.9135 L
  103.5075 100.1531 L
  101.7105 100.5125 L
  99.7937 100.7521 L
  97.9967 100.9917 L
  96.1997 101.3511 L
  94.2829 101.5907 L
  92.3661 101.9501 L
  90.4493 102.1897 L
  88.5324 102.5491 L
  84.4592 103.1481 L
  80.3860 103.8669 L
  76.1930 104.4659 L
  72.0000 105.1847 L
  67.8070 105.7837 L
  63.6140 106.5025 L
  59.4210 107.1015 L
  55.3478 107.8203 L
  51.1547 108.4193 L
  47.0815 109.1381 L
  43.0083 109.7371 L
  39.0549 110.3361 L
  35.1015 110.9351 L
  34.1431 111.1747 L
  33.1847 111.2945 L
  32.2263 111.4143 L
  31.2679 111.5341 L
  30.4293 111.6539 L
  29.5907 111.8935 L
  28.7521 112.0133 L
  27.9135 112.1331 L
  27.1947 112.2529 L
  26.4759 112.3727 L
  25.8769 112.3727 L
  25.2779 112.4925 L
  24.6789 112.6123 L
  24.3195 112.7321 L
  23.9601 112.7321 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  3.7138 133.6972 m
  26.1165 133.6972 L
  26.1165 145.6772 L
  3.7138 145.6772 L
  3.7138 133.6972 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 8.3860 136.0932 0 Tp
TP
102.023871 Tz
/_Helvetica-Bold 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(C\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 17.0116 132.1398 0 Tp
TP
103.120902 Tz
/_Helvetica-Bold 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
1 j
  3.7138 106.7421 m
  26.1165 106.7421 L
  26.1165 118.7221 L
  3.7138 118.7221 L
  3.7138 106.7421 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 8.3860 109.1381 0 Tp
TP
102.023871 Tz
/_Helvetica-Bold 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(C\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 17.0116 105.1847 0 Tp
TP
103.120902 Tz
/_Helvetica-Bold 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
1 j
  3.7138 88.7720 m
  26.1165 88.7720 L
  26.1165 100.7521 L
  3.7138 100.7521 L
  3.7138 88.7720 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 8.3860 91.1681 0 Tp
TP
102.023871 Tz
/_Helvetica-Bold 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(C\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 17.0116 87.2146 0 Tp
TP
103.120902 Tz
/_Helvetica-Bold 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  296.3860 108.8985 m
  296.6256 114.5291 L
  297.3444 120.1597 L
  298.4226 125.7903 L
  300.0998 131.1814 L
  302.1364 136.5724 L
  304.5324 141.8436 L
  307.5275 146.9950 L
  310.7621 151.9068 L
  314.4759 156.6988 L
  318.5491 161.1314 L
  323.1015 165.4443 L
  327.8935 169.3977 L
  332.9251 173.1115 L
  338.3161 176.5857 L
  343.9468 179.5807 L
  349.9368 182.3361 L
  356.0466 184.7321 L
  362.2762 186.8885 L
  368.7454 188.5657 L
  375.3344 189.8835 L
  381.9235 190.8419 L
  388.7521 191.4409 L
  395.4609 191.6805 L
  402.2895 191.4409 L
  408.9983 190.8419 L
  415.4676 189.8835 L
  422.0566 188.5657 L
  428.5258 186.8885 L
  434.8752 184.7321 L
  440.9850 182.3361 L
  446.8552 179.5807 L
  452.4859 176.5857 L
  457.8769 173.1115 L
  463.0283 169.3977 L
  467.8203 165.4443 L
  472.2529 161.1314 L
  476.3261 156.6988 L
  480.0399 151.9068 L
  483.2745 146.9950 L
  486.2696 141.8436 L
  488.6656 136.5724 L
  490.8220 131.1814 L
  492.3794 125.7903 L
  493.4576 120.1597 L
  494.1764 114.5291 L
  494.4160 108.8985 L
  494.1764 103.2679 L
  493.4576 97.6373 L
  492.3794 92.0067 L
  490.8220 86.4958 L
  488.6656 81.1048 L
  486.2696 75.8336 L
  483.2745 70.8020 L
  480.0399 65.7704 L
  476.3261 61.0982 L
  472.2529 56.6656 L
  467.8203 52.4725 L
  463.0283 48.3993 L
  457.8769 44.6855 L
  452.4859 41.3311 L
  446.8552 38.2163 L
  440.9850 35.4609 L
  434.8752 32.9451 L
  428.5258 30.9085 L
  422.0566 29.2313 L
  415.4676 27.7937 L
  408.9983 26.8353 L
  402.2895 26.3561 L
  395.4609 26.1165 L
  388.7521 26.3561 L
  381.9235 26.8353 L
  375.3344 27.7937 L
  368.7454 29.2313 L
  362.2762 30.9085 L
  356.0466 32.9451 L
  349.9368 35.4609 L
  343.9468 38.2163 L
  338.3161 41.3311 L
  332.9251 44.6855 L
  327.8935 48.3993 L
  323.1015 52.4725 L
  318.5491 56.6656 L
  314.4759 61.0982 L
  310.7621 65.7704 L
  307.5275 70.8020 L
  304.5324 75.8336 L
  302.1364 81.1048 L
  300.0998 86.4958 L
  298.4226 92.0067 L
  297.3444 97.6373 L
  296.6256 103.2679 L
  296.3860 108.8985 L
B
U
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  381.3245 192.2795 m
  381.5641 194.1963 L
  382.2829 196.1131 L
  383.2413 197.7903 L
  384.6789 199.2280 L
  386.3561 200.1864 L
  388.2729 200.9052 L
  390.1897 201.1448 L
  392.1065 200.9052 L
  394.0233 200.1864 L
  395.7005 199.2280 L
  397.1381 197.7903 L
  398.0965 196.1131 L
  398.8153 194.1963 L
  399.0549 192.2795 L
  398.8153 190.3627 L
  398.0965 188.4459 L
  397.1381 186.7687 L
  395.7005 185.3311 L
  394.0233 184.3727 L
  392.1065 183.6539 L
  390.1897 183.4143 L
  388.2729 183.6539 L
  386.3561 184.3727 L
  384.6789 185.3311 L
  383.2413 186.7687 L
  382.2829 188.4459 L
  381.5641 190.3627 L
  381.3245 192.2795 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 386.3561 189.2845 0 Tp
TP
84.529393 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 390.7887 185.9301 0 Tp
TP
84.529393 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  289.7970 107.7005 m
  290.0366 109.7371 L
  290.6356 111.5341 L
  291.7138 113.2113 L
  293.1514 114.6489 L
  294.7088 115.7271 L
  296.5058 116.3261 L
  298.5424 116.5657 L
  300.4592 116.3261 L
  302.3760 115.7271 L
  304.0532 114.6489 L
  305.3710 113.2113 L
  306.4493 111.5341 L
  307.0483 109.7371 L
  307.2879 107.7005 L
  307.0483 105.7837 L
  306.4493 103.9867 L
  305.3710 102.3095 L
  304.0532 100.8719 L
  302.3760 99.7937 L
  300.4592 99.1947 L
  298.5424 98.9551 L
  296.5058 99.1947 L
  294.7088 99.7937 L
  293.1514 100.8719 L
  291.7138 102.3095 L
  290.6356 103.9867 L
  290.0366 105.7837 L
  289.7970 107.7005 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 294.5890 104.7055 0 Tp
TP
84.529393 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 299.0216 101.4709 0 Tp
TP
84.529393 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  391.9867 27.7937 m
  392.1065 29.7105 L
  392.8253 31.6273 L
  393.7837 33.1847 L
  395.2213 34.6223 L
  396.7787 35.5807 L
  398.6955 36.2995 L
  400.6123 36.4193 L
  402.5291 36.2995 L
  404.3261 35.5807 L
  406.0033 34.6223 L
  407.3211 33.1847 L
  408.3993 31.6273 L
  408.9983 29.7105 L
  409.2379 27.7937 L
  408.9983 25.8769 L
  408.3993 24.0799 L
  407.3211 22.4027 L
  406.0033 21.0849 L
  404.3261 20.0067 L
  402.5291 19.4077 L
  400.6123 19.1681 L
  398.6955 19.4077 L
  396.7787 20.0067 L
  395.2213 21.0849 L
  393.7837 22.4027 L
  392.8253 24.0799 L
  392.1065 25.8769 L
  391.9867 27.7937 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 396.6589 24.7987 0 Tp
TP
84.529393 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 401.0915 21.5641 0 Tp
TP
84.529393 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  486.8686 112.3727 m
  486.9884 114.2895 L
  487.7072 116.2063 L
  488.6656 117.7637 L
  490.1032 119.2013 L
  491.6606 120.1597 L
  493.5774 120.8785 L
  495.4942 120.9983 L
  497.4110 120.8785 L
  499.2080 120.1597 L
  500.8852 119.2013 L
  502.2030 117.7637 L
  503.2812 116.2063 L
  503.8802 114.2895 L
  504.1198 112.3727 L
  503.8802 110.4559 L
  503.2812 108.6589 L
  502.2030 106.9817 L
  500.8852 105.6639 L
  499.2080 104.5857 L
  497.4110 103.9867 L
  495.4942 103.7471 L
  493.5774 103.9867 L
  491.6606 104.5857 L
  490.1032 105.6639 L
  488.6656 106.9817 L
  487.7072 108.6589 L
  486.9884 110.4559 L
  486.8686 112.3727 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 491.5408 109.3777 0 Tp
TP
84.529393 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 495.9734 106.0233 0 Tp
TP
84.529393 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
2.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  497.7704 120.7587 m
  497.8902 125.6705 L
  497.7704 130.3428 L
  497.2912 135.0150 L
  496.5724 139.4476 L
  495.6140 143.8802 L
  494.4160 148.0732 L
  493.0982 152.1464 L
  491.4210 155.9800 L
  489.6240 159.8136 L
  487.7072 163.4077 L
  485.5507 167.0017 L
  483.1547 170.3561 L
  480.6389 173.5907 L
  478.0033 176.5857 L
  475.2479 179.5807 L
  472.3727 182.4559 L
  469.2579 185.0915 L
  466.1431 187.7271 L
  462.9085 190.2429 L
  459.5541 192.5191 L
  456.0799 194.6755 L
  452.6057 196.8319 L
  449.0116 198.7488 L
  445.4176 200.5458 L
  441.8236 202.2230 L
  437.9900 203.7804 L
  434.2762 205.2180 L
  430.4426 206.6556 L
  426.6090 207.8536 L
  422.7754 208.9318 L
  418.9418 209.8902 L
  415.1082 210.7288 L
  411.3943 211.4476 L
  407.5607 212.0466 L
  403.8469 212.5258 L
  400.0133 213.0050 L
  396.2995 213.2446 L
  392.5857 213.4842 L
  388.9917 213.4842 L
  385.3977 213.4842 L
  381.8037 213.3644 L
  378.3295 213.2446 L
  374.8552 212.8852 L
  371.5008 212.5258 L
  368.2662 212.0466 L
  365.0316 211.4476 L
  361.9168 210.8486 L
  358.9218 210.1298 L
  356.0466 209.2912 L
  353.1714 208.3328 L
  351.7338 207.8536 L
  350.2962 207.3744 L
  348.8586 206.7754 L
  347.4210 206.1764 L
  346.1032 205.5774 L
  344.7854 204.9784 L
  343.4676 204.2596 L
  342.1498 203.6606 L
  340.8319 202.9418 L
  339.5141 202.2230 L
  338.3161 201.5042 L
  336.9983 200.6656 L
  335.8003 199.9468 L
  334.4825 199.1082 L
  333.2845 198.2696 L
  332.0865 197.4309 L
  330.7687 196.5923 L
  329.5707 195.6339 L
  328.3727 194.6755 L
  327.0549 193.8369 L
  325.8569 192.7587 L
  324.5391 191.8003 L
  323.2213 190.8419 L
  321.9035 189.7637 L
  319.6273 187.9667 L
  317.3511 186.0499 L
  314.9551 184.0133 L
  312.5591 181.8569 L
  310.2829 179.5807 L
  308.0067 177.1847 L
  305.7304 174.9085 L
  303.5740 172.1531 L
  301.5374 169.3977 L
  299.6206 166.4027 L
  297.7038 163.2879 L
  296.1464 159.9334 L
  294.5890 156.4592 L
  293.5108 152.7454 L
  292.4326 148.7920 L
  291.4742 144.5990 L
  290.8752 140.1664 L
  290.6356 135.3744 L
  290.5158 130.4626 L
  290.7554 125.1913 L
  291.3544 119.6805 L
  292.3128 113.9301 L
S
U
u
  0.000 0.000 0.000 1.000 K
  382.1631 195.9933 m
  376.8918 196.4725 L
  371.8602 196.7121 L
  366.8286 196.8319 L
  362.0366 196.8319 L
  357.3644 196.5923 L
  352.8120 196.1131 L
  348.3794 195.5141 L
  344.0666 194.7953 L
  339.8735 193.8369 L
  335.9201 192.7587 L
  332.0865 191.5607 L
  328.2529 190.2429 L
  324.6589 188.8053 L
  321.3045 187.2479 L
  317.9501 185.4509 L
  314.7155 183.6539 L
  311.7205 181.7371 L
  308.7255 179.7005 L
  305.9700 177.5441 L
  303.3344 175.3877 L
  300.8186 173.1115 L
  298.4226 170.7155 L
  296.2662 168.1997 L
  294.2296 165.6839 L
  292.3128 163.0483 L
  290.3960 160.4126 L
  288.7188 157.6572 L
  287.1614 154.9018 L
  285.7238 152.0266 L
  284.4060 149.1514 L
  283.2080 146.2762 L
  282.2496 143.2812 L
  281.2912 140.2862 L
  280.4526 137.2912 L
  279.8536 134.1764 L
  279.2546 131.1814 L
  278.7754 128.1864 L
  278.4160 125.0715 L
  278.1764 122.0765 L
  278.0566 118.9617 L
  277.9368 115.9667 L
  277.9368 112.9717 L
  278.0566 109.9767 L
  278.2962 106.9817 L
  278.5358 104.1065 L
  278.8952 101.1115 L
  279.2546 98.2363 L
  279.7338 95.4809 L
  280.2130 92.7255 L
  280.6922 89.9700 L
  281.2912 87.3344 L
  282.0100 84.6988 L
  282.6090 82.1830 L
  283.3278 79.6672 L
  284.0466 77.2712 L
  284.7654 74.9950 L
  285.6040 72.8386 L
  286.3228 70.6822 L
  287.1614 68.6456 L
  287.8802 66.6090 L
  288.3594 65.5308 L
  288.9584 64.3328 L
  289.4376 63.2546 L
  289.9168 62.1764 L
  290.3960 61.2180 L
  290.8752 60.1398 L
  291.4742 59.1814 L
  291.9534 58.3428 L
  292.5524 57.3844 L
  293.1514 56.4260 L
  293.7504 55.4676 L
  294.3494 54.6290 L
  294.8286 53.6705 L
  295.5474 52.7121 L
  296.1464 51.8735 L
  296.8652 50.9151 L
  297.7038 50.0765 L
  298.4226 49.1181 L
  299.2612 48.1597 L
  300.0998 47.2013 L
  301.0582 46.2429 L
  301.8968 45.2845 L
  302.9750 44.2063 L
  303.9334 43.2479 L
  305.0116 42.1697 L
  306.9285 40.3727 L
  308.9651 38.4559 L
  311.1215 36.4193 L
  313.3977 34.5025 L
  315.7937 32.4659 L
  318.4293 30.5491 L
  321.1847 28.6323 L
  324.0599 26.7155 L
  327.1747 24.9185 L
  330.4093 23.2413 L
  333.7637 21.6839 L
  337.3577 20.2463 L
  341.0715 19.0483 L
  345.0250 17.9700 L
  349.0982 17.1314 L
  353.4110 16.4126 L
  357.8436 16.0532 L
  362.5158 15.9334 L
  367.3078 16.0532 L
  372.3394 16.5324 L
  377.4908 17.2512 L
  383.0017 18.4493 L
  388.5125 19.8869 L
  394.3827 21.8037 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  370.7820 185.2113 m
  370.5424 187.1281 L
  369.9434 189.0449 L
  368.8652 190.7221 L
  367.4276 192.1597 L
  365.7504 193.1181 L
  363.9534 193.8369 L
  362.0366 194.0765 L
  360.0000 193.8369 L
  358.2030 193.1181 L
  356.5258 192.1597 L
  355.0882 190.7221 L
  354.0100 189.0449 L
  353.4110 187.1281 L
  353.1714 185.2113 L
  353.4110 183.2945 L
  354.0100 181.3777 L
  355.0882 179.7005 L
  356.5258 178.3827 L
  358.2030 177.3045 L
  360.0000 176.5857 L
  362.0366 176.5857 L
  363.9534 176.5857 L
  365.7504 177.3045 L
  367.4276 178.3827 L
  368.8652 179.7005 L
  369.9434 181.3777 L
  370.5424 183.2945 L
  370.7820 185.2113 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 358.0832 182.2163 0 Tp
TP
84.529393 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 362.5158 178.8619 0 Tp
TP
84.529393 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  324.5391 157.7770 m
  324.2995 159.8136 L
  323.7005 161.6106 L
  322.6223 163.2879 L
  321.1847 164.7255 L
  319.5075 165.8037 L
  317.7105 166.4027 L
  315.6739 166.6423 L
  313.7571 166.4027 L
  311.8403 165.8037 L
  310.2829 164.7255 L
  308.8453 163.2879 L
  307.7671 161.6106 L
  307.1681 159.8136 L
  306.9285 157.7770 L
  307.1681 155.8602 L
  307.7671 153.9434 L
  308.8453 152.3860 L
  310.2829 150.9484 L
  311.8403 149.8702 L
  313.7571 149.2712 L
  315.6739 149.0316 L
  317.7105 149.2712 L
  319.5075 149.8702 L
  321.1847 150.9484 L
  322.6223 152.3860 L
  323.7005 153.9434 L
  324.2995 155.8602 L
  324.5391 157.7770 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 311.8403 154.7820 0 Tp
TP
84.529393 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 316.2729 151.5474 0 Tp
TP
84.529393 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  346.7022 175.7471 m
  346.4626 177.6639 L
  345.7438 179.4609 L
  344.7854 181.1381 L
  343.3478 182.5757 L
  341.6705 183.6539 L
  339.7537 184.2529 L
  337.8369 184.4925 L
  335.9201 184.2529 L
  334.0033 183.6539 L
  332.3261 182.5757 L
  331.0083 181.1381 L
  329.9301 179.4609 L
  329.2113 177.6639 L
  329.0915 175.7471 L
  329.2113 173.8303 L
  329.9301 171.9135 L
  331.0083 170.3561 L
  332.3261 168.9185 L
  334.0033 167.8403 L
  335.9201 167.2413 L
  337.8369 167.0017 L
  339.7537 167.2413 L
  341.6705 167.8403 L
  343.3478 168.9185 L
  344.7854 170.3561 L
  345.7438 171.9135 L
  346.4626 173.8303 L
  346.7022 175.7471 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 334.0033 172.7521 0 Tp
TP
84.529393 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 338.4359 169.5175 0 Tp
TP
84.529393 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  311.1215 135.0150 m
  310.8819 136.9318 L
  310.1631 138.8486 L
  309.0849 140.5258 L
  307.7671 141.9634 L
  306.0899 142.9218 L
  304.1730 143.6406 L
  302.2562 143.8802 L
  300.3394 143.6406 L
  298.4226 142.9218 L
  296.7454 141.9634 L
  295.3078 140.5258 L
  294.4692 138.8486 L
  293.7504 136.9318 L
  293.5108 135.0150 L
  293.7504 133.0982 L
  294.4692 131.1814 L
  295.3078 129.5042 L
  296.7454 128.1864 L
  298.4226 127.1082 L
  300.3394 126.3894 L
  302.2562 126.1498 L
  304.1730 126.3894 L
  306.0899 127.1082 L
  307.7671 128.1864 L
  309.0849 129.5042 L
  310.1631 131.1814 L
  310.8819 133.0982 L
  311.1215 135.0150 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 298.3028 132.0200 0 Tp
TP
84.529393 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 302.7354 128.6656 0 Tp
TP
84.529393 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  436.7920 31.8669 m
  436.5524 33.7837 L
  435.8336 35.7005 L
  434.7554 37.2579 L
  433.4376 38.6955 L
  431.7604 39.7737 L
  429.8436 40.3727 L
  427.9268 40.6123 L
  426.0100 40.3727 L
  424.0932 39.7737 L
  422.4160 38.6955 L
  420.9784 37.2579 L
  420.0200 35.7005 L
  419.3012 33.7837 L
  419.0616 31.8669 L
  419.3012 29.8303 L
  420.0200 28.0333 L
  420.9784 26.3561 L
  422.4160 24.9185 L
  424.0932 23.8403 L
  426.0100 23.2413 L
  427.9268 23.0017 L
  429.8436 23.2413 L
  431.7604 23.8403 L
  433.4376 24.9185 L
  434.7554 26.3561 L
  435.8336 28.0333 L
  436.5524 29.8303 L
  436.7920 31.8669 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 423.9734 28.8719 0 Tp
TP
84.529393 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(c\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 428.4060 25.5175 0 Tp
TP
84.529393 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  485.7903 58.9418 m
  485.5507 60.9784 L
  484.9517 62.7754 L
  483.8735 64.4526 L
  482.4359 65.8902 L
  480.8785 66.9684 L
  478.9617 67.5674 L
  477.0449 67.8070 L
  475.0083 67.5674 L
  473.2113 66.9684 L
  471.5341 65.8902 L
  470.0965 64.4526 L
  469.0183 62.7754 L
  468.4193 60.9784 L
  468.1797 58.9418 L
  468.4193 57.1448 L
  469.0183 55.2280 L
  470.0965 53.6705 L
  471.5341 52.2329 L
  473.2113 51.1547 L
  475.0083 50.5557 L
  477.0449 50.3161 L
  478.9617 50.5557 L
  480.8785 51.1547 L
  482.4359 52.2329 L
  483.8735 53.6705 L
  484.9517 55.2280 L
  485.5507 57.1448 L
  485.7903 58.9418 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 473.0915 56.0666 0 Tp
TP
84.529393 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(c\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 477.5241 52.8319 0 Tp
TP
84.529393 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  463.3877 41.0915 m
  463.1481 43.1281 L
  462.4293 44.9251 L
  461.4709 46.6023 L
  460.0333 48.0399 L
  458.3561 49.1181 L
  456.4393 49.7171 L
  454.5225 49.9567 L
  452.6057 49.7171 L
  450.6889 49.1181 L
  449.0116 48.0399 L
  447.6938 46.6023 L
  446.6156 44.9251 L
  445.8968 43.1281 L
  445.7770 41.0915 L
  445.8968 39.1747 L
  446.6156 37.2579 L
  447.6938 35.7005 L
  449.0116 34.2629 L
  450.6889 33.1847 L
  452.6057 32.5857 L
  454.5225 32.3461 L
  456.4393 32.5857 L
  458.3561 33.1847 L
  460.0333 34.2629 L
  461.4709 35.7005 L
  462.4293 37.2579 L
  463.1481 39.1747 L
  463.3877 41.0915 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 450.6889 38.0965 0 Tp
TP
84.529393 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(c\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 455.1215 34.8619 0 Tp
TP
84.529393 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  499.3278 85.6572 m
  499.0882 87.5740 L
  498.3694 89.4908 L
  497.4110 91.0483 L
  495.9734 92.4859 L
  494.2962 93.5641 L
  492.3794 94.1631 L
  490.4626 94.4027 L
  488.5458 94.1631 L
  486.6290 93.5641 L
  484.9517 92.4859 L
  483.6339 91.0483 L
  482.5557 89.4908 L
  481.8369 87.5740 L
  481.7171 85.6572 L
  481.8369 83.6206 L
  482.5557 81.8236 L
  483.6339 80.1464 L
  484.9517 78.7088 L
  486.6290 77.6306 L
  488.5458 77.0316 L
  490.4626 76.7920 L
  492.3794 77.0316 L
  494.2962 77.6306 L
  495.9734 78.7088 L
  497.4110 80.1464 L
  498.3694 81.8236 L
  499.0882 83.6206 L
  499.3278 85.6572 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 486.6290 82.6622 0 Tp
TP
84.529393 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(c\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 491.0616 79.3078 0 Tp
TP
84.529393 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  494.7754 139.8070 m
  494.5358 141.8436 L
  493.9368 143.6406 L
  492.8586 145.3178 L
  491.4210 146.7554 L
  489.8636 147.8336 L
  487.9468 148.4326 L
  486.0300 148.6722 L
  483.9933 148.4326 L
  482.1963 147.8336 L
  480.5191 146.7554 L
  479.0815 145.3178 L
  478.0033 143.6406 L
  477.4043 141.8436 L
  477.1647 139.8070 L
  477.4043 137.8902 L
  478.0033 135.9734 L
  479.0815 134.4160 L
  480.5191 132.9784 L
  482.1963 131.9002 L
  483.9933 131.3012 L
  486.0300 131.0616 L
  487.9468 131.3012 L
  489.8636 131.9002 L
  491.4210 132.9784 L
  492.8586 134.4160 L
  493.9368 135.9734 L
  494.5358 137.8902 L
  494.7754 139.8070 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 481.8369 136.8120 0 Tp
TP
84.529393 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(b\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 486.8686 133.5774 0 Tp
TP
84.529393 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  454.7621 179.5807 m
  454.5225 181.3777 L
  453.8037 183.2945 L
  452.8453 184.8519 L
  451.5275 186.1697 L
  449.8502 187.2479 L
  448.0532 187.8469 L
  446.1364 188.0865 L
  444.3394 187.8469 L
  442.4226 187.2479 L
  440.8652 186.1697 L
  439.5474 184.8519 L
  438.4692 183.2945 L
  437.8702 181.3777 L
  437.6306 179.5807 L
  437.8702 177.6639 L
  438.4692 175.9867 L
  439.5474 174.3095 L
  440.8652 172.9917 L
  442.4226 172.0333 L
  444.3394 171.3145 L
  446.1364 171.0749 L
  448.0532 171.3145 L
  449.8502 172.0333 L
  451.5275 172.9917 L
  452.8453 174.3095 L
  453.8037 175.9867 L
  454.5225 177.6639 L
  454.7621 179.5807 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 441.9434 176.5857 0 Tp
TP
84.529393 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(b\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 446.9750 173.3511 0 Tp
TP
84.529393 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  477.1647 162.3295 m
  476.9251 164.2463 L
  476.3261 166.1631 L
  475.2479 167.8403 L
  473.8103 169.1581 L
  472.1331 170.2363 L
  470.3361 170.9551 L
  468.4193 171.0749 L
  466.3827 170.9551 L
  464.5857 170.2363 L
  462.9085 169.1581 L
  461.4709 167.8403 L
  460.5125 166.1631 L
  459.7937 164.2463 L
  459.5541 162.3295 L
  459.7937 160.4126 L
  460.5125 158.4958 L
  461.4709 156.8186 L
  462.9085 155.5008 L
  464.5857 154.4226 L
  466.3827 153.8236 L
  468.4193 153.5840 L
  470.3361 153.8236 L
  472.1331 154.4226 L
  473.8103 155.5008 L
  475.2479 156.8186 L
  476.3261 158.4958 L
  476.9251 160.4126 L
  477.1647 162.3295 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 464.2263 159.3344 0 Tp
TP
84.529393 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(b\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 469.2579 155.9800 0 Tp
TP
84.529393 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  427.6872 188.4459 m
  427.4476 190.3627 L
  426.8486 192.1597 L
  425.8902 193.7171 L
  424.4526 195.1547 L
  422.8952 196.1131 L
  421.0982 196.7121 L
  419.1814 196.9517 L
  417.2646 196.7121 L
  415.4676 196.1131 L
  413.9101 195.1547 L
  412.4725 193.7171 L
  411.6339 192.1597 L
  411.0349 190.3627 L
  410.7953 188.4459 L
  411.0349 186.5291 L
  411.6339 184.7321 L
  412.4725 183.1747 L
  413.9101 181.7371 L
  415.4676 180.7787 L
  417.2646 180.1797 L
  419.1814 179.9401 L
  421.0982 180.1797 L
  422.8952 180.7787 L
  424.4526 181.7371 L
  425.8902 183.1747 L
  426.8486 184.7321 L
  427.4476 186.5291 L
  427.6872 188.4459 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 414.9884 185.4509 0 Tp
TP
84.529393 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(b\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 420.0200 182.0965 0 Tp
TP
84.529393 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  296.3860 79.4276 m
  296.6256 77.3910 L
  297.3444 75.4742 L
  298.4226 73.7970 L
  299.7404 72.3594 L
  301.5374 71.2812 L
  303.4542 70.6822 L
  305.3710 70.4426 L
  307.4077 70.6822 L
  309.3245 71.2812 L
  311.0017 72.3594 L
  312.4393 73.7970 L
  313.5175 75.4742 L
  314.1165 77.3910 L
  314.3561 79.4276 L
  314.1165 81.3444 L
  313.5175 83.2612 L
  312.4393 84.9384 L
  311.0017 86.3760 L
  309.3245 87.4542 L
  307.4077 88.1730 L
  305.3710 88.4126 L
  303.4542 88.1730 L
  301.5374 87.4542 L
  299.7404 86.3760 L
  298.4226 84.9384 L
  297.3444 83.2612 L
  296.6256 81.3444 L
  296.3860 79.4276 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 301.1780 76.4326 0 Tp
TP
84.529393 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(d\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 306.2097 73.0782 0 Tp
TP
84.529393 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  333.5241 36.6589 m
  333.7637 34.6223 L
  334.4825 32.7055 L
  335.5607 30.9085 L
  336.9983 29.4709 L
  338.7953 28.3927 L
  340.7121 27.6739 L
  342.7488 27.4343 L
  344.7854 27.6739 L
  346.7022 28.3927 L
  348.4992 29.4709 L
  349.9368 30.9085 L
  351.0150 32.7055 L
  351.7338 34.6223 L
  351.9734 36.6589 L
  351.7338 38.8153 L
  351.0150 40.7321 L
  349.9368 42.4093 L
  348.4992 43.9667 L
  346.7022 45.0449 L
  344.7854 45.7637 L
  342.7488 45.8835 L
  340.7121 45.7637 L
  338.7953 45.0449 L
  336.9983 43.9667 L
  335.5607 42.4093 L
  334.4825 40.7321 L
  333.7637 38.8153 L
  333.5241 36.6589 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 338.5557 33.6639 0 Tp
TP
84.529393 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(d\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 343.5874 30.4293 0 Tp
TP
84.529393 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  310.2829 56.6656 m
  310.5225 54.7488 L
  311.2413 52.9517 L
  312.1997 51.2745 L
  313.6373 49.8369 L
  315.3145 48.7587 L
  317.1115 48.1597 L
  319.1481 47.9201 L
  321.0649 48.1597 L
  322.9817 48.7587 L
  324.6589 49.8369 L
  325.9767 51.2745 L
  327.0549 52.9517 L
  327.6539 54.7488 L
  327.8935 56.6656 L
  327.6539 58.7022 L
  327.0549 60.3794 L
  325.9767 62.0566 L
  324.6589 63.4942 L
  322.9817 64.5724 L
  321.0649 65.1714 L
  319.1481 65.4110 L
  317.1115 65.1714 L
  315.3145 64.5724 L
  313.6373 63.4942 L
  312.1997 62.0566 L
  311.2413 60.3794 L
  310.5225 58.7022 L
  310.2829 56.6656 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 314.9551 53.6705 0 Tp
TP
84.529393 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(d\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 319.9867 50.4359 0 Tp
TP
84.529393 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  360.8386 27.6739 m
  361.0782 25.7571 L
  361.6772 23.8403 L
  362.7554 22.1631 L
  364.1930 20.7255 L
  365.7504 19.7671 L
  367.6672 19.0483 L
  369.5840 18.8087 L
  371.6206 19.0483 L
  373.4176 19.7671 L
  375.0948 20.7255 L
  376.5324 22.1631 L
  377.6106 23.8403 L
  378.2097 25.7571 L
  378.4493 27.6739 L
  378.2097 29.5907 L
  377.6106 31.5075 L
  376.5324 33.1847 L
  375.0948 34.5025 L
  373.4176 35.5807 L
  371.6206 36.2995 L
  369.5840 36.4193 L
  367.6672 36.2995 L
  365.7504 35.5807 L
  364.1930 34.5025 L
  362.7554 33.1847 L
  361.6772 31.5075 L
  361.0782 29.5907 L
  360.8386 27.6739 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 365.3910 24.6789 0 Tp
TP
84.529393 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(d\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 370.4226 21.3245 0 Tp
TP
84.529393 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  219.9534 67.8070 m
  220.1930 69.9634 L
  220.9118 72.0000 L
  221.9900 73.9168 L
  223.4276 75.4742 L
  225.1048 76.7920 L
  227.1414 77.6306 L
  229.1780 78.1098 L
  231.4542 78.1098 L
  233.4908 77.6306 L
  235.5275 76.7920 L
  237.2047 75.4742 L
  238.6423 73.9168 L
  239.7205 72.0000 L
  240.4393 69.9634 L
  240.6789 67.8070 L
  240.4393 65.6506 L
  239.7205 63.6140 L
  238.6423 61.6972 L
  237.2047 60.1398 L
  235.5275 58.8220 L
  233.4908 58.1032 L
  231.4542 57.6240 L
  229.1780 57.6240 L
  227.1414 58.1032 L
  225.1048 58.8220 L
  223.4276 60.1398 L
  221.9900 61.6972 L
  220.9118 63.6140 L
  220.1930 65.6506 L
  219.9534 67.8070 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 225.3444 64.2130 0 Tp
TP
85.019893 Tz
/_Times-Roman 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(d\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 231.3344 60.2596 0 Tp
TP
87.008261 Tz
/_Times-Roman 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
1 j
  1.4376 118.7221 m
  28.3927 118.7221 L
  28.3927 130.7022 L
  1.4376 130.7022 L
  1.4376 118.7221 L
F
U
0 To
1.0000 0.0000 0.0000 1.0000 8.3860 121.1181 0 Tp
TP
102.023871 Tz
/_Helvetica-Bold 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(C\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 17.0116 117.1647 0 Tp
TP
103.120902 Tz
/_Helvetica-Bold 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
 @endspecial 315 1779 a Fl(Fig.)30 b(3.)h(A)g(logical)f(top)s(ology)g
(\(left\),)i(and)d(the)i(no)s(des)e(on)i(the)f(ph)m(ysical)f(ring)g
(\(righ)m(t\).)910 3518 y @beginspecial 0 @llx 0 @lly
249 @urx 223 @ury 2160 @rwi @setspecial
%%BeginDocument: fig/fig2EdgeIn4EdgeRevised.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: D:\papers\IS\fig\fig2EdgeIn4EdgeRevised.ps
%%CreationDate: () ()
%%BoundingBox: 0 0 249 223
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 249 223
%AI3_TileBox: 0 0 249 223
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

u
  0.000 0.000 0.000 0.000 k
 [] 0 d
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  150.1098 173.1115 m
  150.3494 176.8253 L
  151.0682 180.2995 L
  152.2662 183.7737 L
  153.8236 187.1281 L
  155.8602 190.2429 L
  158.3760 193.2379 L
  161.1314 195.8735 L
  164.3661 198.1498 L
  167.6007 200.1864 L
  171.3145 201.8636 L
  175.1481 203.0616 L
  179.2213 203.9002 L
  183.2945 204.2596 L
  187.3677 204.2596 L
  191.4409 203.9002 L
  195.3943 203.0616 L
  199.2280 201.8636 L
  202.9418 200.1864 L
  206.4160 198.1498 L
  209.5308 195.8735 L
  212.4060 193.2379 L
  214.8020 190.2429 L
  216.8386 187.1281 L
  218.5158 183.7737 L
  219.7138 180.2995 L
  220.4326 176.8253 L
  220.6722 173.1115 L
  220.4326 169.5175 L
  219.7138 166.0433 L
  218.5158 162.5691 L
  216.8386 159.2146 L
  214.8020 156.0998 L
  212.4060 153.2246 L
  209.5308 150.5890 L
  206.4160 148.1930 L
  202.9418 146.2762 L
  199.2280 144.5990 L
  195.3943 143.4010 L
  191.4409 142.5624 L
  187.3677 142.0832 L
  183.2945 142.0832 L
  179.2213 142.5624 L
  175.1481 143.4010 L
  171.3145 144.5990 L
  167.6007 146.2762 L
  164.3661 148.1930 L
  161.1314 150.5890 L
  158.3760 153.2246 L
  155.8602 156.0998 L
  153.8236 159.2146 L
  152.2662 162.5691 L
  151.0682 166.0433 L
  150.3494 169.5175 L
  150.1098 173.1115 L
B
U
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  196.4725 198.6290 m
  196.5923 200.5458 L
  197.1913 202.3428 L
  198.1498 204.0200 L
  199.4676 205.3378 L
  201.0250 206.2962 L
  202.7022 207.0150 L
  204.4992 207.2546 L
  206.2962 207.0150 L
  207.9734 206.2962 L
  209.5308 205.3378 L
  210.8486 204.0200 L
  211.8070 202.3428 L
  212.4060 200.5458 L
  212.5258 198.6290 L
  212.4060 196.8319 L
  211.8070 195.0349 L
  210.8486 193.3577 L
  209.5308 192.0399 L
  207.9734 190.9617 L
  206.2962 190.3627 L
  204.4992 190.1231 L
  202.7022 190.3627 L
  201.0250 190.9617 L
  199.4676 192.0399 L
  198.1498 193.3577 L
  197.1913 195.0349 L
  196.5923 196.8319 L
  196.4725 198.6290 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 200.6656 195.6339 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 205.0982 192.3993 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  173.5907 202.9418 m
  173.8303 204.8586 L
  174.4293 206.6556 L
  175.3877 208.2130 L
  176.7055 209.6506 L
  178.1431 210.6090 L
  179.9401 211.2080 L
  181.6173 211.4476 L
  183.4143 211.2080 L
  185.2113 210.6090 L
  186.6489 209.6506 L
  187.9667 208.2130 L
  188.9251 206.6556 L
  189.5241 204.8586 L
  189.7637 202.9418 L
  189.5241 201.0250 L
  188.9251 199.2280 L
  187.9667 197.6705 L
  186.6489 196.2329 L
  185.2113 195.2745 L
  183.4143 194.6755 L
  181.6173 194.4359 L
  179.9401 194.6755 L
  178.1431 195.2745 L
  176.7055 196.2329 L
  175.3877 197.6705 L
  174.4293 199.2280 L
  173.8303 201.0250 L
  173.5907 202.9418 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 177.7837 199.9468 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 182.2163 196.5923 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  150.9484 192.9983 m
  151.0682 194.9151 L
  151.6672 196.7121 L
  152.6256 198.2696 L
  153.9434 199.7072 L
  155.5008 200.6656 L
  157.1780 201.2646 L
  158.9750 201.5042 L
  160.7720 201.2646 L
  162.4493 200.6656 L
  164.0067 199.7072 L
  165.3245 198.2696 L
  166.2829 196.7121 L
  166.7621 194.9151 L
  166.8819 192.9983 L
  166.7621 191.0815 L
  166.2829 189.2845 L
  165.3245 187.7271 L
  164.0067 186.4093 L
  162.4493 185.3311 L
  160.7720 184.7321 L
  158.9750 184.4925 L
  157.1780 184.7321 L
  155.5008 185.3311 L
  153.9434 186.4093 L
  152.6256 187.7271 L
  151.6672 189.2845 L
  151.0682 191.0815 L
  150.9484 192.9983 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 155.0216 190.0033 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 159.4542 186.6489 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  140.1664 170.3561 m
  140.4060 172.1531 L
  141.0050 173.9501 L
  141.9634 175.6273 L
  143.1614 176.9451 L
  144.7188 178.0233 L
  146.3960 178.6223 L
  148.1930 178.8619 L
  149.9900 178.6223 L
  151.6672 178.0233 L
  153.2246 176.9451 L
  154.5424 175.6273 L
  155.5008 173.9501 L
  156.0998 172.1531 L
  156.3394 170.3561 L
  156.0998 168.4393 L
  155.5008 166.7621 L
  154.5424 165.0849 L
  153.2246 163.7671 L
  151.6672 162.8087 L
  149.9900 162.0899 L
  148.1930 161.9700 L
  146.3960 162.0899 L
  144.7188 162.8087 L
  143.1614 163.7671 L
  141.9634 165.0849 L
  141.0050 166.7621 L
  140.4060 168.4393 L
  140.1664 170.3561 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 144.3594 167.3611 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 148.7920 164.1265 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  209.8902 178.8619 m
  210.1298 180.6589 L
  210.7288 182.5757 L
  211.6872 184.1331 L
  212.8852 185.4509 L
  214.4426 186.5291 L
  216.1198 187.1281 L
  217.9168 187.3677 L
  219.7138 187.1281 L
  221.3910 186.5291 L
  222.9484 185.4509 L
  224.2662 184.1331 L
  225.2246 182.5757 L
  225.8236 180.6589 L
  225.9434 178.8619 L
  225.8236 176.9451 L
  225.2246 175.1481 L
  224.2662 173.4709 L
  222.9484 172.1531 L
  221.3910 171.1947 L
  219.7138 170.4759 L
  217.9168 170.3561 L
  216.1198 170.4759 L
  214.4426 171.1947 L
  212.8852 172.1531 L
  211.6872 173.4709 L
  210.7288 175.1481 L
  210.1298 176.9451 L
  209.8902 178.8619 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 214.0832 175.8669 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 218.5158 172.5125 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  153.5840 149.1514 m
  153.8236 151.0682 L
  154.4226 152.8652 L
  155.3810 154.4226 L
  156.5790 155.8602 L
  158.1364 156.8186 L
  159.8136 157.4176 L
  161.6106 157.6572 L
  163.4077 157.4176 L
  165.2047 156.8186 L
  166.6423 155.8602 L
  167.8403 154.4226 L
  168.7987 152.8652 L
  169.3977 151.0682 L
  169.6373 149.1514 L
  169.3977 147.2346 L
  168.7987 145.4376 L
  167.8403 143.8802 L
  166.6423 142.4426 L
  165.2047 141.4842 L
  163.4077 140.8852 L
  161.6106 140.6456 L
  159.8136 140.8852 L
  158.1364 141.4842 L
  156.5790 142.4426 L
  155.3810 143.8802 L
  154.4226 145.4376 L
  153.8236 147.2346 L
  153.5840 149.1514 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 157.7770 146.1564 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 162.2097 142.8020 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
1.0000 w
  0.000 0.000 0.000 1.000 K
1 J
1 j
  163.0483 200.4260 m
  163.8869 203.7804 L
  164.9651 206.8952 L
  166.4027 209.5308 L
  168.0799 211.6872 L
  169.8769 213.6040 L
  172.0333 215.0416 L
  174.1897 216.1198 L
  176.5857 216.8386 L
  178.9817 217.1980 L
  181.3777 217.1980 L
  183.8935 216.8386 L
  186.2895 216.1198 L
  188.6855 215.0416 L
  191.0815 213.6040 L
  193.2379 211.9268 L
  195.2745 209.7704 L
  197.0715 207.3744 L
  198.7488 204.6190 L
S
U
u
  0.000 0.000 0.000 1.000 K
  185.6905 210.3694 m
  186.7687 210.8486 L
  188.0865 211.2080 L
  189.2845 211.5674 L
  190.7221 211.8070 L
  192.1597 211.8070 L
  193.7171 211.8070 L
  195.2745 211.8070 L
  196.9517 211.5674 L
  198.6290 211.3278 L
  200.3062 211.0882 L
  201.9834 210.6090 L
  203.7804 210.1298 L
  205.4576 209.6506 L
  207.1348 209.0516 L
  208.8120 208.4526 L
  210.4892 207.7338 L
  212.0466 207.0150 L
  213.6040 206.2962 L
  215.0416 205.4576 L
  216.9584 204.2596 L
  218.8752 202.9418 L
  220.5524 201.6240 L
  221.9900 200.3062 L
  223.4276 198.8686 L
  224.7454 197.4309 L
  225.8236 195.9933 L
  226.9018 194.4359 L
  227.8602 192.8785 L
  228.6988 191.3211 L
  229.4176 189.7637 L
  230.0166 188.2063 L
  230.4958 186.6489 L
  230.9750 185.0915 L
  231.3344 183.5341 L
  231.5740 181.9767 L
  231.8136 180.4193 L
  232.0532 178.8619 L
  232.0532 177.3045 L
  232.1730 175.2679 L
  232.0532 173.2313 L
  231.9334 171.3145 L
  231.6938 169.3977 L
  231.4542 167.6007 L
  231.0948 165.9235 L
  230.6156 164.1265 L
  230.1364 162.4493 L
  229.5374 160.8918 L
  228.9384 159.3344 L
  228.2196 157.8968 L
  227.5008 156.4592 L
  226.7820 155.0216 L
  226.0632 153.7038 L
  225.3444 152.5058 L
  224.5058 151.3078 L
  223.6672 150.2296 L
  223.0682 149.3910 L
  222.3494 148.5524 L
  221.7504 147.7138 L
  221.0316 146.9950 L
  220.3128 146.2762 L
  219.5940 145.5574 L
  218.7554 144.8386 L
  217.9168 144.1198 L
  217.0782 143.5208 L
  216.2396 142.8020 L
  215.2812 142.2030 L
  214.2030 141.4842 L
  213.1248 140.7654 L
  212.1664 140.2862 L
  211.2080 139.6872 L
  210.1298 139.0882 L
  209.0516 138.4892 L
  207.8536 137.8902 L
  206.6556 137.4110 L
  205.3378 136.8120 L
  204.0200 136.2130 L
  202.7022 135.7338 L
  201.2646 135.2546 L
  199.8270 134.7754 L
  198.3894 134.4160 L
  195.9933 133.8170 L
  193.5973 133.3378 L
  190.9617 132.8586 L
  188.4459 132.4992 L
  185.8103 132.2596 L
  183.1747 132.1398 L
  180.5391 132.1398 L
  177.9035 132.1398 L
  175.3877 132.2596 L
  172.7521 132.6190 L
  170.3561 132.9784 L
  167.9601 133.4576 L
  167.0017 133.6972 L
  166.1631 133.9368 L
  165.3245 134.1764 L
  164.3661 134.4160 L
  163.5275 134.7754 L
  162.6889 135.1348 L
  161.7304 135.4942 L
  160.8918 135.8536 L
  160.0532 136.3328 L
  159.2146 136.6922 L
  158.3760 137.1714 L
  157.5374 137.6506 L
  155.5008 139.0882 L
  153.4642 140.6456 L
  151.4276 142.4426 L
  149.6306 144.3594 L
  147.9534 146.3960 L
  146.3960 148.6722 L
  145.0782 150.9484 L
  144.0000 153.4642 L
  143.1614 156.0998 L
  142.5624 158.7354 L
  142.3228 161.6106 L
  142.4426 164.4859 L
S
U
u
  0.000 0.000 0.000 1.000 K
  191.3211 207.3744 m
  195.1547 201.2646 L
S
U
u
  0.000 0.000 0.000 1.000 K
  195.1547 207.3744 m
  191.3211 201.2646 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  18.0899 174.0699 m
  18.3295 177.6639 L
  19.0483 181.2579 L
  20.2463 184.7321 L
  21.8037 188.0865 L
  23.8403 191.3211 L
  26.2363 194.1963 L
  28.9917 196.9517 L
  31.9867 199.3478 L
  35.4609 201.5042 L
  39.0549 203.1814 L
  42.8885 204.6190 L
  46.8419 205.5774 L
  50.9151 206.2962 L
  55.1082 206.4160 L
  59.0616 206.2962 L
  63.1348 205.5774 L
  67.0882 204.6190 L
  70.9218 203.1814 L
  74.6356 201.5042 L
  77.9900 199.3478 L
  81.1048 196.9517 L
  83.8602 194.1963 L
  86.2562 191.3211 L
  88.1730 188.0865 L
  89.8502 184.7321 L
  90.9285 181.2579 L
  91.6473 177.6639 L
  91.8869 174.0699 L
  91.6473 170.3561 L
  90.9285 166.7621 L
  89.8502 163.4077 L
  88.1730 160.0532 L
  86.2562 156.9384 L
  83.8602 153.9434 L
  81.1048 151.1880 L
  77.9900 148.7920 L
  74.6356 146.6356 L
  70.9218 144.9584 L
  67.0882 143.5208 L
  63.1348 142.5624 L
  59.0616 141.9634 L
  55.1082 141.7238 L
  50.9151 141.9634 L
  46.8419 142.5624 L
  42.8885 143.5208 L
  39.0549 144.9584 L
  35.4609 146.6356 L
  31.9867 148.7920 L
  28.9917 151.1880 L
  26.2363 153.9434 L
  23.8403 156.9384 L
  21.8037 160.0532 L
  20.2463 163.4077 L
  19.0483 166.7621 L
  18.3295 170.3561 L
  18.0899 174.0699 L
B
U
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  66.6090 200.5458 m
  66.8486 202.4626 L
  67.4476 204.3794 L
  68.4060 206.0566 L
  69.7238 207.4942 L
  71.4010 208.5724 L
  73.1980 209.1714 L
  74.9950 209.4110 L
  76.9118 209.1714 L
  78.7088 208.5724 L
  80.2662 207.4942 L
  81.5840 206.0566 L
  82.6622 204.3794 L
  83.2612 202.4626 L
  83.5008 200.5458 L
  83.2612 198.6290 L
  82.6622 196.7121 L
  81.5840 195.0349 L
  80.2662 193.5973 L
  78.7088 192.6389 L
  76.9118 191.9201 L
  74.9950 191.6805 L
  73.1980 191.9201 L
  71.4010 192.6389 L
  69.7238 193.5973 L
  68.4060 195.0349 L
  67.4476 196.7121 L
  66.8486 198.6290 L
  66.6090 200.5458 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 71.1614 197.5507 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 75.5940 194.1963 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  42.8885 204.9784 m
  43.1281 206.8952 L
  43.7271 208.8120 L
  44.6855 210.4892 L
  46.0033 211.9268 L
  47.6805 212.8852 L
  49.3577 213.6040 L
  51.2745 213.8436 L
  53.1913 213.6040 L
  54.9884 212.8852 L
  56.4260 211.9268 L
  57.7438 210.4892 L
  58.7022 208.8120 L
  59.4210 206.8952 L
  59.5408 204.9784 L
  59.4210 203.0616 L
  58.7022 201.1448 L
  57.7438 199.4676 L
  56.4260 198.0300 L
  54.9884 196.9517 L
  53.1913 196.3527 L
  51.2745 196.1131 L
  49.3577 196.3527 L
  47.6805 196.9517 L
  46.0033 198.0300 L
  44.6855 199.4676 L
  43.7271 201.1448 L
  43.1281 203.0616 L
  42.8885 204.9784 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 47.4409 201.9834 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 51.8735 198.6290 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  19.0483 194.6755 m
  19.1681 196.5923 L
  19.7671 198.5092 L
  20.8453 200.1864 L
  22.1631 201.6240 L
  23.7205 202.5824 L
  25.5175 203.3012 L
  27.4343 203.5408 L
  29.2313 203.3012 L
  31.0283 202.5824 L
  32.7055 201.6240 L
  34.0233 200.1864 L
  34.9817 198.5092 L
  35.5807 196.5923 L
  35.8203 194.6755 L
  35.5807 192.6389 L
  34.9817 190.8419 L
  34.0233 189.1647 L
  32.7055 187.7271 L
  31.0283 186.6489 L
  29.2313 186.0499 L
  27.4343 185.8103 L
  25.5175 186.0499 L
  23.7205 186.6489 L
  22.1631 187.7271 L
  20.8453 189.1647 L
  19.7671 190.8419 L
  19.1681 192.6389 L
  19.0483 194.6755 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 23.4809 191.6805 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 27.9135 188.3261 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  7.7870 171.0749 m
  8.0266 172.9917 L
  8.6256 174.9085 L
  9.5840 176.5857 L
  10.9018 178.0233 L
  12.5790 178.9817 L
  14.2562 179.7005 L
  16.1730 179.9401 L
  18.0899 179.7005 L
  19.8869 178.9817 L
  21.4443 178.0233 L
  22.7621 176.5857 L
  23.7205 174.9085 L
  24.4393 172.9917 L
  24.5591 171.0749 L
  24.4393 169.1581 L
  23.7205 167.2413 L
  22.7621 165.6839 L
  21.4443 164.2463 L
  19.8869 163.1681 L
  18.0899 162.5691 L
  16.1730 162.3295 L
  14.2562 162.5691 L
  12.5790 163.1681 L
  10.9018 164.2463 L
  9.5840 165.6839 L
  8.6256 167.2413 L
  8.0266 169.1581 L
  7.7870 171.0749 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 12.3394 168.0799 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 16.7720 164.8453 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  80.6256 179.9401 m
  80.8652 181.8569 L
  81.4642 183.7737 L
  82.4226 185.4509 L
  83.8602 186.8885 L
  85.4176 187.8469 L
  87.2146 188.5657 L
  89.0116 188.8053 L
  90.9285 188.5657 L
  92.7255 187.8469 L
  94.2829 186.8885 L
  95.6007 185.4509 L
  96.6789 183.7737 L
  97.2779 181.8569 L
  97.5175 179.9401 L
  97.2779 177.9035 L
  96.6789 176.1065 L
  95.6007 174.4293 L
  94.2829 172.9917 L
  92.7255 171.9135 L
  90.9285 171.3145 L
  89.0116 171.0749 L
  87.2146 171.3145 L
  85.4176 171.9135 L
  83.8602 172.9917 L
  82.4226 174.4293 L
  81.4642 176.1065 L
  80.8652 177.9035 L
  80.6256 179.9401 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 85.1780 176.9451 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 89.6106 173.5907 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  21.8037 149.0316 m
  22.0433 151.0682 L
  22.6423 152.8652 L
  23.6007 154.5424 L
  24.9185 155.9800 L
  26.5957 157.0582 L
  28.3927 157.6572 L
  30.1897 157.8968 L
  32.1065 157.6572 L
  33.9035 157.0582 L
  35.4609 155.9800 L
  36.7787 154.5424 L
  37.8569 152.8652 L
  38.4559 151.0682 L
  38.6955 149.0316 L
  38.4559 147.1148 L
  37.8569 145.1980 L
  36.7787 143.5208 L
  35.4609 142.2030 L
  33.9035 141.1248 L
  32.1065 140.4060 L
  30.1897 140.2862 L
  28.3927 140.4060 L
  26.5957 141.1248 L
  24.9185 142.2030 L
  23.6007 143.5208 L
  22.6423 145.1980 L
  22.0433 147.1148 L
  21.8037 149.0316 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 26.3561 146.0366 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 30.7887 142.8020 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  16.1730 179.9401 m
  14.2562 182.6955 L
  12.8186 185.5707 L
  11.7404 188.3261 L
  11.1414 191.0815 L
  10.9018 193.7171 L
  11.1414 196.3527 L
  11.6206 198.8686 L
  12.5790 201.1448 L
  13.8968 203.3012 L
  15.5740 205.2180 L
  17.6106 207.0150 L
  19.8869 208.4526 L
  22.5225 209.5308 L
  25.3977 210.3694 L
  28.5125 210.8486 L
  31.9867 210.9684 L
  35.5807 210.6090 L
  39.5341 209.8902 L
  43.6073 208.6922 L
S
U
u
  0.000 0.000 0.000 1.000 K
  31.6273 202.3428 m
  32.4659 205.8170 L
  33.5441 208.9318 L
  34.8619 211.5674 L
  36.5391 213.8436 L
  38.3361 215.7604 L
  40.3727 217.3178 L
  42.5291 218.5158 L
  44.8053 219.3544 L
  47.2013 219.8336 L
  49.5973 219.9534 L
  52.1131 219.7138 L
  54.5092 219.2346 L
  56.7854 218.2762 L
  59.1814 217.0782 L
  61.4576 215.6406 L
  63.6140 213.8436 L
  65.6506 211.8070 L
  67.4476 209.4110 L
  69.0050 206.6556 L
S
U
u
  0.000 0.000 0.000 1.000 K
  35.5807 204.9784 m
  41.4509 200.5458 L
S
U
u
  0.000 0.000 0.000 1.000 K
  39.4143 206.4160 m
  37.7371 199.1082 L
S
U
u
  0.000 0.000 0.000 1.000 K
  190.6023 100.2729 m
  192.8785 100.7521 L
  195.0349 101.1115 L
  197.1913 101.3511 L
  199.3478 101.5907 L
  201.2646 101.7105 L
  203.3012 101.7105 L
  205.2180 101.7105 L
  207.1348 101.5907 L
  208.9318 101.3511 L
  210.7288 101.1115 L
  212.4060 100.8719 L
  214.0832 100.5125 L
  215.6406 100.0333 L
  217.1980 99.5541 L
  218.7554 99.0749 L
  220.1930 98.4759 L
  221.5108 97.8769 L
  222.9484 97.1581 L
  224.2662 96.4393 L
  226.0632 95.3611 L
  227.7404 94.1631 L
  229.2978 92.9651 L
  230.7354 91.6473 L
  232.1730 90.3295 L
  233.4908 88.8918 L
  234.6889 87.3344 L
  235.8869 85.8968 L
  236.8453 84.3394 L
  237.8037 82.6622 L
  238.7621 81.1048 L
  239.4809 79.4276 L
  240.1997 77.7504 L
  240.9185 76.0732 L
  241.3977 74.3960 L
  241.8769 72.7188 L
  242.3561 71.0416 L
  242.7155 69.3644 L
  242.9551 67.6872 L
  243.1947 65.5308 L
  243.3145 63.3744 L
  243.4343 61.3378 L
  243.3145 59.3012 L
  243.1947 57.2646 L
  242.9551 55.3478 L
  242.5957 53.4309 L
  242.1165 51.5141 L
  241.6373 49.7171 L
  241.0383 47.9201 L
  240.4393 46.1231 L
  239.7205 44.3261 L
  238.8819 42.6489 L
  238.0433 40.9717 L
  237.2047 39.4143 L
  236.2463 37.8569 L
  235.2879 36.2995 L
  234.3295 34.8619 L
  233.3710 33.6639 L
  232.5324 32.4659 L
  231.5740 31.2679 L
  230.6156 30.1897 L
  229.6572 29.1115 L
  228.8186 28.0333 L
  227.8602 27.0749 L
  226.9018 26.1165 L
  225.9434 25.1581 L
  224.9850 24.3195 L
  224.0266 23.4809 L
  223.0682 22.6423 L
  222.2296 21.8037 L
  221.3910 21.2047 L
  220.6722 20.6057 L
  219.9534 20.1265 L
  219.2346 19.5275 L
  218.3960 19.0483 L
  217.5574 18.5691 L
  216.8386 18.0899 L
  215.8802 17.6106 L
  215.0416 17.1314 L
  214.0832 16.6522 L
  213.1248 16.1730 L
  212.0466 15.6938 L
  210.7288 15.0948 L
  209.2912 14.6156 L
  207.8536 14.1364 L
  206.2962 13.5374 L
  204.6190 13.1780 L
  202.9418 12.6988 L
  201.1448 12.3394 L
  199.3478 11.9800 L
  197.3111 11.7404 L
  195.3943 11.5008 L
  193.3577 11.3810 L
  191.2013 11.2612 L
  189.0449 11.3810 L
  186.7687 11.5008 L
  184.4925 11.7404 L
  182.0965 12.0998 L
  181.1381 12.3394 L
  180.2995 12.4592 L
  179.3411 12.6988 L
  178.3827 12.9384 L
  177.4243 13.1780 L
  176.5857 13.4176 L
  175.6273 13.7770 L
  174.6689 14.0166 L
  173.7105 14.3760 L
  172.8719 14.7354 L
  171.9135 15.0948 L
  171.0749 15.4542 L
  170.1165 15.8136 L
  169.2779 16.2928 L
  168.4393 16.6522 L
  167.6007 17.1314 L
  166.7621 17.6106 L
  164.8453 18.9285 L
  162.9285 20.2463 L
  161.1314 21.8037 L
  159.4542 23.3611 L
  157.8968 25.0383 L
  156.3394 26.8353 L
  155.0216 28.7521 L
  153.8236 30.6689 L
  152.6256 32.5857 L
  151.6672 34.6223 L
  150.7088 36.6589 L
  149.8702 38.8153 L
  149.0316 40.9717 L
  148.4326 43.2479 L
  147.8336 45.4043 L
  147.3544 47.6805 L
  146.9950 49.9567 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  14.8552 62.5358 m
  15.0948 66.2496 L
  15.6938 69.9634 L
  16.8918 73.5574 L
  18.4493 77.0316 L
  20.3661 80.2662 L
  22.7621 83.2612 L
  25.5175 86.0166 L
  28.5125 88.5324 L
  31.8669 90.6889 L
  35.4609 92.4859 L
  39.1747 93.9235 L
  43.1281 94.8819 L
  47.2013 95.6007 L
  51.2745 95.7205 L
  55.3478 95.6007 L
  59.1814 94.8819 L
  63.1348 93.9235 L
  66.8486 92.4859 L
  70.4426 90.6889 L
  73.7970 88.5324 L
  76.7920 86.0166 L
  79.5474 83.2612 L
  81.9434 80.2662 L
  83.8602 77.0316 L
  85.4176 73.5574 L
  86.6156 69.9634 L
  87.2146 66.2496 L
  87.4542 62.5358 L
  87.2146 58.8220 L
  86.6156 55.3478 L
  85.4176 51.7537 L
  83.8602 48.2795 L
  81.9434 45.0449 L
  79.5474 42.0499 L
  76.7920 39.1747 L
  73.7970 36.7787 L
  70.4426 34.6223 L
  66.8486 32.8253 L
  63.1348 31.3877 L
  59.1814 30.3095 L
  55.3478 29.7105 L
  51.2745 29.4709 L
  47.2013 29.7105 L
  43.1281 30.3095 L
  39.1747 31.3877 L
  35.4609 32.8253 L
  31.8669 34.6223 L
  28.5125 36.7787 L
  25.5175 39.1747 L
  22.7621 42.0499 L
  20.3661 45.0449 L
  18.4493 48.2795 L
  16.8918 51.7537 L
  15.6938 55.3478 L
  15.0948 58.8220 L
  14.8552 62.5358 L
B
U
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  62.5358 89.7304 m
  62.7754 91.7671 L
  63.3744 93.6839 L
  64.4526 95.3611 L
  65.6506 96.7987 L
  67.3278 97.8769 L
  69.0050 98.5957 L
  70.9218 98.8353 L
  72.7188 98.5957 L
  74.5158 97.8769 L
  76.0732 96.7987 L
  77.3910 95.3611 L
  78.3494 93.6839 L
  78.9484 91.7671 L
  79.1880 89.7304 L
  78.9484 87.6938 L
  78.3494 85.7770 L
  77.3910 84.0998 L
  76.0732 82.6622 L
  74.5158 81.5840 L
  72.7188 80.8652 L
  70.9218 80.6256 L
  69.0050 80.8652 L
  67.3278 81.5840 L
  65.6506 82.6622 L
  64.4526 84.0998 L
  63.3744 85.7770 L
  62.7754 87.6938 L
  62.5358 89.7304 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 66.9684 86.7354 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 71.4010 83.3810 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  39.1747 94.2829 m
  39.4143 96.3195 L
  40.0133 98.2363 L
  40.9717 99.9135 L
  42.2895 101.3511 L
  43.8469 102.4293 L
  45.6439 103.0283 L
  47.4409 103.2679 L
  49.3577 103.0283 L
  51.0349 102.4293 L
  52.7121 101.3511 L
  54.0300 99.9135 L
  54.9884 98.2363 L
  55.5874 96.3195 L
  55.7072 94.2829 L
  55.5874 92.2463 L
  54.9884 90.3295 L
  54.0300 88.6522 L
  52.7121 87.2146 L
  51.0349 86.1364 L
  49.3577 85.4176 L
  47.4409 85.1780 L
  45.6439 85.4176 L
  43.8469 86.1364 L
  42.2895 87.2146 L
  40.9717 88.6522 L
  40.0133 90.3295 L
  39.4143 92.2463 L
  39.1747 94.2829 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 43.6073 91.2879 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 48.0399 87.9334 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  15.6938 83.7404 m
  15.9334 85.6572 L
  16.5324 87.5740 L
  17.4908 89.3710 L
  18.8087 90.8087 L
  20.3661 91.8869 L
  22.1631 92.4859 L
  23.9601 92.7255 L
  25.8769 92.4859 L
  27.5541 91.8869 L
  29.1115 90.8087 L
  30.4293 89.3710 L
  31.5075 87.5740 L
  32.1065 85.6572 L
  32.2263 83.7404 L
  32.1065 81.7038 L
  31.5075 79.7870 L
  30.4293 78.1098 L
  29.1115 76.6722 L
  27.5541 75.5940 L
  25.8769 74.8752 L
  23.9601 74.6356 L
  22.1631 74.8752 L
  20.3661 75.5940 L
  18.8087 76.6722 L
  17.4908 78.1098 L
  16.5324 79.7870 L
  15.9334 81.7038 L
  15.6938 83.7404 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 20.1265 80.7454 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 24.5591 77.3910 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  4.6722 59.5408 m
  4.7920 61.5774 L
  5.3910 63.4942 L
  6.4692 65.1714 L
  7.7870 66.6090 L
  9.3444 67.6872 L
  11.0216 68.4060 L
  12.9384 68.6456 L
  14.7354 68.4060 L
  16.5324 67.6872 L
  18.0899 66.6090 L
  19.4077 65.1714 L
  20.3661 63.4942 L
  20.9651 61.5774 L
  21.2047 59.5408 L
  20.9651 57.5042 L
  20.3661 55.5874 L
  19.4077 54.0300 L
  18.0899 52.5923 L
  16.5324 51.5141 L
  14.7354 50.7953 L
  12.9384 50.6755 L
  11.0216 50.7953 L
  9.3444 51.5141 L
  7.7870 52.5923 L
  6.4692 54.0300 L
  5.3910 55.5874 L
  4.7920 57.5042 L
  4.6722 59.5408 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 8.9850 56.5458 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 13.4176 53.3111 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  76.4326 68.6456 m
  76.6722 70.6822 L
  77.2712 72.4792 L
  78.2296 74.2762 L
  79.5474 75.7138 L
  81.1048 76.7920 L
  82.9018 77.3910 L
  84.6988 77.6306 L
  86.6156 77.3910 L
  88.2928 76.7920 L
  89.8502 75.7138 L
  91.1681 74.2762 L
  92.2463 72.4792 L
  92.8453 70.6822 L
  92.9651 68.6456 L
  92.8453 66.6090 L
  92.2463 64.6922 L
  91.1681 63.0150 L
  89.8502 61.5774 L
  88.2928 60.4992 L
  86.6156 59.7804 L
  84.6988 59.5408 L
  82.9018 59.7804 L
  81.1048 60.4992 L
  79.5474 61.5774 L
  78.2296 63.0150 L
  77.2712 64.6922 L
  76.6722 66.6090 L
  76.4326 68.6456 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 80.8652 65.6506 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 85.2978 62.2962 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  18.4493 37.0183 m
  18.6889 39.0549 L
  19.2879 40.9717 L
  20.2463 42.6489 L
  21.5641 44.0865 L
  23.1215 45.1647 L
  24.9185 45.8835 L
  26.7155 46.1231 L
  28.6323 45.8835 L
  30.3095 45.1647 L
  31.8669 44.0865 L
  33.1847 42.6489 L
  34.2629 40.9717 L
  34.8619 39.0549 L
  35.1015 37.0183 L
  34.8619 34.9817 L
  34.2629 33.0649 L
  33.1847 31.3877 L
  31.8669 29.9501 L
  30.3095 28.8719 L
  28.6323 28.2729 L
  26.7155 28.0333 L
  24.9185 28.2729 L
  23.1215 28.8719 L
  21.5641 29.9501 L
  20.2463 31.3877 L
  19.2879 33.0649 L
  18.6889 34.9817 L
  18.4493 37.0183 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 22.8819 34.0233 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 27.3145 30.6689 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  12.9384 68.6456 m
  11.0216 71.2812 L
  9.4642 74.0366 L
  8.5058 76.7920 L
  7.9068 79.4276 L
  7.6672 82.1830 L
  7.9068 84.6988 L
  8.3860 87.2146 L
  9.3444 89.4908 L
  10.6622 91.6473 L
  12.3394 93.6839 L
  14.2562 95.4809 L
  16.5324 96.9185 L
  19.0483 98.1165 L
  21.9235 99.0749 L
  25.0383 99.6739 L
  28.3927 99.9135 L
  32.1065 99.6739 L
  35.9401 99.0749 L
  40.0133 98.1165 L
S
U
u
  0.000 0.000 0.000 1.000 K
  14.0166 72.8386 m
  21.3245 73.4376 L
S
U
u
  0.000 0.000 0.000 1.000 K
  16.0532 76.4326 m
  19.2879 69.8436 L
S
U
u
  0.000 0.000 0.000 1.000 K
  16.4126 87.5740 m
  15.0948 86.3760 L
  13.8968 85.2978 L
  12.9384 84.3394 L
  11.9800 83.5008 L
  11.2612 82.7820 L
  10.6622 82.0632 L
  10.0632 81.3444 L
  9.5840 80.7454 L
  8.7454 79.6672 L
  8.0266 78.7088 L
  7.4276 77.7504 L
  6.8286 76.7920 L
  6.3494 75.8336 L
  5.8702 74.8752 L
  5.3910 73.9168 L
  5.0316 72.9584 L
  4.6722 72.0000 L
  4.3128 70.9218 L
  4.0732 69.8436 L
  3.9534 69.2446 L
  3.7138 68.7654 L
  3.5940 68.1664 L
  3.4742 67.6872 L
  3.3544 67.0882 L
  3.2346 66.4892 L
  3.1148 65.8902 L
  2.9950 65.2912 L
  2.8752 64.8120 L
  2.8752 64.2130 L
  2.7554 63.6140 L
  2.5158 61.5774 L
  2.3960 59.6606 L
  2.3960 57.8636 L
  2.5158 56.0666 L
  2.7554 54.5092 L
  2.9950 52.8319 L
  3.3544 51.2745 L
  3.8336 49.7171 L
  4.3128 48.1597 L
  4.9118 46.7221 L
  5.6306 45.2845 L
  6.5890 43.4875 L
  7.5474 41.6905 L
  8.6256 39.8935 L
  9.8236 38.0965 L
  11.0216 36.4193 L
  12.3394 34.7421 L
  13.7770 33.1847 L
  15.2146 31.6273 L
  16.7720 30.1897 L
  18.4493 28.8719 L
  20.1265 27.5541 L
  21.9235 26.3561 L
  23.7205 25.3977 L
  24.5591 24.9185 L
  25.3977 24.5591 L
  26.1165 24.1997 L
  26.9551 23.8403 L
  27.7937 23.6007 L
  28.6323 23.2413 L
  29.4709 23.0017 L
  30.3095 22.7621 L
  31.1481 22.4027 L
  31.8669 22.1631 L
  32.7055 22.0433 L
  33.5441 21.8037 L
  34.2629 21.5641 L
  36.0599 21.0849 L
  37.6173 20.7255 L
  39.2945 20.3661 L
  40.7321 20.0067 L
  42.1697 19.7671 L
  43.6073 19.6473 L
  44.9251 19.4077 L
  46.2429 19.2879 L
  47.5607 19.2879 L
  48.8785 19.1681 L
  50.0765 19.1681 L
  51.2745 19.1681 L
  52.5923 19.2879 L
  53.7903 19.4077 L
  55.1082 19.5275 L
  56.6656 19.7671 L
  58.4626 20.1265 L
  60.2596 20.4859 L
  62.1764 20.9651 L
  63.9734 21.4443 L
  65.7704 21.9235 L
  67.6872 22.6423 L
  69.4842 23.3611 L
  71.4010 24.0799 L
  73.1980 24.9185 L
  74.9950 25.8769 L
  76.6722 26.8353 L
  78.4692 27.9135 L
  80.1464 29.1115 L
  81.7038 30.4293 L
  83.2612 31.7471 L
  84.6988 33.1847 L
  86.1364 34.6223 L
  87.4542 36.1797 L
  88.4126 37.4975 L
  89.3710 38.8153 L
  90.2097 40.2529 L
  91.0483 41.6905 L
  91.7671 43.1281 L
  92.4859 44.5657 L
  93.0849 46.1231 L
  93.6839 47.6805 L
  94.1631 49.3577 L
  94.6423 50.9151 L
  95.0017 52.5923 L
  95.3611 54.2696 L
  95.6007 55.8270 L
  95.8403 57.6240 L
  95.9601 59.3012 L
  96.0799 60.9784 L
  96.0799 62.7754 L
  96.0799 64.4526 L
  95.9601 66.2496 L
  95.7205 67.8070 L
  95.6007 69.3644 L
  95.2413 71.0416 L
  94.8819 72.5990 L
  94.2829 74.1564 L
  93.6839 75.8336 L
  92.9651 77.5108 L
  92.0067 79.1880 L
  91.0483 80.8652 L
  89.7304 82.5424 L
  88.4126 84.3394 L
  86.8552 86.0166 L
  85.0582 87.8136 L
  83.0216 89.7304 L
  80.8652 91.6473 L
  78.3494 93.5641 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  151.1880 61.6972 m
  151.3078 65.4110 L
  152.0266 69.2446 L
  153.2246 72.8386 L
  154.7820 76.3128 L
  156.8186 79.6672 L
  159.2146 82.7820 L
  162.0899 85.5374 L
  165.2047 88.0532 L
  168.4393 90.2097 L
  172.1531 92.1265 L
  175.9867 93.5641 L
  180.0599 94.5225 L
  184.1331 95.2413 L
  188.3261 95.4809 L
  192.5191 95.2413 L
  196.5923 94.5225 L
  200.6656 93.5641 L
  204.4992 92.1265 L
  208.2130 90.2097 L
  211.5674 88.0532 L
  214.6822 85.5374 L
  217.4376 82.7820 L
  219.9534 79.6672 L
  221.8702 76.3128 L
  223.5474 72.8386 L
  224.6256 69.2446 L
  225.3444 65.4110 L
  225.5840 61.6972 L
  225.3444 57.8636 L
  224.6256 54.2696 L
  223.5474 50.6755 L
  221.8702 47.2013 L
  219.9534 43.8469 L
  217.4376 40.7321 L
  214.6822 37.9767 L
  211.5674 35.4609 L
  208.2130 33.3045 L
  204.4992 31.3877 L
  200.6656 29.9501 L
  196.5923 28.8719 L
  192.5191 28.2729 L
  188.3261 28.0333 L
  184.1331 28.2729 L
  180.0599 28.8719 L
  175.9867 29.9501 L
  172.1531 31.3877 L
  168.4393 33.3045 L
  165.2047 35.4609 L
  162.0899 37.9767 L
  159.2146 40.7321 L
  156.8186 43.8469 L
  154.7820 47.2013 L
  153.2246 50.6755 L
  152.0266 54.2696 L
  151.3078 57.8636 L
  151.1880 61.6972 L
B
U
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  200.0666 89.2512 m
  200.3062 91.2879 L
  200.9052 93.3245 L
  201.9834 95.0017 L
  203.3012 96.4393 L
  204.8586 97.6373 L
  206.6556 98.2363 L
  208.5724 98.4759 L
  210.4892 98.2363 L
  212.2862 97.6373 L
  213.8436 96.4393 L
  215.2812 95.0017 L
  216.2396 93.3245 L
  216.8386 91.2879 L
  217.0782 89.2512 L
  216.8386 87.2146 L
  216.2396 85.2978 L
  215.2812 83.5008 L
  213.8436 82.0632 L
  212.2862 80.9850 L
  210.4892 80.2662 L
  208.5724 80.1464 L
  206.6556 80.2662 L
  204.8586 80.9850 L
  203.3012 82.0632 L
  201.9834 83.5008 L
  200.9052 85.2978 L
  200.3062 87.2146 L
  200.0666 89.2512 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 204.7388 86.2562 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 209.1714 83.0216 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  175.9867 93.9235 m
  176.2263 95.9601 L
  176.8253 97.8769 L
  177.7837 99.6739 L
  179.2213 101.1115 L
  180.7787 102.1897 L
  182.5757 102.9085 L
  184.4925 103.1481 L
  186.4093 102.9085 L
  188.2063 102.1897 L
  189.7637 101.1115 L
  191.2013 99.6739 L
  192.1597 97.8769 L
  192.7587 95.9601 L
  192.9983 93.9235 L
  192.7587 91.8869 L
  192.1597 89.8502 L
  191.2013 88.1730 L
  189.7637 86.7354 L
  188.2063 85.6572 L
  186.4093 84.9384 L
  184.4925 84.6988 L
  182.5757 84.9384 L
  180.7787 85.6572 L
  179.2213 86.7354 L
  177.7837 88.1730 L
  176.8253 89.8502 L
  176.2263 91.8869 L
  175.9867 93.9235 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 180.5391 90.9285 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 184.9717 87.5740 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  152.0266 83.1414 m
  152.2662 85.1780 L
  152.8652 87.0948 L
  153.8236 88.8918 L
  155.1414 90.3295 L
  156.8186 91.4077 L
  158.6156 92.1265 L
  160.5324 92.3661 L
  162.4493 92.1265 L
  164.2463 91.4077 L
  165.8037 90.3295 L
  167.0017 88.8918 L
  168.0799 87.0948 L
  168.6789 85.1780 L
  168.9185 83.1414 L
  168.6789 81.1048 L
  168.0799 79.1880 L
  167.0017 77.3910 L
  165.8037 75.9534 L
  164.2463 74.8752 L
  162.4493 74.1564 L
  160.5324 73.9168 L
  158.6156 74.1564 L
  156.8186 74.8752 L
  155.1414 75.9534 L
  153.8236 77.3910 L
  152.8652 79.1880 L
  152.2662 81.1048 L
  152.0266 83.1414 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 156.5790 80.1464 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 161.0116 76.7920 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  140.6456 58.5824 m
  140.8852 60.6190 L
  141.4842 62.6556 L
  142.5624 64.3328 L
  143.8802 65.7704 L
  145.4376 66.9684 L
  147.2346 67.5674 L
  149.1514 67.8070 L
  151.0682 67.5674 L
  152.8652 66.9684 L
  154.4226 65.7704 L
  155.8602 64.3328 L
  156.8186 62.6556 L
  157.4176 60.6190 L
  157.6572 58.5824 L
  157.4176 56.5458 L
  156.8186 54.7488 L
  155.8602 52.9517 L
  154.4226 51.5141 L
  152.8652 50.4359 L
  151.0682 49.7171 L
  149.1514 49.5973 L
  147.2346 49.7171 L
  145.4376 50.4359 L
  143.8802 51.5141 L
  142.5624 52.9517 L
  141.4842 54.7488 L
  140.8852 56.5458 L
  140.6456 58.5824 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 145.3178 55.5874 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 149.7504 52.4725 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  214.3228 67.8070 m
  214.4426 69.8436 L
  215.1614 71.7604 L
  216.1198 73.5574 L
  217.4376 74.9950 L
  219.1148 76.0732 L
  220.9118 76.7920 L
  222.8286 77.0316 L
  224.6256 76.7920 L
  226.4226 76.0732 L
  228.0998 74.9950 L
  229.4176 73.5574 L
  230.4958 71.7604 L
  231.0948 69.8436 L
  231.3344 67.8070 L
  231.0948 65.7704 L
  230.4958 63.8536 L
  229.4176 62.0566 L
  228.0998 60.6190 L
  226.4226 59.5408 L
  224.6256 58.8220 L
  222.8286 58.5824 L
  220.9118 58.8220 L
  219.1148 59.5408 L
  217.4376 60.6190 L
  216.1198 62.0566 L
  215.1614 63.8536 L
  214.4426 65.7704 L
  214.3228 67.8070 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 218.8752 64.8120 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 223.3078 61.4576 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  154.7820 35.7005 m
  155.0216 37.7371 L
  155.6206 39.7737 L
  156.6988 41.4509 L
  158.0166 42.8885 L
  159.6938 44.0865 L
  161.4908 44.6855 L
  163.2879 44.9251 L
  165.2047 44.6855 L
  166.8819 44.0865 L
  168.5591 42.8885 L
  169.8769 41.4509 L
  170.8353 39.7737 L
  171.5541 37.7371 L
  171.6739 35.7005 L
  171.5541 33.6639 L
  170.8353 31.7471 L
  169.8769 29.9501 L
  168.5591 28.5125 L
  166.8819 27.4343 L
  165.2047 26.8353 L
  163.2879 26.5957 L
  161.4908 26.8353 L
  159.6938 27.4343 L
  158.0166 28.5125 L
  156.6988 29.9501 L
  155.6206 31.7471 L
  155.0216 33.6639 L
  154.7820 35.7005 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 159.4542 32.7055 0 Tp
TP
84.524302 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 163.8869 29.4709 0 Tp
TP
84.524302 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  152.0266 83.1414 m
  150.3494 82.0632 L
  149.0316 80.9850 L
  147.8336 80.0266 L
  146.8752 79.0682 L
  146.1564 78.1098 L
  145.4376 77.2712 L
  144.8386 76.4326 L
  144.3594 75.7138 L
  143.8802 74.8752 L
  143.0416 73.3178 L
  142.2030 71.7604 L
  141.4842 70.2030 L
  140.8852 68.7654 L
  140.2862 67.3278 L
  139.8070 65.8902 L
  139.3278 64.5724 L
  138.9684 63.2546 L
  138.7288 61.9368 L
  138.4892 60.6190 L
  138.4892 59.9002 L
  138.3694 59.3012 L
  138.3694 58.7022 L
  138.3694 58.1032 L
  138.2496 57.3844 L
  138.2496 56.7854 L
  138.2496 56.1864 L
  138.3694 55.5874 L
  138.3694 55.1082 L
  138.3694 54.5092 L
  138.4892 52.5923 L
  138.7288 50.6755 L
  139.0882 48.9983 L
  139.3278 47.3211 L
  139.8070 45.7637 L
  140.2862 44.2063 L
  140.7654 42.8885 L
  141.3644 41.4509 L
  141.9634 40.2529 L
  142.6822 39.0549 L
  143.2812 37.8569 L
  144.3594 36.2995 L
  145.4376 34.8619 L
  146.6356 33.4243 L
  147.8336 32.2263 L
  149.1514 31.0283 L
  150.4692 29.8303 L
  151.9068 28.8719 L
  153.3444 27.9135 L
  154.7820 26.9551 L
  156.3394 26.1165 L
  157.8968 25.2779 L
  158.4958 25.0383 L
  158.9750 24.7987 L
  159.4542 24.5591 L
  159.9334 24.3195 L
  160.5324 24.0799 L
  161.0116 23.8403 L
  161.4908 23.6007 L
  162.0899 23.3611 L
  162.6889 23.1215 L
  163.1681 22.8819 L
  163.7671 22.6423 L
  164.3661 22.5225 L
  164.8453 22.2829 L
  165.4443 22.0433 L
  166.0433 21.8037 L
  167.4809 21.4443 L
  168.9185 20.9651 L
  170.4759 20.4859 L
  172.0333 20.1265 L
  173.7105 19.7671 L
  175.3877 19.4077 L
  177.0649 19.1681 L
  178.7421 18.9285 L
  180.5391 18.6889 L
  182.2163 18.4493 L
  184.0133 18.3295 L
  185.6905 18.2097 L
  187.4875 18.0899 L
  189.1647 17.9700 L
  190.8419 17.9700 L
  192.5191 18.0899 L
  194.1963 18.2097 L
  196.9517 18.4493 L
  199.5874 18.8087 L
  202.1032 19.4077 L
  204.4992 20.0067 L
  206.8952 20.8453 L
  209.1714 21.6839 L
  211.3278 22.6423 L
  213.4842 23.8403 L
  215.4010 25.0383 L
  217.3178 26.3561 L
  219.2346 27.7937 L
  220.9118 29.3511 L
  222.5890 30.9085 L
  224.1464 32.5857 L
  225.7038 34.3827 L
  227.0216 36.2995 L
  228.3394 38.2163 L
  229.2978 39.7737 L
  230.2562 41.3311 L
  231.0948 42.8885 L
  231.9334 44.5657 L
  232.6522 46.2429 L
  233.3710 47.9201 L
  233.9700 49.7171 L
  234.5691 51.3943 L
  235.0483 53.1913 L
  235.4077 54.9884 L
  235.7671 56.6656 L
  236.0067 58.4626 L
  236.1265 60.3794 L
  236.2463 62.1764 L
  236.2463 63.9734 L
  236.1265 65.8902 L
  236.0067 67.6872 L
  235.7671 69.1248 L
  235.5275 70.5624 L
  235.1681 72.0000 L
  234.6889 73.4376 L
  234.0899 74.8752 L
  233.4908 76.3128 L
  232.6522 77.8702 L
  231.8136 79.3078 L
  230.7354 80.7454 L
  229.5374 82.3028 L
  228.2196 83.7404 L
  226.6622 85.2978 L
  224.9850 86.8552 L
  223.1880 88.4126 L
  221.0316 89.9700 L
  218.7554 91.5275 L
  216.3594 93.2047 L
S
U
u
  0.000 0.000 0.000 1.000 K
  156.0998 51.2745 m
  155.1414 43.7271 L
S
U
u
  0.000 0.000 0.000 1.000 K
  159.3344 48.6389 m
  152.0266 46.4825 L
S
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
 @endspecial 482 3758 a(Fig.)h(4.)h(All)e(p)s(ossible)f(em)m(b)s
(eddings)h(of)h(logical)g(links)e(\()p Fi(e)2433 3772
y Fp(1)2473 3758 y Fi(;)15 b(e)2555 3772 y Fp(2)2596
3758 y Fl(\))30 b(and)g(\()p Fi(e)2915 3772 y Fp(3)2955
3758 y Fi(;)15 b(e)3037 3772 y Fp(4)3077 3758 y Fl(\).)166
3969 y Fg(3.2)99 b(Shortest)35 b(Path)g(R)-5 b(outing)166
4319 y Fk(Theorem)37 b(3.1)49 b Fg(Given)42 b(an)f(arbitr)-5
b(ary)43 b(set)f(of)g(c)-5 b(onne)g(ction)40 b(r)-5 b(e)g(quests)42
b Ff(R)h Fg(wher)-5 b(e)42 b(every)166 4439 y(no)-5 b(de)32
b(has)h(to)g(b)-5 b(e)32 b(c)-5 b(onne)g(cte)g(d)32 b(to)h(at)g(le)-5
b(ast)33 b Fe(d)p Fj(2)p Ff(n=)p Fj(3)p Fe(e)g Fg(other)g(no)-5
b(des,)32 b(the)g(lo)-5 b(gic)g(al)32 b(top)-5 b(olo)g(gy)33
b(is)166 4559 y(survivable)h(with)h(shortest)g(p)-5 b(ath)34
b(r)-5 b(outing)35 b(of)g(lightp)-5 b(aths.)166 4789
y Fk(Pro)s(of:)35 b Fj(In)f(the)h(follo)m(wing,)d(w)m(e)k(assume)f
(that)g Ff(n)f Fj(is)h(a)f(m)m(ultiple)e(of)i(six)h(and)f(pro)m(v)m(e)i
(the)166 4909 y(theorem.)i(When)g Ff(n)g Fj(is)g(not)f(a)h(m)m(ultiple)
d(of)i(six,)h(similar)d(argumen)m(ts)j(can)g(b)s(e)g(applied)166
5030 y(to)32 b(pro)m(v)m(e)i(the)f(theorem,)g(and)f(w)m(e)i(omit)c(the)
j(details)f(in)g(this)g(pap)s(er.)166 5259 y(Let)26 b
Ff(V)50 b Fj(=)27 b Fe(f)p Fj(0)p Ff(;)17 b Fe(\001)g(\001)g(\001)d
Ff(;)j(n)9 b Fe(\000)g Fj(1)p Fe(g)27 b Fj(b)s(e)f(the)h(set)g(of)f(no)
s(des)h(in)e(the)i(ring)e(net)m(w)m(ork,)j(and)e(assume)h(the)166
5380 y(ligh)m(tpaths)22 b(are)h(routed)g(along)e(the)j(shortest)f(path)
g(on)g(the)g(ring.)f(As)i(sho)m(wn)g(in)e(Figure)g(6,)1769
5712 y(6)p eop
%%Page: 7 7
7 6 bop 160 1762 a @beginspecial 0 @llx 0 @lly 470 @urx
251 @ury 3960 @rwi @setspecial
%%BeginDocument: fig/fig_edge_cut_of_3NRing.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: D:\papers\IS\fig\fig_edge_cut_of_3NRing.ps
%%CreationDate: () ()
%%BoundingBox: 0 0 470 251
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 470 251
%AI3_TileBox: 0 0 470 251
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

u
 [] 0 d
1.0000 w
  0.000 0.000 0.000 1.000 K
1 J
1 j
  270.5092 93.4443 m
  270.5092 134.0566 L
S
U
u
  0.000 0.000 0.000 1.000 K
  26.4759 137.7704 m
  26.4759 93.8037 L
S
U
u
  0.000 0.000 0.000 1.000 K
  56.0666 211.6872 m
  96.6789 211.6872 L
S
U
u
  0.000 0.000 0.000 1.000 K
  76.7920 189.4043 m
  70.8020 233.7304 L
S
U
u
  0.000 0.000 0.000 1.000 K
  96.6789 211.6872 m
  76.7920 189.4043 L
S
U
u
  0.000 0.000 0.000 1.000 K
  56.0666 211.6872 m
  76.7920 189.4043 L
S
U
u
  0.000 0.000 0.000 1.000 K
  203.9002 211.6872 m
  248.2263 211.6872 L
S
U
u
3.0000 w
  0.000 0.000 0.000 1.000 K
  26.4759 174.6689 m
  26.4759 137.7704 L
S
U
u
1.0000 w
  0.000 0.000 0.000 1.000 K
  218.7554 189.4043 m
  76.7920 189.4043 L
S
U
u
  0.000 0.000 0.000 1.000 K
  76.4326 152.5058 m
  218.7554 152.5058 L
S
U
u
  0.000 0.000 0.000 1.000 K
  270.5092 134.0566 m
  270.5092 174.1897 L
S
U
u
  0.000 0.000 0.000 1.000 K
  70.8020 233.7304 m
  96.6789 211.6872 L
S
U
u
  0.000 0.000 0.000 1.000 K
  56.0666 211.6872 m
  70.8020 233.7304 L
S
U
u
  0.000 0.000 0.000 1.000 K
  226.0632 233.7304 m
  203.9002 211.6872 L
S
U
u
  0.000 0.000 0.000 1.000 K
  226.0632 233.7304 m
  248.2263 211.6872 L
S
U
u
  203.9002 211.6872 m
  218.7554 189.4043 L
S
U
u
  0.000 0.000 0.000 1.000 K
  218.7554 189.4043 m
  248.2263 211.6872 L
S
U
u
  0.000 0.000 0.000 1.000 K
  226.0632 233.7304 m
  218.7554 189.4043 L
S
U
u
  0.000 0.000 0.000 1.000 K
  56.0666 211.6872 m
  26.4759 174.6689 L
S
U
u
  0.000 0.000 0.000 1.000 K
  26.4759 174.6689 m
  76.4326 152.5058 L
S
U
u
  0.000 0.000 0.000 1.000 K
  26.4759 137.7704 m
  81.9434 116.4459 L
S
U
u
  0.000 0.000 0.000 1.000 K
  218.7554 189.4043 m
  270.5092 174.1897 L
S
U
u
  0.000 0.000 0.000 1.000 K
  218.7554 152.5058 m
  270.5092 174.1897 L
S
U
u
  0.000 0.000 0.000 1.000 K
  270.5092 134.0566 m
  218.7554 115.4875 L
S
U
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  89.3710 211.6872 m
  89.6106 213.4842 L
  90.2097 215.1614 L
  91.2879 216.5990 L
  92.6057 217.7970 L
  94.0433 218.6356 L
  95.7205 218.8752 L
  97.5175 218.8752 L
  99.3145 218.6356 L
  100.8719 217.7970 L
  102.1897 216.5990 L
  103.2679 215.1614 L
  103.8669 213.4842 L
  104.1065 211.6872 L
  103.8669 209.8902 L
  103.2679 208.2130 L
  102.1897 206.7754 L
  100.8719 205.5774 L
  99.3145 204.7388 L
  97.5175 204.3794 L
  95.7205 204.3794 L
  94.0433 204.7388 L
  92.6057 205.5774 L
  91.2879 206.7754 L
  90.2097 208.2130 L
  89.6106 209.8902 L
  89.3710 211.6872 L
B
U
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  48.6389 211.6872 m
  48.8785 213.4842 L
  49.4775 215.1614 L
  50.4359 216.5990 L
  51.8735 217.7970 L
  53.4309 218.6356 L
  55.1082 218.8752 L
  56.9052 218.8752 L
  58.7022 218.6356 L
  60.2596 217.7970 L
  61.5774 216.5990 L
  62.6556 215.1614 L
  63.2546 213.4842 L
  63.4942 211.6872 L
  63.2546 209.8902 L
  62.6556 208.2130 L
  61.5774 206.7754 L
  60.2596 205.5774 L
  58.7022 204.7388 L
  56.9052 204.3794 L
  55.1082 204.3794 L
  53.4309 204.7388 L
  51.8735 205.5774 L
  50.4359 206.7754 L
  49.4775 208.2130 L
  48.8785 209.8902 L
  48.6389 211.6872 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 53.7903 208.9318 0 Tp
TP
85.550318 Tz
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(k\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  63.4942 233.7304 m
  63.6140 235.5275 L
  64.3328 237.2047 L
  65.2912 238.6423 L
  66.6090 239.8403 L
  68.1664 240.6789 L
  69.9634 241.1581 L
  71.7604 241.1581 L
  73.4376 240.6789 L
  75.1148 239.8403 L
  76.4326 238.6423 L
  77.3910 237.2047 L
  77.9900 235.5275 L
  78.2296 233.7304 L
  77.9900 232.0532 L
  77.3910 230.3760 L
  76.4326 228.8186 L
  75.1148 227.6206 L
  73.4376 226.9018 L
  71.7604 226.4226 L
  69.9634 226.4226 L
  68.1664 226.9018 L
  66.6090 227.6206 L
  65.2912 228.8186 L
  64.3328 230.3760 L
  63.6140 232.0532 L
  63.4942 233.7304 L
B
U
u
  0.000 0.000 0.000 0.000 k
  211.3278 189.4043 m
  211.5674 191.2013 L
  212.1664 192.8785 L
  213.2446 194.3161 L
  214.5624 195.5141 L
  216.1198 196.3527 L
  217.7970 196.8319 L
  219.4742 196.8319 L
  221.2712 196.3527 L
  222.8286 195.5141 L
  224.1464 194.3161 L
  225.2246 192.8785 L
  225.8236 191.2013 L
  226.0632 189.4043 L
  225.8236 187.7271 L
  225.2246 186.0499 L
  224.1464 184.4925 L
  222.8286 183.4143 L
  221.2712 182.5757 L
  219.4742 182.0965 L
  217.7970 182.0965 L
  216.1198 182.5757 L
  214.5624 183.4143 L
  213.2446 184.4925 L
  212.1664 186.0499 L
  211.5674 187.7271 L
  211.3278 189.4043 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 215.2812 186.7687 0 Tp
TP
85.550318 Tz
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 219.1148 183.7737 0 Tp
TP
86.790177 Tz
/_Times-Roman 6.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  69.0050 152.5058 m
  69.2446 154.3028 L
  69.8436 155.9800 L
  70.9218 157.2978 L
  72.2396 158.4958 L
  73.7970 159.3344 L
  75.4742 159.8136 L
  77.2712 159.8136 L
  79.0682 159.3344 L
  80.6256 158.4958 L
  81.9434 157.2978 L
  83.0216 155.9800 L
  83.6206 154.3028 L
  83.8602 152.5058 L
  83.6206 150.7088 L
  83.0216 149.1514 L
  81.9434 147.5940 L
  80.6256 146.3960 L
  79.0682 145.5574 L
  77.2712 145.1980 L
  75.4742 145.1980 L
  73.7970 145.5574 L
  72.2396 146.3960 L
  70.9218 147.5940 L
  69.8436 149.1514 L
  69.2446 150.7088 L
  69.0050 152.5058 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 72.5990 149.8702 0 Tp
TP
85.550318 Tz
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(b\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 77.1514 146.8752 0 Tp
TP
86.790177 Tz
/_Times-Roman 6.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  19.1681 137.7704 m
  19.2879 139.4476 L
  20.0067 141.1248 L
  20.9651 142.6822 L
  22.2829 143.8802 L
  23.9601 144.5990 L
  25.6373 145.0782 L
  27.4343 145.0782 L
  29.1115 144.5990 L
  30.7887 143.8802 L
  31.9867 142.6822 L
  32.9451 141.1248 L
  33.6639 139.4476 L
  33.7837 137.7704 L
  33.6639 135.9734 L
  32.9451 134.2962 L
  31.9867 132.8586 L
  30.7887 131.6606 L
  29.1115 130.8220 L
  27.4343 130.3428 L
  25.6373 130.3428 L
  23.9601 130.8220 L
  22.2829 131.6606 L
  20.9651 132.8586 L
  20.0067 134.2962 L
  19.2879 135.9734 L
  19.1681 137.7704 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 25.0383 135.0150 0 Tp
TP
85.550318 Tz
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  19.1681 174.6689 m
  19.2879 176.4659 L
  20.0067 178.0233 L
  20.9651 179.5807 L
  22.2829 180.7787 L
  23.9601 181.6173 L
  25.6373 181.9767 L
  27.4343 181.9767 L
  29.1115 181.6173 L
  30.7887 180.7787 L
  31.9867 179.5807 L
  32.9451 178.0233 L
  33.6639 176.4659 L
  33.7837 174.6689 L
  33.6639 172.8719 L
  32.9451 171.1947 L
  31.9867 169.7571 L
  30.7887 168.5591 L
  29.1115 167.7205 L
  27.4343 167.2413 L
  25.6373 167.2413 L
  23.9601 167.7205 L
  22.2829 168.5591 L
  20.9651 169.7571 L
  20.0067 171.1947 L
  19.2879 172.8719 L
  19.1681 174.6689 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 24.5591 171.9135 0 Tp
TP
85.550318 Tz
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  263.0815 174.1897 m
  263.3211 175.9867 L
  263.9201 177.6639 L
  264.8785 179.1015 L
  266.3161 180.2995 L
  267.8735 181.1381 L
  269.5507 181.4975 L
  271.3478 181.4975 L
  273.1448 181.1381 L
  274.7022 180.2995 L
  276.0200 179.1015 L
  276.9784 177.6639 L
  277.6972 175.9867 L
  277.9368 174.1897 L
  277.6972 172.3927 L
  276.9784 170.7155 L
  276.0200 169.2779 L
  274.7022 168.0799 L
  273.1448 167.2413 L
  271.3478 166.8819 L
  269.5507 166.8819 L
  267.8735 167.2413 L
  266.3161 168.0799 L
  264.8785 169.2779 L
  263.9201 170.7155 L
  263.3211 172.3927 L
  263.0815 174.1897 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 268.2329 171.4343 0 Tp
TP
85.550318 Tz
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(h\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  211.3278 152.5058 m
  211.5674 154.3028 L
  212.1664 155.9800 L
  213.2446 157.2978 L
  214.5624 158.4958 L
  216.1198 159.3344 L
  217.7970 159.8136 L
  219.4742 159.8136 L
  221.2712 159.3344 L
  222.8286 158.4958 L
  224.1464 157.2978 L
  225.2246 155.9800 L
  225.8236 154.3028 L
  226.0632 152.5058 L
  225.8236 150.7088 L
  225.2246 149.1514 L
  224.1464 147.5940 L
  222.8286 146.3960 L
  221.2712 145.5574 L
  219.4742 145.1980 L
  217.7970 145.1980 L
  216.1198 145.5574 L
  214.5624 146.3960 L
  213.2446 147.5940 L
  212.1664 149.1514 L
  211.5674 150.7088 L
  211.3278 152.5058 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 214.9218 149.8702 0 Tp
TP
85.550318 Tz
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(b\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 219.3544 146.8752 0 Tp
TP
86.790177 Tz
/_Times-Roman 6.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  263.0815 134.0566 m
  263.3211 135.8536 L
  263.9201 137.4110 L
  264.8785 138.9684 L
  266.3161 140.1664 L
  267.8735 141.0050 L
  269.5507 141.3644 L
  271.3478 141.3644 L
  273.1448 141.0050 L
  274.7022 140.1664 L
  276.0200 138.9684 L
  276.9784 137.4110 L
  277.6972 135.8536 L
  277.9368 134.0566 L
  277.6972 132.2596 L
  276.9784 130.5824 L
  276.0200 129.1448 L
  274.7022 127.9468 L
  273.1448 127.1082 L
  271.3478 126.6290 L
  269.5507 126.6290 L
  267.8735 127.1082 L
  266.3161 127.9468 L
  264.8785 129.1448 L
  263.9201 130.5824 L
  263.3211 132.2596 L
  263.0815 134.0566 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 269.1913 131.3012 0 Tp
TP
85.550318 Tz
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(i\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  240.7987 211.6872 m
  241.0383 213.4842 L
  241.6373 215.1614 L
  242.7155 216.5990 L
  244.0333 217.7970 L
  245.5907 218.6356 L
  247.3877 218.8752 L
  249.1847 218.8752 L
  250.8619 218.6356 L
  252.4193 217.7970 L
  253.7371 216.5990 L
  254.8153 215.1614 L
  255.4143 213.4842 L
  255.6539 211.6872 L
  255.4143 209.8902 L
  254.8153 208.2130 L
  253.7371 206.7754 L
  252.4193 205.5774 L
  250.8619 204.7388 L
  249.1847 204.3794 L
  247.3877 204.3794 L
  245.5907 204.7388 L
  244.0333 205.5774 L
  242.7155 206.7754 L
  241.6373 208.2130 L
  241.0383 209.8902 L
  240.7987 211.6872 L
B
U
u
  0.000 0.000 0.000 0.000 k
  196.4725 211.6872 m
  196.7121 213.4842 L
  197.4309 215.1614 L
  198.3894 216.5990 L
  199.7072 217.7970 L
  201.2646 218.6356 L
  203.0616 218.8752 L
  204.8586 218.8752 L
  206.5358 218.6356 L
  208.0932 217.7970 L
  209.5308 216.5990 L
  210.4892 215.1614 L
  211.0882 213.4842 L
  211.3278 211.6872 L
  211.0882 209.8902 L
  210.4892 208.2130 L
  209.5308 206.7754 L
  208.0932 205.5774 L
  206.5358 204.7388 L
  204.8586 204.3794 L
  203.0616 204.3794 L
  201.2646 204.7388 L
  199.7072 205.5774 L
  198.3894 206.7754 L
  197.4309 208.2130 L
  196.7121 209.8902 L
  196.4725 211.6872 L
B
U
u
  0.000 0.000 0.000 0.000 k
  218.7554 233.7304 m
  218.8752 235.5275 L
  219.4742 237.2047 L
  220.4326 238.6423 L
  221.8702 239.8403 L
  223.4276 240.6789 L
  225.1048 241.1581 L
  226.9018 241.1581 L
  228.6988 240.6789 L
  230.2562 239.8403 L
  231.5740 238.6423 L
  232.5324 237.2047 L
  233.2512 235.5275 L
  233.4908 233.7304 L
  233.2512 232.0532 L
  232.5324 230.3760 L
  231.5740 228.8186 L
  230.2562 227.6206 L
  228.6988 226.9018 L
  226.9018 226.4226 L
  225.1048 226.4226 L
  223.4276 226.9018 L
  221.8702 227.6206 L
  220.4326 228.8186 L
  219.4742 230.3760 L
  218.8752 232.0532 L
  218.7554 233.7304 L
B
U
u
  0.000 0.000 0.000 0.000 k
  69.3644 189.4043 m
  69.6040 191.2013 L
  70.2030 192.8785 L
  71.2812 194.3161 L
  72.5990 195.5141 L
  74.1564 196.3527 L
  75.8336 196.8319 L
  77.6306 196.8319 L
  79.4276 196.3527 L
  80.9850 195.5141 L
  82.3028 194.3161 L
  83.3810 192.8785 L
  83.9800 191.2013 L
  84.2196 189.4043 L
  83.9800 187.7271 L
  83.3810 186.0499 L
  82.3028 184.4925 L
  80.9850 183.4143 L
  79.4276 182.5757 L
  77.6306 182.0965 L
  75.8336 182.0965 L
  74.1564 182.5757 L
  72.5990 183.4143 L
  71.2812 184.4925 L
  70.2030 186.0499 L
  69.6040 187.7271 L
  69.3644 189.4043 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 73.3178 186.7687 0 Tp
TP
85.550318 Tz
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 77.2712 183.7737 0 Tp
TP
86.790177 Tz
/_Times-Roman 6.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  76.7920 182.0965 m
  76.4326 159.8136 L
S
U
u
  0.000 0.000 0.000 1.000 K
  218.7554 182.0965 m
  218.7554 159.8136 L
S
U
u
  218.7554 145.0782 m
  218.7554 122.9151 L
S
U
u
  0.000 0.000 0.000 1.000 K
  76.7920 80.0266 m
  96.6789 56.4260 L
S
U
u
  0.000 0.000 0.000 1.000 K
  76.4326 115.4875 m
  218.7554 115.4875 L
S
U
u
  0.000 0.000 0.000 1.000 K
  226.0632 34.6223 m
  218.7554 80.0266 L
S
U
u
  0.000 0.000 0.000 1.000 K
  240.7987 56.7854 m
  226.0632 34.6223 L
S
U
u
  0.000 0.000 0.000 1.000 K
  218.7554 80.0266 m
  240.7987 56.7854 L
S
U
u
  0.000 0.000 0.000 1.000 K
  196.4725 56.7854 m
  240.7987 56.7854 L
S
U
u
  0.000 0.000 0.000 1.000 K
  76.7920 80.0266 m
  56.0666 56.4260 L
S
U
u
  0.000 0.000 0.000 1.000 K
  56.0666 56.4260 m
  70.8020 34.1431 L
S
U
u
  0.000 0.000 0.000 1.000 K
  96.6789 56.4260 m
  70.8020 34.1431 L
S
U
u
  56.0666 56.4260 m
  96.6789 56.4260 L
S
U
u
  70.8020 34.1431 m
  76.7920 80.0266 L
S
U
u
  0.000 0.000 0.000 1.000 K
  76.7920 80.0266 m
  218.7554 80.0266 L
S
U
u
  0.000 0.000 0.000 1.000 K
  218.7554 80.0266 m
  196.4725 56.7854 L
S
U
u
  226.0632 34.6223 m
  196.4725 56.7854 L
S
U
u
  0.000 0.000 0.000 1.000 K
  26.4759 93.8037 m
  76.4326 115.4875 L
S
U
u
  0.000 0.000 0.000 1.000 K
  26.4759 93.8037 m
  56.0666 56.4260 L
S
U
u
  270.5092 93.4443 m
  218.7554 115.4875 L
S
U
u
  0.000 0.000 0.000 1.000 K
  270.5092 93.4443 m
  218.7554 80.0266 L
S
U
u
  0.000 0.000 0.000 0.000 k
  69.3644 80.0266 m
  69.6040 81.8236 L
  70.2030 83.5008 L
  71.2812 84.9384 L
  72.5990 86.1364 L
  74.1564 86.9750 L
  75.8336 87.4542 L
  77.6306 87.4542 L
  79.4276 86.9750 L
  80.9850 86.1364 L
  82.3028 84.9384 L
  83.3810 83.5008 L
  83.9800 81.8236 L
  84.2196 80.0266 L
  83.9800 78.3494 L
  83.3810 76.6722 L
  82.3028 75.1148 L
  80.9850 74.0366 L
  79.4276 73.1980 L
  77.6306 72.7188 L
  75.8336 72.7188 L
  74.1564 73.1980 L
  72.5990 74.0366 L
  71.2812 75.1148 L
  70.2030 76.6722 L
  69.6040 78.3494 L
  69.3644 80.0266 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 72.9584 77.3910 0 Tp
TP
85.550318 Tz
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(d\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 77.5108 74.3960 0 Tp
TP
86.790177 Tz
/_Times-Roman 6.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  69.0050 115.4875 m
  69.2446 117.2845 L
  69.8436 118.9617 L
  70.9218 120.3993 L
  72.2396 121.5973 L
  73.7970 122.4359 L
  75.4742 122.9151 L
  77.2712 122.9151 L
  79.0682 122.4359 L
  80.6256 121.5973 L
  81.9434 120.3993 L
  83.0216 118.9617 L
  83.6206 117.2845 L
  83.8602 115.4875 L
  83.6206 113.6905 L
  83.0216 112.0133 L
  81.9434 110.5757 L
  80.6256 109.3777 L
  79.0682 108.5391 L
  77.2712 108.1797 L
  75.4742 108.1797 L
  73.7970 108.5391 L
  72.2396 109.3777 L
  70.9218 110.5757 L
  69.8436 112.0133 L
  69.2446 113.6905 L
  69.0050 115.4875 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 72.9584 112.8519 0 Tp
TP
85.550318 Tz
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(c\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 76.9118 109.8569 0 Tp
TP
86.790177 Tz
/_Times-Roman 6.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  19.1681 93.8037 m
  19.2879 95.4809 L
  20.0067 97.1581 L
  20.9651 98.7155 L
  22.2829 99.7937 L
  23.9601 100.6323 L
  25.6373 101.1115 L
  27.4343 101.1115 L
  29.1115 100.6323 L
  30.7887 99.7937 L
  31.9867 98.7155 L
  32.9451 97.1581 L
  33.6639 95.4809 L
  33.7837 93.8037 L
  33.6639 92.1265 L
  32.9451 90.4493 L
  31.9867 89.0116 L
  30.7887 87.8136 L
  29.1115 86.9750 L
  27.4343 86.4958 L
  25.6373 86.4958 L
  23.9601 86.9750 L
  22.2829 87.8136 L
  20.9651 89.0116 L
  20.0067 90.4493 L
  19.2879 92.1265 L
  19.1681 93.8037 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 24.3195 91.1681 0 Tp
TP
85.550318 Tz
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(g\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  63.4942 34.1431 m
  63.6140 35.9401 L
  64.3328 37.6173 L
  65.2912 39.0549 L
  66.6090 40.2529 L
  68.1664 41.0915 L
  69.9634 41.4509 L
  71.7604 41.4509 L
  73.4376 41.0915 L
  75.1148 40.2529 L
  76.4326 39.0549 L
  77.3910 37.6173 L
  77.9900 35.9401 L
  78.2296 34.1431 L
  77.9900 32.3461 L
  77.3910 30.7887 L
  76.4326 29.3511 L
  75.1148 28.1531 L
  73.4376 27.3145 L
  71.7604 26.9551 L
  69.9634 26.9551 L
  68.1664 27.3145 L
  66.6090 28.1531 L
  65.2912 29.3511 L
  64.3328 30.7887 L
  63.6140 32.3461 L
  63.4942 34.1431 L
B
U
u
  0.000 0.000 0.000 0.000 k
  211.3278 115.4875 m
  211.5674 117.2845 L
  212.1664 118.9617 L
  213.2446 120.3993 L
  214.5624 121.5973 L
  216.1198 122.4359 L
  217.7970 122.9151 L
  219.4742 122.9151 L
  221.2712 122.4359 L
  222.8286 121.5973 L
  224.1464 120.3993 L
  225.2246 118.9617 L
  225.8236 117.2845 L
  226.0632 115.4875 L
  225.8236 113.6905 L
  225.2246 112.0133 L
  224.1464 110.5757 L
  222.8286 109.3777 L
  221.2712 108.5391 L
  219.4742 108.1797 L
  217.7970 108.1797 L
  216.1198 108.5391 L
  214.5624 109.3777 L
  213.2446 110.5757 L
  212.1664 112.0133 L
  211.5674 113.6905 L
  211.3278 115.4875 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 215.2812 112.8519 0 Tp
TP
85.550318 Tz
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(c\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 219.1148 109.8569 0 Tp
TP
86.790177 Tz
/_Times-Roman 6.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  89.3710 56.4260 m
  89.6106 58.1032 L
  90.2097 59.7804 L
  91.2879 61.3378 L
  92.6057 62.4160 L
  94.0433 63.2546 L
  95.7205 63.7338 L
  97.5175 63.7338 L
  99.3145 63.2546 L
  100.8719 62.4160 L
  102.1897 61.3378 L
  103.2679 59.7804 L
  103.8669 58.1032 L
  104.1065 56.4260 L
  103.8669 54.6290 L
  103.2679 52.9517 L
  102.1897 51.5141 L
  100.8719 50.3161 L
  99.3145 49.4775 L
  97.5175 48.9983 L
  95.7205 48.9983 L
  94.0433 49.4775 L
  92.6057 50.3161 L
  91.2879 51.5141 L
  90.2097 52.9517 L
  89.6106 54.6290 L
  89.3710 56.4260 L
B
U
u
  0.000 0.000 0.000 0.000 k
  48.6389 56.4260 m
  48.8785 58.1032 L
  49.4775 59.7804 L
  50.4359 61.3378 L
  51.8735 62.4160 L
  53.4309 63.2546 L
  55.1082 63.7338 L
  56.9052 63.7338 L
  58.7022 63.2546 L
  60.2596 62.4160 L
  61.5774 61.3378 L
  62.6556 59.7804 L
  63.2546 58.1032 L
  63.4942 56.4260 L
  63.2546 54.6290 L
  62.6556 52.9517 L
  61.5774 51.5141 L
  60.2596 50.3161 L
  58.7022 49.4775 L
  56.9052 48.9983 L
  55.1082 48.9983 L
  53.4309 49.4775 L
  51.8735 50.3161 L
  50.4359 51.5141 L
  49.4775 52.9517 L
  48.8785 54.6290 L
  48.6389 56.4260 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 54.7488 53.6705 0 Tp
TP
85.550318 Tz
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(l\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  263.0815 93.4443 m
  263.3211 95.0017 L
  263.9201 96.6789 L
  264.8785 98.2363 L
  266.3161 99.4343 L
  267.8735 100.1531 L
  269.5507 100.6323 L
  271.3478 100.6323 L
  273.1448 100.1531 L
  274.7022 99.4343 L
  276.0200 98.2363 L
  276.9784 96.6789 L
  277.6972 95.0017 L
  277.9368 93.4443 L
  277.6972 91.6473 L
  276.9784 89.9700 L
  276.0200 88.5324 L
  274.7022 87.3344 L
  273.1448 86.4958 L
  271.3478 86.0166 L
  269.5507 86.0166 L
  267.8735 86.4958 L
  266.3161 87.3344 L
  264.8785 88.5324 L
  263.9201 89.9700 L
  263.3211 91.6473 L
  263.0815 93.4443 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 269.1913 90.6889 0 Tp
TP
85.550318 Tz
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(j\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  218.7554 34.6223 m
  218.8752 36.4193 L
  219.4742 38.0965 L
  220.4326 39.5341 L
  221.8702 40.7321 L
  223.4276 41.5707 L
  225.1048 41.9301 L
  226.9018 41.9301 L
  228.6988 41.5707 L
  230.2562 40.7321 L
  231.5740 39.5341 L
  232.5324 38.0965 L
  233.2512 36.4193 L
  233.4908 34.6223 L
  233.2512 32.8253 L
  232.5324 31.2679 L
  231.5740 29.8303 L
  230.2562 28.6323 L
  228.6988 27.7937 L
  226.9018 27.4343 L
  225.1048 27.4343 L
  223.4276 27.7937 L
  221.8702 28.6323 L
  220.4326 29.8303 L
  219.4742 31.2679 L
  218.8752 32.8253 L
  218.7554 34.6223 L
B
U
u
  0.000 0.000 0.000 0.000 k
  233.4908 56.7854 m
  233.6106 58.5824 L
  234.3295 60.2596 L
  235.2879 61.6972 L
  236.6057 62.8952 L
  238.1631 63.7338 L
  239.9601 64.2130 L
  241.7571 64.2130 L
  243.4343 63.7338 L
  244.9917 62.8952 L
  246.4293 61.6972 L
  247.3877 60.2596 L
  247.9867 58.5824 L
  248.2263 56.7854 L
  247.9867 55.1082 L
  247.3877 53.4309 L
  246.4293 51.8735 L
  244.9917 50.7953 L
  243.4343 49.9567 L
  241.7571 49.4775 L
  239.9601 49.4775 L
  238.1631 49.9567 L
  236.6057 50.7953 L
  235.2879 51.8735 L
  234.3295 53.4309 L
  233.6106 55.1082 L
  233.4908 56.7854 L
B
U
u
  0.000 0.000 0.000 0.000 k
  211.3278 80.0266 m
  211.5674 81.8236 L
  212.1664 83.5008 L
  213.2446 84.9384 L
  214.5624 86.1364 L
  216.1198 86.9750 L
  217.7970 87.4542 L
  219.4742 87.4542 L
  221.2712 86.9750 L
  222.8286 86.1364 L
  224.1464 84.9384 L
  225.2246 83.5008 L
  225.8236 81.8236 L
  226.0632 80.0266 L
  225.8236 78.3494 L
  225.2246 76.6722 L
  224.1464 75.1148 L
  222.8286 74.0366 L
  221.2712 73.1980 L
  219.4742 72.7188 L
  217.7970 72.7188 L
  216.1198 73.1980 L
  214.5624 74.0366 L
  213.2446 75.1148 L
  212.1664 76.6722 L
  211.5674 78.3494 L
  211.3278 80.0266 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 214.9218 77.3910 0 Tp
TP
85.550318 Tz
/_Times-Roman 9.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(d\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 219.3544 74.3960 0 Tp
TP
86.790177 Tz
/_Times-Roman 6.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  189.1647 56.7854 m
  189.2845 58.5824 L
  190.0033 60.2596 L
  190.9617 61.6972 L
  192.2795 62.8952 L
  193.9567 63.7338 L
  195.6339 64.2130 L
  197.4309 64.2130 L
  199.1082 63.7338 L
  200.7854 62.8952 L
  202.1032 61.6972 L
  203.0616 60.2596 L
  203.6606 58.5824 L
  203.9002 56.7854 L
  203.6606 55.1082 L
  203.0616 53.4309 L
  202.1032 51.8735 L
  200.7854 50.7953 L
  199.1082 49.9567 L
  197.4309 49.4775 L
  195.6339 49.4775 L
  193.9567 49.9567 L
  192.2795 50.7953 L
  190.9617 51.8735 L
  190.0033 53.4309 L
  189.2845 55.1082 L
  189.1647 56.7854 L
B
U
u
  76.4326 108.0599 m
  76.7920 87.4542 L
S
U
u
  0.000 0.000 0.000 1.000 K
  218.7554 108.0599 m
  218.7554 87.4542 L
S
U
u
2.0000 w
  0.000 0.000 0.000 1.000 K
  122.5557 218.9950 m
  122.6755 217.0782 L
S
U
u
  122.6755 217.0782 m
  122.7953 214.9218 L
S
U
u
  122.7953 214.9218 m
  122.7953 214.8020 L
S
U
u
  123.0349 210.4892 m
  123.0349 210.3694 L
S
U
u
  123.0349 210.3694 m
  123.0349 207.9734 L
S
U
u
  123.0349 207.9734 m
  123.1547 206.1764 L
S
U
u
  123.1547 201.8636 m
  123.1547 200.1864 L
S
U
u
  123.1547 200.1864 m
  123.0349 197.5507 L
S
U
u
  122.9151 193.2379 m
  122.7953 191.8003 L
S
U
u
  122.7953 191.8003 m
  122.6755 189.0449 L
S
U
u
  122.6755 189.0449 m
  122.6755 188.9251 L
S
U
u
  122.3161 184.6123 m
  122.1963 183.4143 L
S
U
u
  122.1963 183.4143 m
  121.8369 180.5391 L
S
U
u
  121.8369 180.5391 m
  121.8369 180.2995 L
S
U
u
  121.2379 175.9867 m
  120.9983 174.9085 L
S
U
u
  120.9983 174.9085 m
  120.5191 172.2729 L
S
U
u
  120.5191 172.2729 m
  120.3993 171.7937 L
S
U
u
  119.4409 167.6007 m
  119.2013 166.8819 L
S
U
u
  119.2013 166.8819 m
  118.4825 164.3661 L
S
U
u
  118.4825 164.3661 m
  118.2429 163.5275 L
S
U
u
  116.8053 159.4542 m
  115.8469 157.1780 L
S
U
u
  115.8469 157.1780 m
  115.0083 155.6206 L
S
U
u
  112.7321 151.9068 m
  112.2529 151.1880 L
S
U
u
  112.2529 151.1880 m
  110.9351 149.5108 L
S
U
u
  110.9351 149.5108 m
  110.0965 148.5524 L
S
U
u
  106.9817 145.6772 m
  106.2629 145.0782 L
S
U
u
  106.2629 145.0782 m
  105.3045 144.5990 L
S
U
u
  105.3045 144.5990 m
  104.3461 144.0000 L
S
U
u
  104.3461 144.0000 m
  103.3877 143.5208 L
S
U
u
  103.3877 143.5208 m
  103.2679 143.5208 L
S
U
u
  99.3145 141.9634 m
  98.2363 141.7238 L
S
U
u
  98.2363 141.7238 m
  97.1581 141.4842 L
S
U
u
  97.1581 141.4842 m
  95.9601 141.3644 L
S
U
u
  95.9601 141.3644 m
  95.1215 141.1248 L
S
U
u
  90.9285 140.8852 m
  90.2097 140.8852 L
S
U
u
  90.2097 140.8852 m
  89.0116 140.8852 L
S
U
u
  89.0116 140.8852 m
  87.8136 140.8852 L
S
U
u
  87.8136 140.8852 m
  86.6156 140.8852 L
S
U
u
  82.3028 141.2446 m
  81.5840 141.3644 L
S
U
u
  81.5840 141.3644 m
  80.2662 141.6040 L
S
U
u
  80.2662 141.6040 m
  79.0682 141.7238 L
S
U
u
  79.0682 141.7238 m
  77.9900 141.9634 L
S
U
u
  73.7970 142.6822 m
  72.7188 142.9218 L
S
U
u
  72.7188 142.9218 m
  71.5208 143.2812 L
S
U
u
  71.5208 143.2812 m
  70.2030 143.5208 L
S
U
u
  70.2030 143.5208 m
  69.6040 143.6406 L
S
U
u
  65.4110 144.8386 m
  64.4526 145.0782 L
S
U
u
  64.4526 145.0782 m
  61.4576 145.9168 L
S
U
u
  61.4576 145.9168 m
  61.2180 146.0366 L
S
U
u
  57.1448 147.3544 m
  55.7072 147.8336 L
S
U
u
  55.7072 147.8336 m
  53.0715 148.7920 L
S
U
u
  49.1181 150.3494 m
  46.9617 151.3078 L
S
U
u
  46.9617 151.3078 m
  45.1647 152.1464 L
S
U
u
  41.2113 153.9434 m
  40.8519 154.0632 L
S
U
u
  40.8519 154.0632 m
  37.7371 155.5008 L
S
U
u
  37.7371 155.5008 m
  37.2579 155.7404 L
S
U
u
  33.4243 157.6572 m
  31.2679 158.8552 L
S
U
u
  31.2679 158.8552 m
  29.7105 159.6938 L
S
U
u
  25.8769 161.7304 m
  24.3195 162.6889 L
S
U
u
  24.3195 162.6889 m
  22.1631 163.8869 L
S
U
u
  18.4493 166.0433 m
  16.7720 167.0017 L
S
U
u
  16.7720 167.0017 m
  14.7354 168.1997 L
S
U
u
  11.0216 170.4759 m
  8.6256 171.9135 L
S
U
u
  8.6256 171.9135 m
  7.3078 172.7521 L
S
U
u
  0.000 0.000 0.000 1.000 K
  111.4143 233.7304 m
  112.1331 232.1730 L
S
U
u
  112.1331 232.1730 m
  112.7321 230.6156 L
S
U
u
  112.7321 230.6156 m
  113.0915 229.7770 L
S
U
u
  114.1697 225.5840 m
  114.1697 225.4642 L
S
U
u
  114.1697 225.4642 m
  114.4093 223.6672 L
S
U
u
  114.4093 223.6672 m
  114.6489 221.7504 L
S
U
u
  114.6489 221.7504 m
  114.6489 221.2712 L
S
U
u
  114.8885 217.0782 m
  114.8885 216.2396 L
S
U
u
  114.8885 216.2396 m
  114.7687 214.2030 L
S
U
u
  114.7687 214.2030 m
  114.6489 212.7654 L
S
U
u
  114.1697 208.4526 m
  114.1697 208.3328 L
S
U
u
  114.1697 208.3328 m
  113.8103 206.4160 L
S
U
u
  113.8103 206.4160 m
  113.4509 204.3794 L
S
U
u
  113.4509 204.3794 m
  113.4509 204.2596 L
S
U
u
  112.2529 200.1864 m
  111.6539 198.7488 L
S
U
u
  111.6539 198.7488 m
  110.9351 196.8319 L
S
U
u
  110.9351 196.8319 m
  110.6955 196.2329 L
S
U
u
  108.8985 192.2795 m
  108.4193 191.4409 L
S
U
u
  108.4193 191.4409 m
  107.4609 189.7637 L
S
U
u
  107.4609 189.7637 m
  106.6223 188.5657 L
S
U
u
  104.1065 185.0915 m
  102.9085 183.7737 L
S
U
u
  102.9085 183.7737 m
  101.5907 182.3361 L
S
U
u
  101.5907 182.3361 m
  101.1115 181.9767 L
S
U
u
  97.7571 179.2213 m
  97.1581 178.8619 L
S
U
u
  97.1581 178.8619 m
  95.6007 177.9035 L
S
U
u
  95.6007 177.9035 m
  94.0433 177.0649 L
S
U
u
  90.2097 175.5075 m
  89.9700 175.3877 L
S
U
u
  89.9700 175.3877 m
  87.8136 174.7887 L
S
U
u
  87.8136 174.7887 m
  86.0166 174.5491 L
S
U
u
  81.7038 173.9501 m
  80.8652 173.9501 L
S
U
u
  80.8652 173.9501 m
  78.4692 173.8303 L
S
U
u
  78.4692 173.8303 m
  77.3910 173.8303 L
S
U
u
  73.0782 174.1897 m
  71.1614 174.4293 L
S
U
u
  71.1614 174.4293 m
  68.7654 174.7887 L
S
U
u
  64.5724 175.7471 m
  63.6140 175.9867 L
S
U
u
  63.6140 175.9867 m
  61.2180 176.7055 L
S
U
u
  61.2180 176.7055 m
  60.3794 176.9451 L
S
U
u
  56.3062 178.3827 m
  53.9101 179.3411 L
S
U
u
  53.9101 179.3411 m
  52.3527 180.0599 L
S
U
u
  48.5191 181.9767 m
  47.0815 182.6955 L
S
U
u
  47.0815 182.6955 m
  44.9251 184.0133 L
S
U
u
  44.9251 184.0133 m
  44.8053 184.1331 L
S
U
u
  41.0915 186.4093 m
  40.7321 186.6489 L
S
U
u
  40.7321 186.6489 m
  38.8153 188.0865 L
S
U
u
  38.8153 188.0865 m
  37.7371 189.0449 L
S
U
u
  34.5025 191.9201 m
  33.7837 192.6389 L
S
U
u
  33.7837 192.6389 m
  32.2263 194.1963 L
S
U
u
  32.2263 194.1963 m
  31.5075 195.0349 L
S
U
u
  29.1115 198.6290 m
  28.7521 199.2280 L
S
U
u
  28.7521 199.2280 m
  27.7937 200.9052 L
S
U
u
  27.7937 200.9052 m
  27.0749 202.4626 L
S
U
u
  0.000 0.000 0.000 1.000 K
  115.1281 19.4077 m
  115.3677 23.7205 L
S
U
u
  115.3677 28.0333 m
  115.3677 28.9917 L
S
U
u
  115.3677 28.9917 m
  115.3677 32.2263 L
S
U
u
  115.2479 36.5391 m
  115.1281 38.6955 L
S
U
u
  115.1281 38.6955 m
  115.0083 40.8519 L
S
U
u
  114.7687 45.1647 m
  114.4093 48.3993 L
S
U
u
  114.4093 48.3993 m
  114.2895 49.4775 L
S
U
u
  113.9301 53.7903 m
  113.4509 58.1032 L
S
U
u
  113.9301 53.7903 m
  113.4509 58.1032 L
S
U
u
  112.8519 62.4160 m
  112.7321 62.7754 L
S
U
u
  112.7321 62.7754 m
  112.1331 66.6090 L
S
U
u
  111.2945 70.8020 m
  111.1747 71.7604 L
S
U
u
  111.1747 71.7604 m
  110.5757 74.9950 L
S
U
u
  109.7371 79.1880 m
  109.4975 80.1464 L
S
U
u
  109.4975 80.1464 m
  108.6589 83.3810 L
S
U
u
  107.5807 87.5740 m
  106.6223 90.9285 L
S
U
u
  106.6223 90.9285 m
  106.3827 91.6473 L
S
U
u
  104.9451 95.6007 m
  104.5857 96.5591 L
S
U
u
  104.5857 96.5591 m
  103.5075 98.8353 L
S
U
u
  103.5075 98.8353 m
  103.2679 99.3145 L
S
U
u
  103.2679 99.3145 m
  103.2679 99.5541 L
S
U
u
  101.1115 103.2679 m
  100.8719 103.6273 L
S
U
u
  100.8719 103.6273 m
  100.6323 103.9867 L
S
U
u
  100.6323 103.9867 m
  100.2729 104.5857 L
S
U
u
  100.2729 104.5857 m
  99.9135 105.0649 L
S
U
u
  99.9135 105.0649 m
  99.5541 105.5441 L
S
U
u
  99.5541 105.5441 m
  99.1947 106.1431 L
S
U
u
  99.1947 106.1431 m
  98.7155 106.7421 L
S
U
u
  98.7155 106.7421 m
  98.7155 106.8619 L
S
U
u
  96.3195 110.4559 m
  95.7205 111.1747 L
S
U
u
  95.7205 111.1747 m
  95.2413 112.0133 L
S
U
u
  95.2413 112.0133 m
  94.6423 112.8519 L
S
U
u
  94.6423 112.8519 m
  93.9235 113.8103 L
S
U
u
  93.9235 113.8103 m
  93.8037 113.9301 L
S
U
u
  91.4077 117.4043 m
  90.9285 118.0033 L
S
U
u
  90.9285 118.0033 m
  90.3295 118.7221 L
S
U
u
  90.3295 118.7221 m
  89.0116 120.1597 L
S
U
u
  89.0116 120.1597 m
  88.5324 120.6389 L
S
U
u
  85.5374 123.6339 m
  85.4176 123.7537 L
S
U
u
  85.4176 123.7537 m
  84.2196 124.7121 L
S
U
u
  84.2196 124.7121 m
  83.1414 125.6705 L
S
U
u
  83.1414 125.6705 m
  82.1830 126.3894 L
S
U
u
  78.5890 128.7854 m
  78.4692 128.7854 L
S
U
u
  78.4692 128.7854 m
  77.2712 129.5042 L
S
U
u
  77.2712 129.5042 m
  76.0732 130.2230 L
S
U
u
  76.0732 130.2230 m
  74.9950 130.9418 L
S
U
u
  74.9950 130.9418 m
  74.8752 130.9418 L
S
U
u
  71.1614 133.2180 m
  70.9218 133.3378 L
S
U
u
  70.9218 133.3378 m
  69.4842 134.2962 L
S
U
u
  69.4842 134.2962 m
  68.1664 135.1348 L
S
U
u
  68.1664 135.1348 m
  67.5674 135.4942 L
S
U
u
  63.8536 137.6506 m
  62.2962 138.6090 L
S
U
u
  62.2962 138.6090 m
  60.7388 139.4476 L
S
U
u
  60.7388 139.4476 m
  60.1398 139.8070 L
S
U
u
  56.3062 141.8436 m
  54.3894 142.8020 L
S
U
u
  54.3894 142.8020 m
  52.4725 143.7604 L
S
U
u
  48.5191 145.5574 m
  47.6805 145.9168 L
S
U
u
  47.6805 145.9168 m
  44.5657 147.2346 L
S
U
u
  40.4925 148.7920 m
  36.8985 150.2296 L
S
U
u
  36.8985 150.2296 m
  36.5391 150.3494 L
S
U
u
  32.4659 151.7870 m
  29.4709 152.8652 L
S
U
u
  29.4709 152.8652 m
  28.5125 153.2246 L
S
U
u
  24.4393 154.5424 m
  21.9235 155.2612 L
S
U
u
  21.9235 155.2612 m
  20.2463 155.7404 L
S
U
u
  16.0532 156.8186 m
  14.4958 157.2978 L
S
U
u
  14.4958 157.2978 m
  13.5374 157.5374 L
S
U
u
  13.5374 157.5374 m
  12.6988 157.7770 L
S
U
u
  12.6988 157.7770 m
  11.8602 158.0166 L
S
U
u
  12.6988 157.7770 m
  11.8602 158.0166 L
S
U
u
  7.6672 158.9750 m
  7.3078 159.0948 L
S
U
u
  7.3078 159.0948 m
  6.7088 159.3344 L
S
U
u
  6.7088 159.3344 m
  6.1098 159.4542 L
S
U
u
  6.1098 159.4542 m
  5.5108 159.5740 L
S
U
u
  5.5108 159.5740 m
  5.0316 159.6938 L
S
U
u
  5.0316 159.6938 m
  4.6722 159.8136 L
S
U
u
  4.6722 159.8136 m
  4.3128 159.8136 L
S
U
u
  0.000 0.000 0.000 1.000 K
  100.3927 19.4077 m
  101.1115 20.9651 L
S
U
u
  101.1115 20.9651 m
  101.8303 22.5225 L
S
U
u
  101.8303 22.5225 m
  102.1897 23.3611 L
S
U
u
  103.8669 27.3145 m
  103.8669 27.4343 L
S
U
u
  103.8669 27.4343 m
  104.3461 29.1115 L
S
U
u
  104.3461 29.1115 m
  104.9451 30.9085 L
S
U
u
  104.9451 30.9085 m
  105.0649 31.2679 L
S
U
u
  106.1431 35.4609 m
  106.2629 36.1797 L
S
U
u
  106.2629 36.1797 m
  106.7421 37.9767 L
S
U
u
  106.7421 37.9767 m
  107.1015 39.6539 L
S
U
u
  107.8203 43.8469 m
  107.8203 43.9667 L
S
U
u
  107.8203 43.9667 m
  107.9401 45.2845 L
S
U
u
  107.9401 45.2845 m
  108.1797 46.4825 L
S
U
u
  108.1797 46.4825 m
  108.2995 47.6805 L
S
U
u
  108.2995 47.6805 m
  108.2995 48.1597 L
S
U
u
  108.6589 52.4725 m
  108.6589 53.6705 L
S
U
u
  108.6589 53.6705 m
  108.6589 54.8686 L
S
U
u
  108.6589 54.8686 m
  108.6589 56.0666 L
S
U
u
  108.6589 56.0666 m
  108.6589 56.7854 L
S
U
u
  108.1797 61.0982 m
  108.0599 61.8170 L
S
U
u
  108.0599 61.8170 m
  107.8203 63.0150 L
S
U
u
  107.8203 63.0150 m
  107.4609 64.0932 L
S
U
u
  107.4609 64.0932 m
  107.1015 65.1714 L
S
U
u
  107.1015 65.1714 m
  107.1015 65.2912 L
S
U
u
  105.4243 69.2446 m
  104.9451 70.2030 L
S
U
u
  104.9451 70.2030 m
  104.2263 71.5208 L
S
U
u
  104.2263 71.5208 m
  103.2679 72.8386 L
S
U
u
  103.2679 72.8386 m
  103.2679 72.9584 L
S
U
u
  100.6323 76.3128 m
  100.2729 76.6722 L
S
U
u
  100.2729 76.6722 m
  99.1947 77.9900 L
S
U
u
  99.1947 77.9900 m
  97.9967 79.0682 L
S
U
u
  97.9967 79.0682 m
  97.6373 79.4276 L
S
U
u
  94.4027 82.3028 m
  94.2829 82.4226 L
S
U
u
  94.2829 82.4226 m
  93.0849 83.3810 L
S
U
u
  93.0849 83.3810 m
  91.7671 84.3394 L
S
U
u
  91.7671 84.3394 m
  91.0483 84.8186 L
S
U
u
  87.3344 86.9750 m
  86.1364 87.5740 L
S
U
u
  86.1364 87.5740 m
  84.8186 88.2928 L
S
U
u
  84.8186 88.2928 m
  83.5008 88.8918 L
S
U
u
  79.4276 90.3295 m
  79.0682 90.4493 L
S
U
u
  79.0682 90.4493 m
  76.7920 91.0483 L
S
U
u
  76.7920 91.0483 m
  75.2346 91.2879 L
S
U
u
  70.9218 91.7671 m
  70.0832 91.7671 L
S
U
u
  70.0832 91.7671 m
  67.9268 91.6473 L
S
U
u
  67.9268 91.6473 m
  66.6090 91.5275 L
S
U
u
  62.4160 90.6889 m
  61.4576 90.4493 L
S
U
u
  61.4576 90.4493 m
  59.3012 89.7304 L
S
U
u
  59.3012 89.7304 m
  58.3428 89.3710 L
S
U
u
  54.3894 87.8136 m
  52.8319 87.0948 L
S
U
u
  52.8319 87.0948 m
  50.5557 86.0166 L
S
U
u
  50.5557 86.0166 m
  50.4359 86.0166 L
S
U
u
  46.7221 83.8602 m
  46.1231 83.5008 L
S
U
u
  46.1231 83.5008 m
  43.8469 82.1830 L
S
U
u
  43.8469 82.1830 m
  43.0083 81.7038 L
S
U
u
  39.2945 79.4276 m
  39.1747 79.3078 L
S
U
u
  39.1747 79.3078 m
  36.7787 77.7504 L
S
U
u
  36.7787 77.7504 m
  35.7005 77.0316 L
S
U
u
  32.1065 74.7554 m
  31.7471 74.5158 L
S
U
u
  31.7471 74.5158 m
  29.2313 72.8386 L
S
U
u
  29.2313 72.8386 m
  28.6323 72.4792 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 116.0865 221.9900 0 Tp
TP
101.932293 Tz
/_Helvetica-Bold 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(C\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 124.7121 218.0366 0 Tp
TP
103.028340 Tz
/_Helvetica-Bold 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 104.9451 236.7255 0 Tp
TP
101.932293 Tz
/_Helvetica-Bold 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(C\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 113.5707 232.7720 0 Tp
TP
103.028340 Tz
/_Helvetica-Bold 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 112.3727 7.6672 0 Tp
TP
101.932293 Tz
/_Helvetica-Bold 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(C\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 120.9983 3.5940 0 Tp
TP
103.028340 Tz
/_Helvetica-Bold 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 93.8037 7.6672 0 Tp
TP
101.932293 Tz
/_Helvetica-Bold 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(C\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 102.4293 3.5940 0 Tp
TP
103.028340 Tz
/_Helvetica-Bold 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  305.1314 129.9834 m
  305.3710 135.4942 L
  306.0899 140.8852 L
  307.2879 146.2762 L
  308.8453 151.5474 L
  311.0017 156.5790 L
  313.5175 161.6106 L
  316.5125 166.2829 L
  319.7471 170.9551 L
  323.5807 175.1481 L
  327.6539 179.2213 L
  332.0865 182.9351 L
  336.7587 186.2895 L
  341.7903 189.4043 L
  346.9418 192.0399 L
  352.4526 194.3161 L
  358.0832 196.2329 L
  363.8336 197.7903 L
  369.7038 198.8686 L
  375.6938 199.4676 L
  381.8037 199.7072 L
  387.7937 199.4676 L
  393.7837 198.8686 L
  399.6539 197.7903 L
  405.5241 196.2329 L
  411.0349 194.3161 L
  416.4260 192.0399 L
  421.6972 189.4043 L
  426.7288 186.2895 L
  431.5208 182.9351 L
  435.8336 179.2213 L
  440.0266 175.1481 L
  443.7404 170.9551 L
  447.0948 166.2829 L
  449.9700 161.6106 L
  452.4859 156.5790 L
  454.6423 151.5474 L
  456.1997 146.2762 L
  457.3977 140.8852 L
  458.1165 135.4942 L
  458.3561 129.9834 L
  458.1165 124.4725 L
  457.3977 119.0815 L
  456.1997 113.6905 L
  454.6423 108.4193 L
  452.4859 103.2679 L
  449.9700 98.2363 L
  447.0948 93.5641 L
  443.7404 89.0116 L
  440.0266 84.6988 L
  435.8336 80.7454 L
  431.5208 77.0316 L
  426.7288 73.5574 L
  421.6972 70.5624 L
  416.4260 67.9268 L
  411.0349 65.5308 L
  405.5241 63.7338 L
  399.6539 62.1764 L
  393.7837 61.0982 L
  387.7937 60.4992 L
  381.8037 60.2596 L
  375.6938 60.4992 L
  369.7038 61.0982 L
  363.8336 62.1764 L
  358.0832 63.7338 L
  352.4526 65.5308 L
  346.9418 67.9268 L
  341.7903 70.5624 L
  336.7587 73.5574 L
  332.0865 77.0316 L
  327.6539 80.7454 L
  323.5807 84.6988 L
  319.7471 89.0116 L
  316.5125 93.5641 L
  313.5175 98.2363 L
  311.0017 103.2679 L
  308.8453 108.4193 L
  307.2879 113.6905 L
  306.0899 119.0815 L
  305.3710 124.4725 L
  305.1314 129.9834 L
B
U
u
  0.000 0.000 0.000 0.000 k
  371.9800 199.8270 m
  372.2196 201.8636 L
  372.8186 203.7804 L
  373.7770 205.4576 L
  375.0948 207.0150 L
  376.7720 208.0932 L
  378.5691 208.9318 L
  380.4859 209.4110 L
  382.5225 209.4110 L
  384.4393 208.9318 L
  386.3561 208.0932 L
  387.9135 207.0150 L
  389.2313 205.4576 L
  390.3095 203.7804 L
  390.9085 201.8636 L
  391.1481 199.8270 L
  390.9085 197.9101 L
  390.3095 195.9933 L
  389.2313 194.1963 L
  387.9135 192.7587 L
  386.3561 191.5607 L
  384.4393 190.7221 L
  382.5225 190.3627 L
  380.4859 190.3627 L
  378.5691 190.7221 L
  376.7720 191.5607 L
  375.0948 192.7587 L
  373.7770 194.1963 L
  372.8186 195.9933 L
  372.2196 197.9101 L
  371.9800 199.8270 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 377.6106 196.8319 0 Tp
TP
84.453519 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 382.0433 193.5973 0 Tp
TP
84.453519 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  300.2196 158.8552 m
  300.4592 160.8918 L
  301.0582 162.6889 L
  302.0166 164.4859 L
  303.3344 165.9235 L
  305.0116 167.1215 L
  306.8087 167.9601 L
  308.7255 168.3195 L
  310.7621 168.3195 L
  312.6789 167.9601 L
  314.5957 167.1215 L
  316.1531 165.9235 L
  317.4709 164.4859 L
  318.5491 162.6889 L
  319.1481 160.8918 L
  319.3877 158.8552 L
  319.1481 156.8186 L
  318.5491 155.1414 L
  317.4709 153.3444 L
  316.1531 151.9068 L
  314.5957 150.7088 L
  312.6789 149.8702 L
  310.7621 149.5108 L
  308.7255 149.5108 L
  306.8087 149.8702 L
  305.0116 150.7088 L
  303.3344 151.9068 L
  302.0166 153.3444 L
  301.0582 155.1414 L
  300.4592 156.8186 L
  300.2196 158.8552 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 308.1265 155.9800 0 Tp
TP
84.453519 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(f\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  371.9800 60.8586 m
  372.2196 62.7754 L
  372.8186 64.6922 L
  373.7770 66.4892 L
  375.0948 67.9268 L
  376.7720 69.1248 L
  378.5691 69.9634 L
  380.4859 70.3228 L
  382.5225 70.3228 L
  384.4393 69.9634 L
  386.3561 69.1248 L
  387.9135 67.9268 L
  389.2313 66.4892 L
  390.3095 64.6922 L
  390.9085 62.7754 L
  391.1481 60.8586 L
  390.9085 58.8220 L
  390.3095 56.9052 L
  389.2313 55.2280 L
  387.9135 53.6705 L
  386.3561 52.5923 L
  384.4393 51.7537 L
  382.5225 51.2745 L
  380.4859 51.2745 L
  378.5691 51.7537 L
  376.7720 52.5923 L
  375.0948 53.6705 L
  373.7770 55.2280 L
  372.8186 56.9052 L
  372.2196 58.8220 L
  371.9800 60.8586 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 377.3710 57.8636 0 Tp
TP
84.453519 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(b\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 382.4027 54.5092 0 Tp
TP
84.453519 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  402.8885 64.2130 m
  403.0083 66.1298 L
  403.7271 68.0466 L
  404.6855 69.8436 L
  406.0033 71.2812 L
  407.5607 72.4792 L
  409.3577 73.3178 L
  411.2745 73.6772 L
  413.3111 73.6772 L
  415.2280 73.3178 L
  417.0250 72.4792 L
  418.7022 71.2812 L
  420.0200 69.8436 L
  420.9784 68.0466 L
  421.6972 66.1298 L
  421.8170 64.2130 L
  421.6972 62.1764 L
  420.9784 60.2596 L
  420.0200 58.5824 L
  418.7022 57.0250 L
  417.0250 55.9468 L
  415.2280 55.1082 L
  413.3111 54.6290 L
  411.2745 54.6290 L
  409.3577 55.1082 L
  407.5607 55.9468 L
  406.0033 57.0250 L
  404.6855 58.5824 L
  403.7271 60.2596 L
  403.0083 62.1764 L
  402.8885 64.2130 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 408.3993 61.2180 0 Tp
TP
84.453519 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(a\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 412.8319 57.8636 0 Tp
TP
84.453519 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  425.7704 82.1830 m
  426.0100 84.0998 L
  426.6090 86.0166 L
  427.5674 87.8136 L
  428.8852 89.2512 L
  430.5624 90.4493 L
  432.3594 91.2879 L
  434.2762 91.6473 L
  436.3128 91.6473 L
  438.2296 91.2879 L
  440.1464 90.4493 L
  441.7038 89.2512 L
  443.0216 87.8136 L
  444.0998 86.0166 L
  444.6988 84.0998 L
  444.9384 82.1830 L
  444.6988 80.1464 L
  444.0998 78.2296 L
  443.0216 76.5524 L
  441.7038 74.9950 L
  440.1464 73.9168 L
  438.2296 73.0782 L
  436.3128 72.5990 L
  434.2762 72.5990 L
  432.3594 73.0782 L
  430.5624 73.9168 L
  428.8852 74.9950 L
  427.5674 76.5524 L
  426.6090 78.2296 L
  426.0100 80.1464 L
  425.7704 82.1830 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 433.0782 79.1880 0 Tp
TP
84.453519 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  442.5424 104.4659 m
  442.7820 106.5025 L
  443.3810 108.4193 L
  444.4592 110.0965 L
  445.7770 111.6539 L
  447.3344 112.7321 L
  449.2512 113.5707 L
  451.1681 114.0499 L
  453.2047 114.0499 L
  455.1215 113.5707 L
  456.9185 112.7321 L
  458.5957 111.6539 L
  459.9135 110.0965 L
  460.8719 108.4193 L
  461.4709 106.5025 L
  461.7105 104.4659 L
  461.4709 102.5491 L
  460.8719 100.6323 L
  459.9135 98.8353 L
  458.5957 97.3977 L
  456.9185 96.1997 L
  455.1215 95.3611 L
  453.2047 95.0017 L
  451.1681 95.0017 L
  449.2512 95.3611 L
  447.3344 96.1997 L
  445.7770 97.3977 L
  444.4592 98.8353 L
  443.3810 100.6323 L
  442.7820 102.5491 L
  442.5424 104.4659 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 447.9334 101.4709 0 Tp
TP
84.453519 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(b\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 452.9651 98.1165 0 Tp
TP
84.453519 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  448.2928 132.6190 m
  448.4126 134.5358 L
  449.0116 136.4526 L
  450.0899 138.2496 L
  451.4077 139.6872 L
  452.9651 140.8852 L
  454.8819 141.7238 L
  456.7987 142.0832 L
  458.8353 142.0832 L
  460.7521 141.7238 L
  462.5491 140.8852 L
  464.2263 139.6872 L
  465.5441 138.2496 L
  466.5025 136.4526 L
  467.1015 134.5358 L
  467.3411 132.6190 L
  467.1015 130.5824 L
  466.5025 128.6656 L
  465.5441 126.9884 L
  464.2263 125.4309 L
  462.5491 124.3527 L
  460.7521 123.5141 L
  458.8353 123.0349 L
  456.7987 123.0349 L
  454.8819 123.5141 L
  452.9651 124.3527 L
  451.4077 125.4309 L
  450.0899 126.9884 L
  449.0116 128.6656 L
  448.4126 130.5824 L
  448.2928 132.6190 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 455.3611 129.6240 0 Tp
TP
84.453519 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(k\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  318.1897 181.2579 m
  318.4293 183.2945 L
  319.0283 185.2113 L
  319.9867 186.8885 L
  321.3045 188.4459 L
  322.9817 189.6439 L
  324.7787 190.3627 L
  326.6955 190.8419 L
  328.7321 190.8419 L
  330.6489 190.3627 L
  332.5657 189.6439 L
  334.1231 188.4459 L
  335.4409 186.8885 L
  336.5191 185.2113 L
  337.1181 183.2945 L
  337.3577 181.2579 L
  337.1181 179.3411 L
  336.5191 177.4243 L
  335.4409 175.7471 L
  334.1231 174.1897 L
  332.5657 172.9917 L
  330.6489 172.2729 L
  328.7321 171.7937 L
  326.6955 171.7937 L
  324.7787 172.2729 L
  322.9817 172.9917 L
  321.3045 174.1897 L
  319.9867 175.7471 L
  319.0283 177.4243 L
  318.4293 179.3411 L
  318.1897 181.2579 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 323.8203 178.2629 0 Tp
TP
84.453519 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(c\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 328.2529 175.0283 0 Tp
TP
84.453519 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  294.5890 131.4210 m
  294.8286 133.4576 L
  295.4276 135.3744 L
  296.3860 137.0516 L
  297.7038 138.6090 L
  299.3810 139.6872 L
  301.1780 140.5258 L
  303.0948 141.0050 L
  305.1314 141.0050 L
  307.0483 140.5258 L
  308.9651 139.6872 L
  310.5225 138.6090 L
  311.8403 137.0516 L
  312.9185 135.3744 L
  313.5175 133.4576 L
  313.7571 131.4210 L
  313.5175 129.5042 L
  312.9185 127.5874 L
  311.8403 125.7903 L
  310.5225 124.3527 L
  308.9651 123.1547 L
  307.0483 122.3161 L
  305.1314 121.9567 L
  303.0948 121.9567 L
  301.1780 122.3161 L
  299.3810 123.1547 L
  297.7038 124.3527 L
  296.3860 125.7903 L
  295.4276 127.5874 L
  294.8286 129.5042 L
  294.5890 131.4210 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 299.9800 128.4260 0 Tp
TP
84.453519 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(d\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 305.0116 125.0715 0 Tp
TP
84.453519 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  300.2196 101.1115 m
  300.4592 103.1481 L
  301.0582 105.0649 L
  302.0166 106.7421 L
  303.3344 108.2995 L
  305.0116 109.3777 L
  306.8087 110.2163 L
  308.7255 110.6955 L
  310.7621 110.6955 L
  312.6789 110.2163 L
  314.5957 109.3777 L
  316.1531 108.2995 L
  317.4709 106.7421 L
  318.5491 105.0649 L
  319.1481 103.1481 L
  319.3877 101.1115 L
  319.1481 99.1947 L
  318.5491 97.2779 L
  317.4709 95.4809 L
  316.1531 94.0433 L
  314.5957 92.9651 L
  312.6789 92.1265 L
  310.7621 91.7671 L
  308.7255 91.7671 L
  306.8087 92.1265 L
  305.0116 92.9651 L
  303.3344 94.0433 L
  302.0166 95.4809 L
  301.0582 97.2779 L
  300.4592 99.1947 L
  300.2196 101.1115 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 308.3661 98.1165 0 Tp
TP
84.453519 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(l\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  317.5907 78.8286 m
  317.8303 80.7454 L
  318.4293 82.6622 L
  319.3877 84.4592 L
  320.8253 85.8968 L
  322.3827 87.0948 L
  324.1797 87.9334 L
  326.2163 88.2928 L
  328.1331 88.2928 L
  330.1697 87.9334 L
  331.9667 87.0948 L
  333.5241 85.8968 L
  334.9617 84.4592 L
  335.9201 82.6622 L
  336.5191 80.7454 L
  336.7587 78.8286 L
  336.5191 76.7920 L
  335.9201 74.8752 L
  334.9617 73.1980 L
  333.5241 71.6406 L
  331.9667 70.5624 L
  330.1697 69.7238 L
  328.1331 69.2446 L
  326.2163 69.2446 L
  324.1797 69.7238 L
  322.3827 70.5624 L
  320.8253 71.6406 L
  319.3877 73.1980 L
  318.4293 74.8752 L
  317.8303 76.7920 L
  317.5907 78.8286 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 323.3411 75.8336 0 Tp
TP
84.453519 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(c\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 327.7737 72.4792 0 Tp
TP
84.453519 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  342.3894 64.6922 m
  342.6290 66.8486 L
  343.2280 69.0050 L
  344.1864 70.8020 L
  345.7438 72.4792 L
  347.4210 73.6772 L
  349.4576 74.6356 L
  351.4942 75.1148 L
  353.6506 75.1148 L
  355.8070 74.6356 L
  357.8436 73.6772 L
  359.5208 72.4792 L
  360.9584 70.8020 L
  362.1564 69.0050 L
  362.7554 66.8486 L
  362.9950 64.6922 L
  362.7554 62.6556 L
  362.1564 60.4992 L
  360.9584 58.7022 L
  359.5208 57.0250 L
  357.8436 55.8270 L
  355.8070 54.8686 L
  353.6506 54.3894 L
  351.4942 54.3894 L
  349.4576 54.8686 L
  347.4210 55.8270 L
  345.7438 57.0250 L
  344.1864 58.7022 L
  343.2280 60.4992 L
  342.6290 62.6556 L
  342.3894 64.6922 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 350.1764 61.6972 0 Tp
TP
84.453519 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(g\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  344.4260 194.1963 m
  344.6656 196.2329 L
  345.2646 198.1498 L
  346.2230 199.8270 L
  347.6606 201.3844 L
  349.2180 202.4626 L
  351.0150 203.3012 L
  353.0516 203.7804 L
  354.9684 203.7804 L
  357.0050 203.3012 L
  358.8020 202.4626 L
  360.3594 201.3844 L
  361.7970 199.8270 L
  362.7554 198.1498 L
  363.3544 196.2329 L
  363.5940 194.1963 L
  363.3544 192.2795 L
  362.7554 190.3627 L
  361.7970 188.5657 L
  360.3594 187.1281 L
  358.8020 185.9301 L
  357.0050 185.0915 L
  354.9684 184.7321 L
  353.0516 184.7321 L
  351.0150 185.0915 L
  349.2180 185.9301 L
  347.6606 187.1281 L
  346.2230 188.5657 L
  345.2646 190.3627 L
  344.6656 192.2795 L
  344.4260 194.1963 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 349.8170 191.2013 0 Tp
TP
84.453519 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(d\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 354.8486 187.8469 0 Tp
TP
84.453519 Tz
/_Times-Roman 6.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  439.3078 159.4542 m
  439.4276 161.3710 L
  440.0266 163.2879 L
  441.1048 165.0849 L
  442.4226 166.5225 L
  443.9800 167.7205 L
  445.8968 168.5591 L
  447.8136 168.9185 L
  449.8502 168.9185 L
  451.7671 168.5591 L
  453.5641 167.7205 L
  455.2413 166.5225 L
  456.5591 165.0849 L
  457.5175 163.2879 L
  458.1165 161.3710 L
  458.3561 159.4542 L
  458.1165 157.4176 L
  457.5175 155.6206 L
  456.5591 153.9434 L
  455.2413 152.3860 L
  453.5641 151.3078 L
  451.7671 150.4692 L
  449.8502 149.9900 L
  447.8136 149.9900 L
  445.8968 150.4692 L
  443.9800 151.3078 L
  442.4226 152.3860 L
  441.1048 153.9434 L
  440.0266 155.6206 L
  439.4276 157.4176 L
  439.3078 159.4542 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 447.3344 156.4592 0 Tp
TP
84.453519 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(j\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  424.5724 181.8569 m
  424.8120 183.8935 L
  425.4110 185.8103 L
  426.4892 187.4875 L
  427.8070 189.0449 L
  429.3644 190.1231 L
  431.2812 190.9617 L
  433.1980 191.4409 L
  435.2346 191.4409 L
  437.1514 190.9617 L
  438.9484 190.1231 L
  440.6256 189.0449 L
  441.9434 187.4875 L
  442.9018 185.8103 L
  443.5008 183.8935 L
  443.7404 181.8569 L
  443.5008 179.9401 L
  442.9018 178.0233 L
  441.9434 176.2263 L
  440.6256 174.7887 L
  438.9484 173.5907 L
  437.1514 172.7521 L
  435.2346 172.3927 L
  433.1980 172.3927 L
  431.2812 172.7521 L
  429.3644 173.5907 L
  427.8070 174.7887 L
  426.4892 176.2263 L
  425.4110 178.0233 L
  424.8120 179.9401 L
  424.5724 181.8569 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 432.8386 178.8619 0 Tp
TP
84.453519 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(i\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  398.9351 194.7953 m
  399.1747 196.8319 L
  399.7737 198.6290 L
  400.7321 200.4260 L
  402.0499 201.8636 L
  403.7271 203.0616 L
  405.5241 203.9002 L
  407.3211 204.2596 L
  409.3577 204.2596 L
  411.2745 203.9002 L
  413.1913 203.0616 L
  414.7488 201.8636 L
  416.0666 200.4260 L
  417.1448 198.6290 L
  417.7438 196.8319 L
  417.9834 194.7953 L
  417.7438 192.7587 L
  417.1448 190.9617 L
  416.0666 189.1647 L
  414.7488 187.7271 L
  413.1913 186.5291 L
  411.2745 185.6905 L
  409.3577 185.3311 L
  407.3211 185.3311 L
  405.5241 185.6905 L
  403.7271 186.5291 L
  402.0499 187.7271 L
  400.7321 189.1647 L
  399.7737 190.9617 L
  399.1747 192.7587 L
  398.9351 194.7953 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 406.0033 191.8003 0 Tp
TP
84.453519 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(h\r) Tx
TO
  0.000 0.000 0.000 1.000 K
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
 @endspecial 166 2002 a Fl(Fig.)30 b(5.)g(A)g(non-surviv)-5
b(able)27 b(3-edge)32 b(connected)e(logical)f(top)s(ology)h(\(left\),)h
(and)e(the)h(no)s(des)f(on)166 2115 y(the)i(ph)m(ysical)e(ring)g
(\(righ)m(t\).)460 3443 y @beginspecial 0 @llx 0 @lly
449 @urx 203 @ury 3240 @rwi @setspecial
%%BeginDocument: fig/fig3.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: C:\WINNT\Profiles\fam\Personal\Research\allerton\fig3.ps
%%CreationDate: () ()
%%BoundingBox: 0 0 449 203
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 449 203
%AI3_TileBox: 0 0 449 203
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

u
  0.000 0.000 0.000 0.000 k
 [] 0 d
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  51.8400 102.4800 m
  52.0800 105.7200 L
  52.8000 109.0800 L
  54.0000 112.3200 L
  55.6800 115.5600 L
  57.7200 118.8000 L
  60.2400 121.9200 L
  63.2400 125.0400 L
  66.7200 128.1600 L
  70.5600 131.1600 L
  74.7600 134.0400 L
  79.4400 136.9200 L
  84.4800 139.5600 L
  90.0000 142.2000 L
  95.7600 144.8400 L
  101.8800 147.2400 L
  108.3600 149.5200 L
  115.2000 151.6800 L
  122.2800 153.7200 L
  129.7200 155.6400 L
  137.4000 157.4400 L
  145.3200 159.1200 L
  153.4800 160.5600 L
  161.7600 161.8800 L
  170.1600 163.0800 L
  178.8000 164.0400 L
  187.5600 164.8800 L
  196.4400 165.6000 L
  205.4400 166.0800 L
  214.5600 166.4400 L
  223.5600 166.5600 L
  232.6800 166.5600 L
  241.6800 166.4400 L
  250.6800 166.0800 L
  259.6800 165.6000 L
  268.5600 164.8800 L
  277.3200 164.0400 L
  285.9600 163.0800 L
  294.4800 161.8800 L
  302.8800 160.5600 L
  310.8000 159.1200 L
  318.7200 157.4400 L
  326.4000 155.6400 L
  333.8400 153.7200 L
  340.9200 151.6800 L
  347.7600 149.5200 L
  354.2400 147.2400 L
  360.4800 144.8400 L
  366.2400 142.2000 L
  371.6400 139.5600 L
  376.6800 136.9200 L
  381.3600 134.0400 L
  385.6800 131.1600 L
  389.5200 128.1600 L
  392.8800 125.0400 L
  395.8800 121.9200 L
  398.4000 118.8000 L
  400.5600 115.5600 L
  402.1200 112.3200 L
  403.3200 109.0800 L
  404.0400 105.7200 L
  404.2800 102.4800 L
  404.0400 99.2400 L
  403.3200 96.0000 L
  402.1200 92.6400 L
  400.5600 89.4000 L
  398.4000 86.1600 L
  395.8800 83.0400 L
  392.8800 79.9200 L
  389.5200 76.8000 L
  385.6800 73.9200 L
  381.3600 70.9200 L
  376.6800 68.1600 L
  371.6400 65.4000 L
  366.2400 62.7600 L
  360.4800 60.2400 L
  354.2400 57.7200 L
  347.7600 55.4400 L
  340.9200 53.2800 L
  333.8400 51.2400 L
  326.4000 49.3200 L
  318.7200 47.5200 L
  310.8000 45.9600 L
  302.8800 44.4000 L
  294.4800 43.0800 L
  285.9600 42.0000 L
  277.3200 40.9200 L
  268.5600 40.0800 L
  259.6800 39.3600 L
  250.6800 38.8800 L
  241.6800 38.5200 L
  232.6800 38.4000 L
  223.5600 38.4000 L
  214.5600 38.5200 L
  205.4400 38.8800 L
  196.4400 39.3600 L
  187.5600 40.0800 L
  178.8000 40.9200 L
  170.1600 42.0000 L
  161.7600 43.0800 L
  153.4800 44.4000 L
  145.3200 45.9600 L
  137.4000 47.5200 L
  129.7200 49.3200 L
  122.2800 51.2400 L
  115.2000 53.2800 L
  108.3600 55.4400 L
  101.8800 57.7200 L
  95.7600 60.2400 L
  90.0000 62.7600 L
  84.4800 65.4000 L
  79.4400 68.1600 L
  74.7600 70.9200 L
  70.5600 73.9200 L
  66.7200 76.8000 L
  63.2400 79.9200 L
  60.2400 83.0400 L
  57.7200 86.1600 L
  55.6800 89.4000 L
  54.0000 92.6400 L
  52.8000 96.0000 L
  52.0800 99.2400 L
  51.8400 102.4800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  238.9200 38.2800 m
  239.1600 39.7200 L
  239.8800 41.1600 L
  241.0800 42.4800 L
  242.6400 43.6800 L
  244.5600 44.6400 L
  246.7200 45.4800 L
  249.1200 45.9600 L
  251.6400 46.3200 L
  254.2800 46.3200 L
  256.8000 45.9600 L
  259.2000 45.4800 L
  261.3600 44.6400 L
  263.2800 43.6800 L
  264.8400 42.4800 L
  266.0400 41.1600 L
  266.7600 39.7200 L
  267.0000 38.2800 L
  266.7600 36.8400 L
  266.0400 35.4000 L
  264.8400 34.0800 L
  263.2800 33.0000 L
  261.3600 32.0400 L
  259.2000 31.2000 L
  256.8000 30.7200 L
  254.2800 30.3600 L
  251.6400 30.3600 L
  249.1200 30.7200 L
  246.7200 31.2000 L
  244.5600 32.0400 L
  242.6400 33.0000 L
  241.0800 34.0800 L
  239.8800 35.4000 L
  239.1600 36.8400 L
  238.9200 38.2800 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 245.0400 34.6800 0 Tp
TP
84.955217 Tz
/_Times-Roman 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(n-1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  189.0000 38.2800 m
  189.2400 39.7200 L
  189.9600 41.1600 L
  191.1600 42.4800 L
  192.7200 43.6800 L
  194.6400 44.6400 L
  196.8000 45.4800 L
  199.2000 45.9600 L
  201.7200 46.3200 L
  204.3600 46.3200 L
  206.8800 45.9600 L
  209.2800 45.4800 L
  211.5600 44.6400 L
  213.3600 43.6800 L
  214.9200 42.4800 L
  216.1200 41.1600 L
  216.8400 39.7200 L
  217.0800 38.2800 L
  216.8400 36.8400 L
  216.1200 35.4000 L
  214.9200 34.0800 L
  213.3600 33.0000 L
  211.5600 32.0400 L
  209.2800 31.2000 L
  206.8800 30.7200 L
  204.3600 30.3600 L
  201.7200 30.3600 L
  199.2000 30.7200 L
  196.8000 31.2000 L
  194.6400 32.0400 L
  192.7200 33.0000 L
  191.1600 34.0800 L
  189.9600 35.4000 L
  189.2400 36.8400 L
  189.0000 38.2800 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 200.0400 34.6800 0 Tp
TP
84.955217 Tz
/_Times-Roman 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(0\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  55.3200 131.6400 m
  55.5600 132.9600 L
  56.1600 134.2800 L
  57.2400 135.4800 L
  58.6800 136.5600 L
  60.4800 137.6400 L
  62.6400 138.3600 L
  64.9200 139.0800 L
  67.4400 139.4400 L
  70.0800 139.6800 L
  72.7200 139.6800 L
  75.3600 139.4400 L
  77.7600 139.0800 L
  80.1600 138.3600 L
  82.2000 137.6400 L
  84.0000 136.5600 L
  85.4400 135.4800 L
  86.5200 134.2800 L
  87.2400 132.9600 L
  87.3600 131.6400 L
  87.2400 130.3200 L
  86.5200 129.1200 L
  85.4400 127.9200 L
  84.0000 126.7200 L
  82.2000 125.7600 L
  80.1600 124.9200 L
  77.7600 124.3200 L
  75.3600 123.9600 L
  72.7200 123.7200 L
  70.0800 123.7200 L
  67.4400 123.9600 L
  64.9200 124.3200 L
  62.6400 124.9200 L
  60.4800 125.7600 L
  58.6800 126.7200 L
  57.2400 127.9200 L
  56.1600 129.1200 L
  55.5600 130.3200 L
  55.3200 131.6400 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 57.3600 128.0400 0 Tp
TP
84.955217 Tz
/_Times-Roman 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(n/4+1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  123.9600 158.6400 m
  124.2000 159.9600 L
  124.8000 161.1600 L
  125.8800 162.3600 L
  127.3200 163.5600 L
  129.1200 164.5200 L
  131.2800 165.2400 L
  133.5600 165.9600 L
  136.0800 166.3200 L
  138.7200 166.5600 L
  141.3600 166.5600 L
  144.0000 166.3200 L
  146.4000 165.9600 L
  148.8000 165.2400 L
  150.8400 164.5200 L
  152.6400 163.5600 L
  154.0800 162.3600 L
  155.1600 161.1600 L
  155.8800 159.9600 L
  156.0000 158.6400 L
  155.8800 157.3200 L
  155.1600 156.0000 L
  154.0800 154.8000 L
  152.6400 153.6000 L
  150.8400 152.6400 L
  148.8000 151.9200 L
  146.4000 151.2000 L
  144.0000 150.8400 L
  141.3600 150.6000 L
  138.7200 150.6000 L
  136.0800 150.8400 L
  133.5600 151.2000 L
  131.2800 151.9200 L
  129.1200 152.6400 L
  127.3200 153.6000 L
  125.8800 154.8000 L
  124.8000 156.0000 L
  124.2000 157.3200 L
  123.9600 158.6400 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 127.3200 155.0400 0 Tp
TP
84.955217 Tz
/_Times-Roman 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(n/3-1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  39.2400 114.7200 m
  39.4800 116.0400 L
  40.2000 117.2400 L
  41.1600 118.4400 L
  42.6000 119.6400 L
  44.4000 120.6000 L
  46.5600 121.3200 L
  48.8400 122.0400 L
  51.3600 122.4000 L
  54.0000 122.6400 L
  56.6400 122.6400 L
  59.2800 122.4000 L
  61.8000 122.0400 L
  64.0800 121.3200 L
  66.2400 120.6000 L
  68.0400 119.6400 L
  69.4800 118.4400 L
  70.4400 117.2400 L
  71.1600 116.0400 L
  71.4000 114.7200 L
  71.1600 113.4000 L
  70.4400 112.0800 L
  69.4800 110.8800 L
  68.0400 109.6800 L
  66.2400 108.7200 L
  64.0800 108.0000 L
  61.8000 107.2800 L
  59.2800 106.9200 L
  56.6400 106.6800 L
  54.0000 106.6800 L
  51.3600 106.9200 L
  48.8400 107.2800 L
  46.5600 108.0000 L
  44.4000 108.7200 L
  42.6000 109.6800 L
  41.1600 110.8800 L
  40.2000 112.0800 L
  39.4800 113.4000 L
  39.2400 114.7200 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 47.6400 111.1200 0 Tp
TP
84.955217 Tz
/_Times-Roman 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(n/4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  234.4800 164.1600 m
  234.7200 165.4800 L
  235.3200 166.8000 L
  236.2800 168.0000 L
  237.7200 168.9600 L
  239.5200 169.9200 L
  241.6800 170.7600 L
  243.9600 171.3600 L
  246.4800 171.8400 L
  249.1200 172.0800 L
  251.7600 172.0800 L
  254.4000 171.8400 L
  256.9200 171.3600 L
  259.2000 170.7600 L
  261.2400 169.9200 L
  263.0400 168.9600 L
  264.4800 168.0000 L
  265.5600 166.8000 L
  266.2800 165.4800 L
  266.5200 164.1600 L
  266.2800 162.8400 L
  265.5600 161.5200 L
  264.4800 160.3200 L
  263.0400 159.2400 L
  261.2400 158.2800 L
  259.2000 157.4400 L
  256.9200 156.8400 L
  254.4000 156.3600 L
  251.7600 156.1200 L
  249.1200 156.1200 L
  246.4800 156.3600 L
  243.9600 156.8400 L
  241.6800 157.4400 L
  239.5200 158.2800 L
  237.7200 159.2400 L
  236.2800 160.3200 L
  235.3200 161.5200 L
  234.7200 162.8400 L
  234.4800 164.1600 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 242.7600 160.5600 0 Tp
TP
84.955217 Tz
/_Times-Roman 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(n/2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  190.0800 164.1600 m
  190.3200 165.4800 L
  190.9200 166.8000 L
  192.0000 168.0000 L
  193.4400 168.9600 L
  195.2400 169.9200 L
  197.4000 170.7600 L
  199.6800 171.3600 L
  202.2000 171.8400 L
  204.8400 172.0800 L
  207.4800 172.0800 L
  210.1200 171.8400 L
  212.5200 171.3600 L
  214.9200 170.7600 L
  216.9600 169.9200 L
  218.7600 168.9600 L
  220.2000 168.0000 L
  221.2800 166.8000 L
  222.0000 165.4800 L
  222.1200 164.1600 L
  222.0000 162.8400 L
  221.2800 161.5200 L
  220.2000 160.3200 L
  218.7600 159.2400 L
  216.9600 158.2800 L
  214.9200 157.4400 L
  212.5200 156.8400 L
  210.1200 156.3600 L
  207.4800 156.1200 L
  204.8400 156.1200 L
  202.2000 156.3600 L
  199.6800 156.8400 L
  197.4000 157.4400 L
  195.2400 158.2800 L
  193.4400 159.2400 L
  192.0000 160.3200 L
  190.9200 161.5200 L
  190.3200 162.8400 L
  190.0800 164.1600 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 193.4400 160.5600 0 Tp
TP
84.955217 Tz
/_Times-Roman 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(n/2-1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  300.2400 158.6400 m
  300.4800 159.9600 L
  301.0800 161.1600 L
  302.1600 162.3600 L
  303.4800 163.5600 L
  305.2800 164.5200 L
  307.3200 165.2400 L
  309.7200 165.9600 L
  312.2400 166.3200 L
  314.7600 166.5600 L
  317.4000 166.5600 L
  320.0400 166.3200 L
  322.5600 165.9600 L
  324.9600 165.2400 L
  327.0000 164.5200 L
  328.8000 163.5600 L
  330.2400 162.3600 L
  331.3200 161.1600 L
  331.9200 159.9600 L
  332.1600 158.6400 L
  331.9200 157.3200 L
  331.3200 156.0000 L
  330.2400 154.8000 L
  328.8000 153.6000 L
  327.0000 152.6400 L
  324.9600 151.9200 L
  322.5600 151.2000 L
  320.0400 150.8400 L
  317.4000 150.6000 L
  314.7600 150.6000 L
  312.2400 150.8400 L
  309.7200 151.2000 L
  307.3200 151.9200 L
  305.2800 152.6400 L
  303.4800 153.6000 L
  302.1600 154.8000 L
  301.0800 156.0000 L
  300.4800 157.3200 L
  300.2400 158.6400 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 305.4000 155.0400 0 Tp
TP
84.955217 Tz
/_Times-Roman 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(2n/3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  336.2400 58.4400 m
  336.3600 59.7600 L
  337.0800 61.0800 L
  338.1600 62.2800 L
  339.6000 63.3600 L
  341.4000 64.3200 L
  343.4400 65.1600 L
  345.8400 65.7600 L
  348.2400 66.2400 L
  350.8800 66.4800 L
  353.5200 66.4800 L
  356.1600 66.2400 L
  358.6800 65.7600 L
  360.9600 65.1600 L
  363.1200 64.3200 L
  364.9200 63.3600 L
  366.3600 62.2800 L
  367.4400 61.0800 L
  368.0400 59.7600 L
  368.2800 58.4400 L
  368.0400 57.1200 L
  367.4400 55.8000 L
  366.3600 54.6000 L
  364.9200 53.5200 L
  363.1200 52.5600 L
  360.9600 51.7200 L
  358.6800 51.1200 L
  356.1600 50.6400 L
  353.5200 50.4000 L
  350.8800 50.4000 L
  348.2400 50.6400 L
  345.8400 51.1200 L
  343.4400 51.7200 L
  341.4000 52.5600 L
  339.6000 53.5200 L
  338.1600 54.6000 L
  337.0800 55.8000 L
  336.3600 57.1200 L
  336.2400 58.4400 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 339.4800 54.8400 0 Tp
TP
84.955217 Tz
/_Times-Roman 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(n/2+j\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
  0.000 0.000 0.000 1.000 K
1 J
1 j
  77.8800 158.6400 m
  79.2000 158.1600 L
S
U
u
  0.000 0.000 0.000 1.000 K
  80.5200 157.6800 m
  81.8400 157.2000 L
S
U
u
  83.1600 156.7200 m
  84.4800 156.1200 L
S
U
u
  85.8000 155.6400 m
  87.1200 155.1600 L
S
U
u
  88.4400 154.6800 m
  89.7600 154.2000 L
S
U
u
  91.0800 153.7200 m
  92.4000 153.2400 L
S
U
u
  93.7200 152.7600 m
  95.0400 152.2800 L
S
U
u
  96.3600 151.8000 m
  97.6800 151.2000 L
S
U
u
  99.0000 150.7200 m
  100.3200 150.2400 L
S
U
u
  101.5200 149.7600 m
  102.8400 149.2800 L
S
U
u
  104.1600 148.8000 m
  105.4800 148.3200 L
S
U
u
  106.8000 147.8400 m
  108.1200 147.3600 L
S
U
u
  109.4400 146.8800 m
  110.7600 146.4000 L
S
U
u
  112.0800 145.8000 m
  113.4000 145.3200 L
S
U
u
  114.7200 144.8400 m
  116.0400 144.3600 L
S
U
u
  117.3600 143.8800 m
  118.6800 143.4000 L
S
U
u
  120.0000 142.9200 m
  121.3200 142.4400 L
S
U
u
  122.6400 141.9600 m
  123.9600 141.4800 L
S
U
u
  125.2800 140.8800 m
  126.6000 140.4000 L
S
U
u
  127.9200 139.9200 m
  129.2400 139.4400 L
S
U
u
  130.5600 138.9600 m
  131.8800 138.4800 L
S
U
u
  133.2000 138.0000 m
  134.5200 137.5200 L
S
U
u
  135.8400 137.0400 m
  137.1600 136.5600 L
S
U
u
  138.4800 135.9600 m
  139.8000 135.4800 L
S
U
u
  141.1200 135.0000 m
  142.4400 134.5200 L
S
U
u
  143.7600 134.0400 m
  145.0800 133.5600 L
S
U
u
  146.4000 133.0800 m
  147.7200 132.6000 L
S
U
u
  149.0400 132.1200 m
  150.3600 131.6400 L
S
U
u
  151.6800 131.0400 m
  153.0000 130.5600 L
S
U
u
  154.3200 130.0800 m
  155.6400 129.6000 L
S
U
u
  156.9600 129.1200 m
  158.2800 128.6400 L
S
U
u
  159.6000 128.1600 m
  160.9200 127.6800 L
S
U
u
  162.2400 127.2000 m
  163.5600 126.7200 L
S
U
u
  164.8800 126.2400 m
  166.2000 125.6400 L
S
U
u
  167.5200 125.1600 m
  168.7200 124.6800 L
S
U
u
  170.0400 124.2000 m
  171.3600 123.7200 L
S
U
u
  172.6800 123.2400 m
  174.0000 122.7600 L
S
U
u
  175.3200 122.2800 m
  176.6400 121.8000 L
S
U
u
  177.9600 121.3200 m
  179.2800 120.7200 L
S
U
u
  180.6000 120.2400 m
  181.9200 119.7600 L
S
U
u
  183.2400 119.2800 m
  184.5600 118.8000 L
S
U
u
  185.8800 118.3200 m
  187.2000 117.8400 L
S
U
u
  188.5200 117.3600 m
  189.8400 116.8800 L
S
U
u
  191.1600 116.4000 m
  192.4800 115.8000 L
S
U
u
  193.8000 115.3200 m
  195.1200 114.8400 L
S
U
u
  196.4400 114.3600 m
  197.7600 113.8800 L
S
U
u
  199.0800 113.4000 m
  200.4000 112.9200 L
S
U
u
  201.7200 112.4400 m
  203.0400 111.9600 L
S
U
u
  204.3600 111.4800 m
  205.6800 110.8800 L
S
U
u
  207.0000 110.4000 m
  208.3200 109.9200 L
S
U
u
  209.6400 109.4400 m
  210.9600 108.9600 L
S
U
u
  212.2800 108.4800 m
  213.6000 108.0000 L
S
U
u
  214.9200 107.5200 m
  216.2400 107.0400 L
S
U
u
  217.5600 106.5600 m
  218.8800 105.9600 L
S
U
u
  220.2000 105.4800 m
  221.5200 105.0000 L
S
U
u
  222.8400 104.5200 m
  224.1600 104.0400 L
S
U
u
  225.4800 103.5600 m
  226.8000 103.0800 L
S
U
u
  228.1200 102.6000 m
  229.4400 102.1200 L
S
U
u
  230.7600 101.6400 m
  232.0800 101.1600 L
S
U
u
  233.4000 100.6800 m
  234.7200 100.2000 L
S
U
u
  236.0400 99.7200 m
  237.2400 99.2400 L
S
U
u
  238.5600 98.7600 m
  239.8800 98.2800 L
S
U
u
  241.2000 97.8000 m
  242.5200 97.3200 L
S
U
u
  243.8400 96.8400 m
  245.1600 96.3600 L
S
U
u
  246.4800 95.7600 m
  247.8000 95.2800 L
S
U
u
  249.1200 94.8000 m
  250.4400 94.3200 L
S
U
u
  251.7600 93.8400 m
  253.0800 93.3600 L
S
U
u
  254.4000 92.8800 m
  255.7200 92.4000 L
S
U
u
  257.0400 91.9200 m
  258.3600 91.4400 L
S
U
u
  259.6800 90.8400 m
  261.0000 90.3600 L
S
U
u
  262.3200 89.8800 m
  263.6400 89.4000 L
S
U
u
  264.9600 88.9200 m
  266.2800 88.4400 L
S
U
u
  267.6000 87.9600 m
  268.9200 87.4800 L
S
U
u
  270.2400 87.0000 m
  271.5600 86.5200 L
S
U
u
  272.8800 85.9200 m
  274.2000 85.4400 L
S
U
u
  275.5200 84.9600 m
  276.8400 84.4800 L
S
U
u
  278.1600 84.0000 m
  279.4800 83.5200 L
S
U
u
  280.8000 83.0400 m
  282.1200 82.5600 L
S
U
u
  283.4400 82.0800 m
  284.7600 81.6000 L
S
U
u
  286.0800 81.1200 m
  287.4000 80.5200 L
S
U
u
  288.7200 80.0400 m
  290.0400 79.5600 L
S
U
u
  291.3600 79.0800 m
  292.6800 78.6000 L
S
U
u
  294.0000 78.1200 m
  295.3200 77.6400 L
S
U
u
  296.6400 77.1600 m
  297.9600 76.6800 L
S
U
u
  299.2800 76.2000 m
  300.6000 75.6000 L
S
U
u
  301.9200 75.1200 m
  303.2400 74.6400 L
S
U
u
  304.4400 74.1600 m
  305.7600 73.6800 L
S
U
u
  307.0800 73.2000 m
  308.4000 72.7200 L
S
U
u
  309.7200 72.2400 m
  311.0400 71.7600 L
S
U
u
  312.3600 71.2800 m
  313.6800 70.6800 L
S
U
u
  315.0000 70.2000 m
  316.3200 69.7200 L
S
U
u
  317.6400 69.2400 m
  318.9600 68.7600 L
S
U
u
  320.2800 68.2800 m
  321.6000 67.8000 L
S
U
u
  322.9200 67.3200 m
  324.2400 66.8400 L
S
U
u
  325.5600 66.3600 m
  326.8800 65.7600 L
S
U
u
  328.2000 65.2800 m
  329.5200 64.8000 L
S
U
u
  330.8400 64.3200 m
  332.1600 63.8400 L
S
U
u
  333.4800 63.3600 m
  334.8000 62.8800 L
S
U
u
  336.1200 62.4000 m
  337.4400 61.9200 L
S
U
u
  0.000 0.000 0.000 1.000 K
  387.7200 156.4800 m
  386.4000 156.0000 L
S
U
u
  385.0800 155.5200 m
  383.6400 155.1600 L
S
U
u
  382.3200 154.6800 m
  381.0000 154.2000 L
S
U
u
  379.6800 153.7200 m
  378.3600 153.3600 L
S
U
u
  377.0400 152.8800 m
  375.7200 152.4000 L
S
U
u
  374.4000 151.9200 m
  372.9600 151.5600 L
S
U
u
  371.6400 151.0800 m
  370.4400 150.6000 L
S
U
u
  369.1200 150.1200 m
  367.8000 149.6400 L
S
U
u
  366.3600 149.2800 m
  365.0400 148.8000 L
S
U
u
  363.7200 148.3200 m
  362.4000 147.8400 L
S
U
u
  360.9600 147.4800 m
  359.6400 147.0000 L
S
U
u
  358.3200 146.5200 m
  357.0000 146.0400 L
S
U
u
  355.6800 145.5600 m
  354.2400 145.2000 L
S
U
u
  352.9200 144.7200 m
  351.6000 144.2400 L
S
U
u
  350.2800 143.7600 m
  348.9600 143.2800 L
S
U
u
  347.5200 142.9200 m
  346.2000 142.4400 L
S
U
u
  344.8800 141.9600 m
  343.5600 141.4800 L
S
U
u
  342.1200 141.1200 m
  340.8000 140.6400 L
S
U
u
  339.4800 140.1600 m
  338.1600 139.6800 L
S
U
u
  336.8400 139.2000 m
  335.4000 138.8400 L
S
U
u
  334.0800 138.3600 m
  332.7600 137.8800 L
S
U
u
  331.4400 137.4000 m
  330.1200 136.9200 L
S
U
u
  328.6800 136.5600 m
  327.3600 136.0800 L
S
U
u
  326.0400 135.6000 m
  324.7200 135.1200 L
S
U
u
  323.2800 134.7600 m
  321.9600 134.2800 L
S
U
u
  320.6400 133.8000 m
  319.3200 133.3200 L
S
U
u
  318.0000 132.8400 m
  316.5600 132.4800 L
S
U
u
  315.2400 132.0000 m
  313.9200 131.5200 L
S
U
u
  312.6000 131.0400 m
  311.2800 130.5600 L
S
U
u
  309.8400 130.2000 m
  308.5200 129.7200 L
S
U
u
  307.2000 129.2400 m
  305.8800 128.7600 L
S
U
u
  304.5600 128.4000 m
  303.3600 127.9200 L
S
U
u
  302.0400 127.4400 m
  300.7200 126.9600 L
S
U
u
  299.2800 126.6000 m
  297.9600 126.1200 L
S
U
u
  296.6400 125.6400 m
  295.3200 125.1600 L
S
U
u
  294.0000 124.8000 m
  292.6800 124.3200 L
S
U
u
  291.3600 123.8400 m
  290.0400 123.3600 L
S
U
u
  288.6000 123.0000 m
  287.2800 122.5200 L
S
U
u
  285.9600 122.0400 m
  284.6400 121.5600 L
S
U
u
  283.3200 121.0800 m
  281.8800 120.7200 L
S
U
u
  280.5600 120.2400 m
  279.2400 119.7600 L
S
U
u
  277.9200 119.2800 m
  276.4800 118.9200 L
S
U
u
  275.1600 118.4400 m
  273.8400 117.9600 L
S
U
u
  272.5200 117.4800 m
  271.2000 117.0000 L
S
U
u
  269.7600 116.6400 m
  268.4400 116.1600 L
S
U
u
  267.1200 115.6800 m
  265.8000 115.2000 L
S
U
u
  264.4800 114.7200 m
  263.0400 114.3600 L
S
U
u
  261.7200 113.8800 m
  260.4000 113.4000 L
S
U
u
  259.0800 112.9200 m
  257.6400 112.5600 L
S
U
u
  256.3200 112.0800 m
  255.0000 111.6000 L
S
U
u
  253.6800 111.1200 m
  252.3600 110.6400 L
S
U
u
  250.9200 110.2800 m
  249.6000 109.8000 L
S
U
u
  248.2800 109.3200 m
  246.9600 108.8400 L
S
U
u
  245.6400 108.3600 m
  244.2000 108.0000 L
S
U
u
  242.8800 107.5200 m
  241.5600 107.0400 L
S
U
u
  240.2400 106.5600 m
  238.8000 106.2000 L
S
U
u
  237.4800 105.7200 m
  236.1600 105.2400 L
S
U
u
  234.9600 104.7600 m
  233.6400 104.2800 L
S
U
u
  232.2000 103.9200 m
  230.8800 103.4400 L
S
U
u
  229.5600 102.9600 m
  228.2400 102.4800 L
S
U
u
  0.000 0.000 0.000 1.000 K
  228.3600 199.0800 m
  228.3600 197.6400 L
S
U
u
  228.3600 196.2000 m
  228.3600 194.7600 L
S
U
u
  228.3600 193.3200 m
  228.3600 191.8800 L
S
U
u
  228.3600 190.4400 m
  228.3600 189.0000 L
S
U
u
  228.3600 187.5600 m
  228.3600 186.1200 L
S
U
u
  228.3600 184.6800 m
  228.3600 183.2400 L
S
U
u
  228.3600 181.8000 m
  228.3600 180.3600 L
S
U
u
  228.3600 178.9200 m
  228.3600 177.4800 L
S
U
u
  228.3600 176.0400 m
  228.3600 174.6000 L
S
U
u
  228.3600 173.1600 m
  228.3600 171.7200 L
S
U
u
  228.3600 170.2800 m
  228.3600 168.8400 L
S
U
u
  228.3600 167.5200 m
  228.3600 166.0800 L
S
U
u
  228.3600 164.6400 m
  228.3600 163.2000 L
S
U
u
  228.3600 161.7600 m
  228.3600 160.3200 L
S
U
u
  228.3600 158.8800 m
  228.3600 157.4400 L
S
U
u
  228.3600 156.0000 m
  228.3600 154.5600 L
S
U
u
  228.3600 153.1200 m
  228.3600 151.6800 L
S
U
u
  228.3600 150.2400 m
  228.3600 148.8000 L
S
U
u
  228.3600 147.3600 m
  228.3600 145.9200 L
S
U
u
  228.3600 144.4800 m
  228.3600 143.0400 L
S
U
u
  228.3600 141.6000 m
  228.3600 140.1600 L
S
U
u
  228.3600 138.7200 m
  228.3600 137.2800 L
S
U
u
  228.3600 135.8400 m
  228.3600 134.4000 L
S
U
u
  228.3600 132.9600 m
  228.3600 131.5200 L
S
U
u
  228.3600 130.0800 m
  228.3600 128.6400 L
S
U
u
  228.3600 127.2000 m
  228.3600 125.7600 L
S
U
u
  228.3600 124.3200 m
  228.3600 122.8800 L
S
U
u
  228.3600 121.4400 m
  228.3600 120.0000 L
S
U
u
  228.3600 118.5600 m
  228.3600 117.1200 L
S
U
u
  228.3600 115.6800 m
  228.3600 114.2400 L
S
U
u
  228.3600 112.8000 m
  228.3600 111.3600 L
S
U
u
  228.3600 109.9200 m
  228.3600 108.4800 L
S
U
u
  228.3600 107.0400 m
  228.3600 105.6000 L
S
U
u
  228.3600 104.1600 m
  228.3600 102.7200 L
S
U
u
  228.3600 101.2800 m
  228.3600 99.9600 L
S
U
u
  228.3600 98.5200 m
  228.3600 97.0800 L
S
U
u
  228.3600 95.6400 m
  228.3600 94.2000 L
S
U
u
  228.3600 92.7600 m
  228.3600 91.3200 L
S
U
u
  228.3600 89.8800 m
  228.3600 88.4400 L
S
U
u
  228.3600 87.0000 m
  228.3600 85.5600 L
S
U
u
  228.3600 84.1200 m
  228.3600 82.6800 L
S
U
u
  228.3600 81.2400 m
  228.3600 79.8000 L
S
U
u
  228.3600 78.3600 m
  228.3600 76.9200 L
S
U
u
  228.3600 75.4800 m
  228.3600 74.0400 L
S
U
u
  228.3600 72.6000 m
  228.3600 71.1600 L
S
U
u
  228.3600 69.7200 m
  228.3600 68.2800 L
S
U
u
  228.3600 66.8400 m
  228.3600 65.4000 L
S
U
u
  228.3600 63.9600 m
  228.3600 62.5200 L
S
U
u
  228.3600 61.0800 m
  228.3600 59.6400 L
S
U
u
  228.3600 58.2000 m
  228.3600 56.7600 L
S
U
u
  228.3600 55.3200 m
  228.3600 53.8800 L
S
U
u
  228.3600 52.4400 m
  228.3600 51.0000 L
S
U
u
  228.3600 49.5600 m
  228.3600 48.1200 L
S
U
u
  228.3600 46.6800 m
  228.3600 45.2400 L
S
U
u
  228.3600 43.8000 m
  228.3600 42.3600 L
S
U
u
  228.3600 40.9200 m
  228.3600 39.4800 L
S
U
u
  228.3600 38.0400 m
  228.3600 36.6000 L
S
U
u
  228.3600 35.1600 m
  228.3600 33.7200 L
S
U
u
  228.3600 32.4000 m
  228.3600 30.9600 L
S
U
u
  228.3600 29.5200 m
  228.3600 28.0800 L
S
U
u
  228.3600 26.6400 m
  228.3600 25.2000 L
S
U
u
  228.3600 23.7600 m
  228.3600 22.3200 L
S
U
u
  228.3600 20.8800 m
  228.3600 19.4400 L
S
U
u
  228.3600 18.0000 m
  228.3600 16.5600 L
S
U
u
  228.3600 15.1200 m
  228.3600 13.6800 L
S
U
u
  228.3600 12.2400 m
  228.3600 10.8000 L
S
U
u
  228.3600 9.3600 m
  228.3600 7.9200 L
S
U
u
  228.3600 6.4800 m
  228.3600 5.0400 L
S
U
u
  228.3600 3.6000 m
  228.3600 2.1600 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 12.0000 103.6800 0 Tp
TP
101.228329 Tz
/_Helvetica-Bold 17.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(L\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 424.3200 103.6800 0 Tp
TP
101.228329 Tz
/_Helvetica-Bold 17.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(R\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
2.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  222.0000 32.4000 m
  231.9600 42.3600 L
S
U
u
  0.000 0.000 0.000 1.000 K
  222.0000 42.3600 m
  231.9600 32.4000 L
S
U
u
0.0000 w
  0.000 0.000 0.000 1.000 K
  77.8800 158.1600 m
  205.8000 183.3600 L
S
U
u
0.5000 w
  0.000 0.000 0.000 1.000 K
  206.1600 172.0800 m
  205.8000 183.3600 L
S
U
u
0.0000 w
  0.000 0.000 0.000 1.000 K
  387.7200 156.4800 m
  250.6800 183.3600 L
S
U
u
0.5000 w
  0.000 0.000 0.000 1.000 K
  250.4400 172.0800 m
  250.6800 183.3600 L
S
U
0 To
0.9816 0.1907 -0.1907 0.9816 90.9315 163.4400 0 Tp
TP
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(# of Nodes = n/2 - j\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.9816 -0.1907 0.1907 0.9816 272.1949 180.9600 0 Tp
TP
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(# of Nodes = n/2 - j\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  84.0000 146.5200 m
  84.2400 147.8400 L
  84.8400 149.1600 L
  85.9200 150.3600 L
  87.3600 151.4400 L
  89.1600 152.4000 L
  91.2000 153.2400 L
  93.6000 153.8400 L
  96.1200 154.3200 L
  98.7600 154.5600 L
  101.2800 154.5600 L
  103.8000 154.3200 L
  106.3200 153.8400 L
  108.7200 153.2400 L
  110.7600 152.4000 L
  112.5600 151.4400 L
  114.0000 150.3600 L
  115.0800 149.1600 L
  115.6800 147.8400 L
  115.9200 146.5200 L
  115.6800 145.2000 L
  115.0800 144.0000 L
  114.0000 142.6800 L
  112.5600 141.6000 L
  110.7600 140.6400 L
  108.7200 139.8000 L
  106.3200 139.2000 L
  103.8000 138.7200 L
  101.2800 138.6000 L
  98.7600 138.6000 L
  96.1200 138.7200 L
  93.6000 139.2000 L
  91.2000 139.8000 L
  89.1600 140.6400 L
  87.3600 141.6000 L
  85.9200 142.6800 L
  84.8400 144.0000 L
  84.2400 145.2000 L
  84.0000 146.5200 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 98.4000 142.9200 0 Tp
TP
84.955217 Tz
/_Times-Roman 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(j\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  340.2000 146.5200 m
  340.4400 147.8400 L
  341.0400 149.1600 L
  342.1200 150.3600 L
  343.5600 151.4400 L
  345.3600 152.4000 L
  347.5200 153.2400 L
  349.8000 153.8400 L
  352.3200 154.3200 L
  354.9600 154.5600 L
  357.6000 154.5600 L
  360.2400 154.3200 L
  362.6400 153.8400 L
  365.0400 153.2400 L
  367.0800 152.4000 L
  368.8800 151.4400 L
  370.3200 150.3600 L
  371.2800 149.1600 L
  372.0000 147.8400 L
  372.1200 146.5200 L
  372.0000 145.2000 L
  371.2800 144.0000 L
  370.3200 142.6800 L
  368.8800 141.6000 L
  367.0800 140.6400 L
  365.0400 139.8000 L
  362.6400 139.2000 L
  360.2400 138.7200 L
  357.6000 138.6000 L
  354.9600 138.6000 L
  352.3200 138.7200 L
  349.8000 139.2000 L
  347.5200 139.8000 L
  345.3600 140.6400 L
  343.5600 141.6000 L
  342.1200 142.6800 L
  341.0400 144.0000 L
  340.4400 145.2000 L
  340.2000 146.5200 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 344.6400 142.9200 0 Tp
TP
84.955217 Tz
/_Times-Roman 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(n-j-1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.9063 0.4225 -0.4225 0.9063 87.8687 128.8800 0 Tp
TP
/_Helvetica 17.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.9848 0.1736 -0.1736 0.9848 119.5895 144.4800 0 Tp
TP
/_Helvetica 17.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.9877 0.1565 -0.1565 0.9877 165.4819 153.8400 0 Tp
TP
/_Helvetica 17.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.9877 0.1565 -0.1565 0.9877 290.4019 50.4000 0 Tp
TP
/_Helvetica 17.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.9703 -0.2418 0.2418 0.9703 109.4683 62.1600 0 Tp
TP
/_Helvetica 17.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(. . .\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.9877 -0.1565 0.1565 0.9877 276.2477 156.2400 0 Tp
TP
/_Helvetica 17.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.8192 0.5734 -0.5734 0.8192 375.8876 78.0000 0 Tp
TP
/_Helvetica 17.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.9848 -0.1736 0.1736 0.9848 325.3800 147.1200 0 Tp
TP
/_Helvetica 17.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1021 3683 a(Fig.)i(6.)g(Figure)f(for)g(pro)s(of)f(of)i
Fo(The)-5 b(or)g(em)35 b(3.1)p Fl(.)166 3869 y Fj(supp)s(ose)e(\(0)p
Ff(;)17 b(n)j Fe(\000)h Fj(1\))31 b(is)g(the)h(failed)e(ph)m(ysical)i
(link.)e(De\014ne)j Ff(L)28 b Fj(=)f Fe(f)p Fj(0)p Ff(;)17
b Fj(1)p Ff(;)g Fe(\001)g(\001)g(\001)d Ff(;)2996 3830
y Fc(n)p 2996 3846 43 4 v 3000 3903 a Fp(2)3069 3869
y Fe(\000)20 b Fj(1)p Fe(g)32 b Fj(and)166 3989 y Ff(R)44
b Fj(=)f Fe(f)463 3950 y Fc(n)p 463 3966 V 467 4023 a
Fp(2)515 3989 y Ff(;)569 3950 y Fc(n)p 569 3966 V 573
4023 a Fp(2)650 3989 y Fj(+)28 b(1)p Ff(;)17 b Fe(\001)g(\001)g(\001)d
Ff(;)j(n)29 b Fe(\000)f Fj(1)p Fe(g)p Fj(.)41 b(Let)h
Ff(s)1612 4004 y Fc(i)1682 3989 y Fj(b)s(e)f(the)h(n)m(um)m(b)s(er)g
(of)f(ligh)m(tpaths)g(\(i.e.,)g(logical)166 4110 y(links\))36
b(terminated)f(at)h(no)s(de)h Ff(i)g Fj(that)f(do)h(not)f(use)h(link)f
(\(0)p Ff(;)17 b(n)24 b Fe(\000)i Fj(1\).)36 b(W)-8 b(e)37
b(then)g(observ)m(e)166 4230 y(the)c(follo)m(wing:)1081
4572 y Ff(s)1127 4587 y Fc(i)1183 4572 y Fe(\025)1288
4373 y Fb(8)1288 4448 y(>)1288 4472 y(<)1288 4622 y(>)1288
4647 y(:)1388 4454 y Fc(n)p 1388 4470 V 1392 4527 a Fp(6)1463
4493 y Fj(+)22 b Ff(i)384 b Fj(if)32 b Ff(i)c Fe(2)g
Ff(L)1388 4634 y Fc(n)p 1388 4650 V 1392 4708 a Fp(6)1463
4674 y Fe(\000)23 b Ff(i)f Fj(+)g Ff(n)h Fe(\000)f Fj(1)33
b(if)f Ff(i)c Fe(2)g Ff(R)q(:)166 5019 y Fj(Supp)s(ose)44
b(the)f(logical)c(top)s(ology)i(b)s(ecomes)i(disconnected)h(after)e
(the)h(failure)e(of)h(link)166 5139 y(\(0)p Ff(;)17 b(n)24
b Fe(\000)h Fj(1\),)36 b(and)g(let)g Ff(C)43 b Fj(denote)36
b(the)h(smallest)d(comp)s(onen)m(t)i(\(i.e.,)g(a)g(comp)s(onen)m(t)g
(with)166 5259 y(the)31 b(minim)m(um)d(n)m(um)m(b)s(er)j(of)f(no)s
(des\))h(connected)i(via)d(logical)d(links)k(after)f(the)h(failure)e
(of)166 5380 y(ph)m(ysical)g(link)e(\(0)p Ff(;)17 b(n)e
Fe(\000)g Fj(1\).)28 b(Clearly)-8 b(,)28 b Fe(j)p Ff(C)7
b Fe(j)27 b(\024)h Ff(n=)p Fj(2.)h(Note)g(that)g Ff(L)15
b Fe(\\)g Ff(C)34 b Fe(6)p Fj(=)28 b Fe(;)h Fj(or)f Ff(R)15
b Fe(\\)g Ff(C)35 b Fe(6)p Fj(=)28 b Fe(;)p Fj(,)1769
5712 y(7)p eop
%%Page: 8 8
8 7 bop 166 83 a Fj(and)26 b(assume)g(that,)g(without)g(loss)f(of)h
(generalit)m(y)-8 b(,)25 b Ff(L)8 b Fe(\\)g Ff(C)36 b
Fe(6)p Fj(=)28 b Fe(;)p Fj(.)d(Let)h Ff(t)g Fj(denote)h(the)f(largest)
166 203 y(index)35 b(in)g Ff(L)24 b Fe(\\)g Ff(C)7 b
Fj(.)35 b(Let)h Ff(t)1080 167 y Fd(0)1138 203 y Fj(denote)g(the)g
(smallest)d(index)j(in)e Ff(R)25 b Fe(\\)f Ff(C)42 b
Fj(if)34 b Ff(R)25 b Fe(\\)g Ff(C)39 b Fe(6)p Fj(=)32
b Fe(;)p Fj(,)j(and)166 324 y Ff(t)201 288 y Fd(0)268
324 y Fj(is)42 b(not)i(de\014ned)g(if)e Ff(R)31 b Fe(\\)f
Ff(C)52 b Fj(=)46 b Fe(;)p Fj(.)d(Assume)h(without)f(loss)g(of)g
(generalit)m(y)f(that)h(the)166 444 y(distance)38 b(from)d(no)s(de)j(0)
f(to)f Ff(t)i Fj(is)e(no)h(less)h(than)f(the)h(distance)f(from)f(no)s
(de)h Ff(n)26 b Fe(\000)g Fj(1)36 b(to)h Ff(t)3430 408
y Fd(0)166 565 y Fj(\(i.e.,)31 b Ff(t)d Fe(\025)g Ff(n)20
b Fe(\000)g Ff(t)765 528 y Fd(0)808 565 y Fe(\000)h Fj(1\).)31
b(In)h(the)f(follo)m(wing,)e(w)m(e)k(consider)e(four)g(cases)i(for)e
(the)h(v)-5 b(alue)31 b(of)f Ff(t)166 685 y Fj(and)j(sho)m(w)g(the)g
(con)m(tradiction)f(to)g(the)h(existence)h(of)e Ff(C)40
b Fj(in)32 b(eac)m(h)h(case.)215 926 y Fg(Case)h(1:)e
Ff(t)c Fe(\024)744 886 y Fc(n)p 744 902 43 4 v 748 960
a Fp(4)819 926 y Fe(\000)23 b Fj(1.)264 1046 y(In)j(this)g(case,)h(the)
g(distance)f(in)g(the)g(clo)s(c)m(kwise)h(direction)e(from)g
Ff(t)h Fj(to)g Ff(t)2847 1010 y Fd(0)2897 1046 y Fj(is)g(larger)f(than)
264 1166 y Ff(n=)p Fj(2,)34 b(and)h Ff(C)k Fe(\032)32
b Ff(L)k Fj(\(i.e.,)e Ff(R)25 b Fe(\\)f Ff(C)39 b Fj(=)32
b Fe(;)p Fj(.\))i(Since)i Ff(t)f Fj(is)f(the)i(largest)e(index)h(in)f
Ff(L)25 b Fe(\\)f Ff(C)7 b Fj(,)35 b(it)264 1287 y(implies)c(that)j
Fe(j)p Ff(C)7 b Fe(j)29 b(\024)h Ff(t)24 b Fj(+)f(1,)33
b(hence,)j(no)s(de)e Ff(t)g Fj(can)g(only)f(b)s(e)h(connected)i(to)e
(at)f(most)g Ff(t)264 1407 y Fj(other)26 b(no)s(des)g(in)f
Ff(C)7 b Fj(.)26 b(Ho)m(w)m(ev)m(er,)j(b)m(y)d(the)h(de\014nition)e(of)
g Ff(s)2297 1422 y Fc(t)2327 1407 y Fj(,)h(no)s(de)g
Ff(t)g Fj(m)m(ust)g(b)s(e)g(connected)264 1528 y(to)32
b(at)g(least)740 1488 y Fc(n)p 740 1504 V 744 1562 a
Fp(6)815 1528 y Fj(+)22 b Ff(t)33 b Fj(no)s(des)g(all)e(in)g
Ff(C)7 b Fj(,)33 b(a)f(con)m(tradiction.)215 1648 y Fg(Case)i(2:)e
Ff(t)c Fe(\025)744 1609 y Fc(n)p 744 1625 V 748 1682
a Fp(3)797 1648 y Fj(.)264 1768 y(By)34 b(the)h(de\014nition)f(of)g
Ff(s)1183 1783 y Fc(t)1212 1768 y Fj(,)h(no)s(de)f Ff(t)h
Fj(m)m(ust)f(b)s(e)h(connected)h(to)e(at)g(least)2898
1729 y Fc(n)p 2898 1745 V 2902 1803 a Fp(6)2974 1768
y Fj(+)23 b Ff(t)35 b Fj(\(i.e.,)f(at)264 1889 y(least)502
1850 y Fc(n)p 502 1866 V 506 1923 a Fp(2)554 1889 y Fj(\))f(no)s(des)g
(in)f Ff(C)7 b Fj(.)33 b(Ho)m(w)m(ev)m(er,)i Fe(j)p Ff(C)7
b Fe(j)26 b(\024)j Ff(n=)p Fj(2,)j(a)g(con)m(tradiction.)215
2009 y Fg(Case)i(3:)576 1970 y Fc(n)p 576 1986 V 580
2043 a Fp(4)657 2009 y Fe(\024)28 b Ff(t)g Fe(\024)940
1970 y Fc(n)p 940 1986 V 944 2043 a Fp(3)1015 2009 y
Fe(\000)22 b Fj(2.)264 2130 y(F)-8 b(or)31 b(an)m(y)i(no)s(de)g
Ff(i)28 b Fe(2)g Ff(C)h Fe(\\)22 b Ff(R)q Fj(,)33 b(w)m(e)g(then)g(ha)m
(v)m(e)h Ff(n)22 b Fe(\000)h Ff(t)f Fe(\000)g Fj(1)28
b Fe(\024)g Ff(i)g Fe(\024)2619 2090 y Fc(n)p 2619 2106
V 2623 2164 a Fp(2)2694 2130 y Fj(+)22 b Ff(t)p Fj(.)32
b(\(See)i(Figure)d(6)264 2250 y(for)j(clari\014cation)e(when)k
Ff(j)i Fj(=)31 b Ff(t)p Fj(.\))k(This)g(then)g(implies)e(that)h
Fe(j)p Ff(C)d Fe(\\)24 b Ff(R)q Fe(j)31 b(\024)h Fj(2)p
Ff(t)24 b Fe(\000)3202 2211 y Fc(n)p 3202 2227 V 3206
2284 a Fp(2)3278 2250 y Fj(+)g(2,)264 2370 y(whic)m(h)31
b(is)g Fe(j)p Ff(C)25 b Fe(\\)19 b Ff(R)q Fe(j)28 b(\024)1092
2331 y Fc(n)p 1092 2347 V 1096 2405 a Fp(6)1163 2370
y Fe(\000)20 b Fj(2.)31 b(By)g(the)g(de\014nition)f(of)h
Ff(s)2272 2385 y Fc(t)2301 2370 y Fj(,)g(no)s(de)h Ff(t)f
Fj(m)m(ust)g(b)s(e)g(connected)264 2491 y(to)c(at)h(least)f
Ff(t)12 b Fj(+)862 2451 y Fc(n)p 862 2467 V 866 2525
a Fp(6)943 2491 y Fj(no)s(des)28 b(in)f Ff(C)7 b Fj(,)28
b(where)h(no)s(de)f Ff(t)g Fj(can)g(b)s(e)g(connected)i(to)d(at)h(most)
3250 2451 y Fc(n)p 3250 2467 V 3254 2525 a Fp(6)3315
2491 y Fe(\000)12 b Fj(2)264 2611 y(no)s(des)30 b(in)e
Ff(C)23 b Fe(\\)16 b Ff(R)q Fj(.)29 b(Therefore,)i(no)s(de)f
Ff(t)f Fj(m)m(ust)h(b)s(e)f(connected)i(to)e(at)h(least)e
Ff(t)16 b Fj(+)g(2)29 b(no)s(des)264 2731 y(in)i Ff(C)e
Fe(\\)23 b Ff(L)p Fj(,)33 b(and)g(this)f(is)g(imp)s(ossible)e(since)j
Fe(j)p Ff(C)c Fe(\\)23 b Ff(L)p Fe(j)k(\024)i Ff(t)22
b Fj(+)g(1.)215 2852 y Fg(Case)34 b(4:)e Ff(t)c Fj(=)743
2813 y Fc(n)p 743 2829 V 747 2886 a Fp(3)817 2852 y Fe(\000)23
b Fj(1.)264 2972 y(Since)36 b Ff(n)25 b Fe(\000)g Ff(t)g
Fe(\000)g Fj(1)34 b Fe(\024)g Ff(i)g Fe(\024)1252 2933
y Fc(n)p 1252 2949 V 1256 3007 a Fp(2)1329 2972 y Fj(+)25
b Ff(t)36 b Fj(for)g(an)m(y)h(no)s(de)f Ff(i)f Fe(2)f
Ff(C)e Fe(\\)25 b Ff(R)q Fj(,)36 b Fe(j)p Ff(C)31 b Fe(\\)25
b Ff(R)q Fe(j)34 b(\024)3059 2933 y Fc(n)p 3059 2949
V 3063 3007 a Fp(6)3111 2972 y Fj(.)j(Again,)264 3093
y(b)m(y)k(the)f(de\014nition)f(of)h Ff(s)1188 3108 y
Fc(t)1217 3093 y Fj(,)g(no)s(de)g Ff(t)h Fj(m)m(ust)f(b)s(e)g
(connected)i(to)d(at)h(least)g Ff(t)27 b Fj(+)3119 3053
y Fc(n)p 3119 3069 V 3123 3127 a Fp(6)3212 3093 y Fj(no)s(des)264
3213 y(in)36 b Ff(C)7 b Fj(.)38 b(Therefore,)g(no)s(de)g
Ff(t)g Fj(\(i.e.,)f(no)s(de)1788 3174 y Fc(n)p 1788 3190
V 1792 3247 a Fp(3)1866 3213 y Fe(\000)26 b Fj(1\))37
b(m)m(ust)h(b)s(e)g(connected)h(to)e(all)e(of)i(the)274
3294 y Fc(n)p 274 3310 V 278 3368 a Fp(6)366 3333 y Fj(no)s(des)j(in)f
Ff(C)34 b Fe(\\)28 b Ff(R)41 b Fj(and)e(all)f(of)h(no)s(des)i(in)e
Fe(f)p Fj(0)p Ff(;)17 b Fj(1)p Ff(;)g Fe(\001)g(\001)g(\001)c
Ff(;)2362 3294 y Fc(n)p 2362 3310 V 2366 3368 a Fp(3)2442
3333 y Fe(\000)27 b Fj(2)p Fe(g)p Fj(.)40 b(Consequen)m(tly)-8
b(,)42 b(w)m(e)264 3454 y(ha)m(v)m(e)31 b Ff(C)k Fj(=)28
b Fe(f)p Fj(0)p Ff(;)17 b Fj(1)p Ff(;)g Fe(\001)g(\001)g(\001)c
Ff(;)1116 3414 y Fc(n)p 1116 3430 V 1120 3488 a Fp(3)1186
3454 y Fe(\000)19 b Fj(1)p Fe(g)30 b([f)1537 3414 y Fp(2)p
Fc(n)p 1537 3430 79 4 v 1558 3488 a Fp(3)1625 3454 y
Ff(;)1678 3414 y Fp(2)p Fc(n)p 1678 3430 V 1700 3488
a Fp(3)1784 3454 y Fj(+)18 b(1)p Ff(;)f Fe(\001)g(\001)g(\001)d
Ff(;)2157 3414 y Fp(5)p Fc(n)p 2157 3430 V 2178 3488
a Fp(6)2263 3454 y Fe(\000)k Fj(1)p Fe(g)30 b Fj(\(i.e.,)g
Fe(j)p Ff(C)7 b Fe(j)27 b Fj(=)2980 3414 y Fc(n)p 2980
3430 43 4 v 2984 3488 a Fp(2)3033 3454 y Fj(\).)k(Clearly)-8
b(,)264 3574 y(an)m(y)44 b(no)s(de)f(in)f Ff(C)51 b Fj(can)43
b(only)g(b)s(e)g(connected)i(to)e(no)s(des)h(in)e Ff(C)7
b Fj(,)44 b(and)f(consider)g(no)s(de)264 3694 y Ff(j)g
Fj(=)471 3655 y Fp(2)p Fc(n)p 471 3671 79 4 v 492 3729
a Fp(3)597 3694 y Fj(whic)m(h)c(is)f(in)g Ff(C)33 b Fe(\\)27
b Ff(R)q Fj(.)38 b(Again,)g(b)m(y)h(the)g(de\014nition)f(of)g
Ff(s)2678 3709 y Fc(j)2714 3694 y Fj(,)h(no)s(de)f Ff(j)45
b Fj(m)m(ust)38 b(b)s(e)264 3815 y(connected)c(to)e(at)h(least)1196
3776 y Fc(n)p 1196 3792 43 4 v 1200 3849 a Fp(2)1271
3815 y Fe(\000)23 b Fj(1)32 b(no)s(des)h(implying)d(that)j(no)s(de)g
Ff(j)38 b Fj(m)m(ust)33 b(b)s(e)g(connected)264 3935
y(to)38 b(all)f(no)s(des)i(\(except)i Ff(j)j Fj(itself)7
b(\))38 b(in)g Ff(C)7 b Fj(.)39 b(Ho)m(w)m(ev)m(er,)i(this)d(is)h(imp)s
(ossible)d(since)j(no)s(de)264 4056 y(0,)30 b(for)h(example,)f(cannot)i
(b)s(e)f(connected)h(to)f(no)s(de)g Ff(j)37 b Fj(without)31
b(using)f(link)g(\(0)p Ff(;)17 b(n)i Fe(\000)g Fj(1\))264
4176 y(since)33 b(the)g(shortest)g(route)g(m)m(ust)g(b)s(e)f(applied.)
166 4417 y(This)h(completes)f(the)h(pro)s(of)f(of)g(the)h(theorem.)p
3411 4417 43 60 v 166 4778 a(The)41 b(result)f(in)f(Theorem)h(3.1)g
(sho)m(ws)i(that)d(the)i(shortest)g(path)f(routing)f(guaran)m(tees)166
4898 y(the)d(logical)d(top)s(ology's)i(surviv)-5 b(abilit)m(y)34
b(if)g(its)h(minim)m(um)e(degree)j(\(i.e.,)g(the)g(minim)m(um)166
5019 y(n)m(um)m(b)s(er)i(of)g(no)s(des)g(that)g(eac)m(h)h(no)s(de)f(is)
f(connected)j(to\))d(is)g(at)h(least)f Fe(d)p Fj(2)p
Ff(n=)p Fj(3)p Fe(e)p Fj(.)h(On)g(the)166 5139 y(other)31
b(hand,)g(if)f(the)i(minim)m(um)27 b(degree)32 b(is)e(less)i(than)f
Fe(b)p Ff(n=)p Fj(2)p Fe(c)p Fj(,)g(the)g(shortest)h(path)f(rout-)166
5259 y(ing)41 b(do)s(es)h(not)f(alw)m(a)m(ys)i(guaran)m(tee)f(surviv)-5
b(abilit)m(y)40 b(as)i(can)f(b)s(e)h(seen)h(in)e(the)h(follo)m(wing)166
5380 y(example.)1769 5712 y(8)p eop
%%Page: 9 9
9 8 bop 166 83 a Fj(Let)27 b Ff(V)50 b Fj(=)27 b Fe(f)p
Fj(0)p Ff(;)17 b Fe(\001)g(\001)g(\001)d Ff(;)j(n)11
b Fe(\000)g Fj(1)p Fe(g)28 b Fj(b)s(e)f(the)h(set)g(of)e(no)s(des)i(in)
f(the)g(ring)f(net)m(w)m(ork)j(with)e Ff(n)g Fj(b)s(eing)g(an)166
203 y(ev)m(en)33 b(n)m(um)m(b)s(er.)f(De\014ne)g Ff(V)1126
218 y Fc(e)1191 203 y Fj(=)27 b Fe(f)p Fj(2)p Ff(p)32
b Fe(j)f Fj(0)c Fe(\024)h Ff(p)g Fe(\024)g Ff(n=)p Fj(2)20
b Fe(\000)h Fj(1)p Fe(g)31 b Fj(and)g Ff(V)2545 218 y
Fc(o)2611 203 y Fj(=)d Fe(f)p Fj(2)p Ff(p)19 b Fj(+)h(1)32
b Fe(j)f Fj(0)c Fe(\024)i Ff(p)e Fe(\024)166 324 y Ff(n=)p
Fj(2)16 b Fe(\000)g Fj(1)p Fe(g)p Fj(.)29 b(Consider)h(a)f(connection)h
(request)h(set)f Ff(R)f Fj(=)e Ff(R)2318 339 y Fc(e)2371
324 y Fe([)16 b Ff(R)2527 339 y Fc(o)2582 324 y Fe([)g(f)p
Fj(\(0)p Ff(;)h(n)f Fe(\000)g Fj(1\))p Fe(g)p Fj(,)28
b(where)166 444 y Ff(R)240 459 y Fc(e)315 444 y Fj(=)37
b Fe(f)p Fj(\()p Ff(i;)17 b(j)6 b Fj(\))38 b Fe(j)f Ff(i;)17
b(j)44 b Fe(2)37 b Ff(V)1101 459 y Fc(e)1138 444 y Fe(g)h
Fj(and)h Ff(R)1496 459 y Fc(o)1571 444 y Fj(=)f Fe(f)p
Fj(\()p Ff(i;)17 b(j)6 b Fj(\))37 b Fe(j)h Ff(i;)17 b(j)44
b Fe(2)37 b Ff(V)2358 459 y Fc(o)2396 444 y Fe(g)p Fj(,)i(and)f(assume)
h(that)f(eac)m(h)166 565 y(ligh)m(tpath)f(is)h(established)g(using)g
(the)h(shortest)g(path)g(routing.)e(F)-8 b(rom)37 b(this)h(example,)166
685 y(w)m(e)26 b(note)g(the)f(follo)m(wing:)e(\(i\))h(the)h(logical)e
(top)s(ology)g(corresp)s(onding)i(to)g Ff(R)h Fj(is)f(connected,)166
805 y(\(ii\))32 b(all)g(no)s(des)j(in)e Ff(V)915 820
y Fc(o)987 805 y Fj(\(and)h Ff(V)1273 820 y Fc(e)1310
805 y Fj(,)g(resp)s(ectiv)m(ely\))h(are)f(connected)i(to)e(eac)m(h)h
(other;)f(hence,)166 926 y(the)d(minim)m(um)26 b(degree)31
b(is)f(at)g(least)g Ff(n=)p Fj(2)16 b Fe(\000)i Fj(1,)30
b(and)g(\(iii\))d(when)32 b(ph)m(ysical)e(link)f(\(0)p
Ff(;)17 b(n)f Fe(\000)i Fj(1\))166 1046 y(fails,)34 b(the)i(no)s(des)g
(in)e Ff(V)1021 1061 y Fc(e)1094 1046 y Fj(are)h(completely)f
(disconnected)j(from)d(the)i(no)s(des)g(in)f Ff(V)3185
1061 y Fc(o)3223 1046 y Fj(.)h(The)166 1166 y(discussion)d(for)f(this)g
(example)g(is)g(illustrated)f(in)h(Figure)f(7.)310 2304
y @beginspecial 0 @llx 0 @lly 561 @urx 196 @ury 3600
@rwi @setspecial
%%BeginDocument: fig/fig4.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: C:\WINNT\Profiles\fam\Personal\Research\allerton\fig4.ps
%%CreationDate: () ()
%%BoundingBox: 0 0 561 196
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 561 196
%AI3_TileBox: 0 0 561 196
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

u
  0.000 0.000 0.000 0.000 k
 [] 0 d
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  468.6000 100.3200 m
  468.8400 103.9200 L
  469.4400 107.5200 L
  470.6400 111.0000 L
  472.2000 114.4800 L
  474.2400 117.7200 L
  476.6400 120.8400 L
  479.4000 123.6000 L
  482.5200 126.2400 L
  486.0000 128.6400 L
  489.7200 130.6800 L
  493.8000 132.4800 L
  497.8800 133.9200 L
  502.3200 135.0000 L
  506.7600 135.7200 L
  511.3200 136.0800 L
  515.7600 136.0800 L
  520.2000 135.7200 L
  524.7600 135.0000 L
  529.0800 133.9200 L
  533.2800 132.4800 L
  537.2400 130.6800 L
  540.9600 128.6400 L
  544.4400 126.2400 L
  547.5600 123.6000 L
  550.3200 120.8400 L
  552.8400 117.7200 L
  554.7600 114.4800 L
  556.4400 111.0000 L
  557.5200 107.5200 L
  558.2400 103.9200 L
  558.4800 100.3200 L
  558.2400 96.6000 L
  557.5200 93.0000 L
  556.4400 89.5200 L
  554.7600 86.0400 L
  552.8400 82.8000 L
  550.3200 79.6800 L
  547.5600 76.8000 L
  544.4400 74.1600 L
  540.9600 71.8800 L
  537.2400 69.8400 L
  533.2800 68.0400 L
  529.0800 66.6000 L
  524.7600 65.5200 L
  520.2000 64.8000 L
  515.7600 64.4400 L
  511.3200 64.4400 L
  506.7600 64.8000 L
  502.3200 65.5200 L
  497.8800 66.6000 L
  493.8000 68.0400 L
  489.7200 69.8400 L
  486.0000 71.8800 L
  482.5200 74.1600 L
  479.4000 76.8000 L
  476.6400 79.6800 L
  474.2400 82.8000 L
  472.2000 86.0400 L
  470.6400 89.5200 L
  469.4400 93.0000 L
  468.8400 96.6000 L
  468.6000 100.3200 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 481.0800 95.6400 0 Tp
TP
93.387427 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(K\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 489.1200 91.6800 0 Tp
TP
96.536856 Tz
/_Helvetica 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
  0.000 0.000 0.000 1.000 k
(n/2-1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 507.3600 95.6400 0 Tp
TP
93.387427 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
( Graph\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
2.0000 w
  0.000 0.000 0.000 1.000 K
1 J
1 j
  95.1600 107.8800 m
  93.3600 105.2400 L
  92.0400 102.4800 L
  91.0800 99.4800 L
  90.4800 96.4800 L
  90.2400 93.2400 L
  90.3600 89.8800 L
  90.7200 86.5200 L
  91.5600 83.1600 L
  92.6400 79.5600 L
  94.0800 76.0800 L
  95.7600 72.7200 L
  97.8000 69.1200 L
  99.9600 65.6400 L
  102.4800 62.2800 L
  105.2400 58.9200 L
  108.2400 55.5600 L
  111.3600 52.3200 L
  114.7200 49.3200 L
  118.3200 46.3200 L
  122.0400 43.5600 L
  125.8800 40.9200 L
  129.9600 38.5200 L
  134.2800 36.2400 L
  138.6000 34.2000 L
  143.0400 32.4000 L
  147.6000 30.9600 L
  152.2800 29.7600 L
  157.0800 28.8000 L
  157.6800 28.6800 L
  158.4000 28.5600 L
  159.0000 28.4400 L
  159.6000 28.4400 L
  160.3200 28.3200 L
  160.9200 28.2000 L
  161.6400 28.2000 L
  162.2400 28.0800 L
  162.8400 28.0800 L
  163.5600 27.9600 L
  164.1600 27.9600 L
  164.8800 27.8400 L
  165.4800 27.8400 L
  166.0800 27.7200 L
  166.8000 27.7200 L
  167.4000 27.7200 L
  168.1200 27.6000 L
  168.7200 27.6000 L
  169.4400 27.6000 L
  170.0400 27.6000 L
  170.7600 27.4800 L
  171.2400 27.4800 L
  171.8400 27.4800 L
  172.5600 27.4800 L
  173.1600 27.4800 L
  173.8800 27.3600 L
  174.4800 27.3600 L
  175.2000 27.3600 L
  178.6800 27.3600 L
  182.2800 27.2400 L
  185.8800 27.2400 L
  189.3600 27.2400 L
  192.9600 27.2400 L
  196.5600 27.2400 L
  200.0400 27.3600 L
  203.6400 27.4800 L
  207.1200 27.6000 L
  210.6000 27.8400 L
  214.2000 28.0800 L
  217.5600 28.4400 L
  220.9200 28.8000 L
  224.2800 29.1600 L
  227.7600 29.6400 L
  231.0000 30.1200 L
  234.3600 30.6000 L
  237.6000 31.2000 L
  240.8400 31.9200 L
  243.9600 32.6400 L
  247.0800 33.4800 L
  250.0800 34.3200 L
  253.0800 35.2800 L
  255.9600 36.3600 L
  258.8400 37.4400 L
  261.6000 38.6400 L
  264.3600 39.8400 L
  266.8800 41.1600 L
  269.4000 42.6000 L
  271.8000 44.1600 L
  274.2000 45.7200 L
  276.4800 47.4000 L
  278.6400 49.2000 L
  280.8000 51.1200 L
  282.7200 53.0400 L
  284.6400 55.2000 L
  286.4400 57.3600 L
  288.1200 59.6400 L
  289.6800 62.0400 L
  291.0000 64.5600 L
  292.3200 67.0800 L
  293.4000 69.6000 L
  294.4800 72.2400 L
  295.4400 74.8800 L
  296.1600 77.6400 L
  296.8800 80.5200 L
  297.4800 83.4000 L
  297.9600 86.4000 L
  298.3200 89.4000 L
  298.5600 92.4000 L
  298.6800 95.4000 L
  298.6800 98.4000 L
  298.5600 101.4000 L
  298.3200 104.4000 L
  297.9600 107.4000 L
  297.4800 110.2800 L
  296.8800 113.2800 L
  296.1600 116.1600 L
  295.4400 118.9200 L
  294.4800 121.6800 L
  293.4000 124.3200 L
  292.2000 126.8400 L
  290.8800 129.3600 L
  289.4400 131.7600 L
  287.8800 134.0400 L
  286.2000 136.3200 L
  284.4000 138.3600 L
  282.4800 140.2800 L
  280.4400 142.0800 L
  278.1600 143.7600 L
  275.8800 145.2000 L
  273.3600 146.5200 L
  270.8400 147.7200 L
  268.2000 148.6800 L
  265.4400 149.4000 L
  262.4400 150.0000 L
  259.3200 150.3600 L
  256.0800 150.4800 L
  252.7200 150.3600 L
  249.2400 150.0000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  0.4800 113.4000 m
  0.7200 115.4400 L
  1.3200 117.3600 L
  2.2800 119.1600 L
  3.7200 120.7200 L
  5.4000 121.9200 L
  7.2000 122.6400 L
  9.2400 123.0000 L
  11.2800 123.0000 L
  13.2000 122.6400 L
  15.1200 121.9200 L
  16.6800 120.7200 L
  18.1200 119.1600 L
  19.0800 117.3600 L
  19.6800 115.4400 L
  19.9200 113.4000 L
  19.6800 111.4800 L
  19.0800 109.4400 L
  18.1200 107.7600 L
  16.6800 106.2000 L
  15.1200 105.0000 L
  13.2000 104.1600 L
  11.2800 103.8000 L
  9.2400 103.8000 L
  7.2000 104.1600 L
  5.4000 105.0000 L
  3.7200 106.2000 L
  2.2800 107.7600 L
  1.3200 109.4400 L
  0.7200 111.4800 L
  0.4800 113.4000 L
B
U
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  0.4800 89.4000 m
  0.7200 91.3200 L
  1.3200 93.3600 L
  2.2800 95.0400 L
  3.7200 96.6000 L
  5.4000 97.8000 L
  7.2000 98.6400 L
  9.2400 99.0000 L
  11.2800 99.0000 L
  13.2000 98.6400 L
  15.1200 97.8000 L
  16.6800 96.6000 L
  18.1200 95.0400 L
  19.0800 93.3600 L
  19.6800 91.3200 L
  19.9200 89.4000 L
  19.6800 87.3600 L
  19.0800 85.4400 L
  18.1200 83.6400 L
  16.6800 82.0800 L
  15.1200 80.8800 L
  13.2000 80.1600 L
  11.2800 79.6800 L
  9.2400 79.6800 L
  7.2000 80.1600 L
  5.4000 80.8800 L
  3.7200 82.0800 L
  2.2800 83.6400 L
  1.3200 85.4400 L
  0.7200 87.3600 L
  0.4800 89.4000 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 29.0400 112.4400 0 Tp
TP
93.387427 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(: V\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 43.8000 108.4800 0 Tp
TP
96.536856 Tz
/_Helvetica 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(o\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 29.0400 85.4400 0 Tp
TP
93.387427 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(: V\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 43.8000 81.4800 0 Tp
TP
96.536856 Tz
/_Helvetica 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(e\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  99.2400 117.2400 m
  99.4800 114.3600 L
  100.2000 111.4800 L
  101.2800 108.6000 L
  102.9600 105.7200 L
  105.0000 102.9600 L
  107.5200 100.3200 L
  110.4000 97.8000 L
  113.7600 95.2800 L
  117.3600 93.0000 L
  121.4400 90.7200 L
  125.7600 88.6800 L
  130.4400 86.7600 L
  135.4800 85.0800 L
  140.7600 83.5200 L
  146.2800 82.2000 L
  151.9200 81.0000 L
  157.8000 80.0400 L
  163.8000 79.3200 L
  169.9200 78.7200 L
  176.0400 78.4800 L
  182.2800 78.3600 L
  188.5200 78.4800 L
  194.6400 78.7200 L
  200.7600 79.3200 L
  206.7600 80.0400 L
  212.6400 81.0000 L
  218.4000 82.2000 L
  223.8000 83.5200 L
  229.0800 85.0800 L
  234.0000 86.7600 L
  238.8000 88.6800 L
  243.1200 90.7200 L
  247.2000 93.0000 L
  250.9200 95.2800 L
  254.2800 97.8000 L
  257.1600 100.3200 L
  259.6800 102.9600 L
  261.7200 105.7200 L
  263.2800 108.6000 L
  264.4800 111.4800 L
  265.2000 114.3600 L
  265.4400 117.2400 L
  265.2000 120.1200 L
  264.4800 122.8800 L
  263.2800 125.7600 L
  261.7200 128.5200 L
  259.6800 131.2800 L
  257.1600 133.9200 L
  254.2800 136.5600 L
  250.9200 138.9600 L
  247.2000 141.3600 L
  243.1200 143.5200 L
  238.8000 145.5600 L
  234.0000 147.4800 L
  229.0800 149.2800 L
  223.8000 150.8400 L
  218.4000 152.1600 L
  212.6400 153.3600 L
  206.7600 154.3200 L
  200.7600 155.0400 L
  194.6400 155.5200 L
  188.5200 155.8800 L
  182.2800 156.0000 L
  176.0400 155.8800 L
  169.9200 155.5200 L
  163.8000 155.0400 L
  157.8000 154.3200 L
  151.9200 153.3600 L
  146.2800 152.1600 L
  140.7600 150.8400 L
  135.4800 149.2800 L
  130.4400 147.4800 L
  125.7600 145.5600 L
  121.4400 143.5200 L
  117.3600 141.3600 L
  113.7600 138.9600 L
  110.4000 136.5600 L
  107.5200 133.9200 L
  105.0000 131.2800 L
  102.9600 128.5200 L
  101.2800 125.7600 L
  100.2000 122.8800 L
  99.4800 120.1200 L
  99.2400 117.2400 L
B
U
u
  0.000 0.000 0.000 0.000 k
  151.6800 79.6800 m
  151.9200 77.6400 L
  152.5200 75.7200 L
  153.4800 73.9200 L
  154.9200 72.6000 L
  156.4800 71.4000 L
  158.4000 70.5600 L
  160.3200 70.0800 L
  162.3600 70.0800 L
  164.4000 70.5600 L
  166.2000 71.4000 L
  167.8800 72.6000 L
  169.3200 73.9200 L
  170.2800 75.7200 L
  170.8800 77.6400 L
  171.0000 79.6800 L
  170.8800 81.7200 L
  170.2800 83.6400 L
  169.3200 85.4400 L
  167.8800 86.8800 L
  166.2000 88.0800 L
  164.4000 88.9200 L
  162.3600 89.4000 L
  160.3200 89.4000 L
  158.4000 88.9200 L
  156.4800 88.0800 L
  154.9200 86.8800 L
  153.4800 85.4400 L
  152.5200 83.6400 L
  151.9200 81.7200 L
  151.6800 79.6800 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 158.8800 76.6800 0 Tp
TP
84.407867 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(0\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  255.6000 116.4000 m
  255.8400 114.3600 L
  256.4400 112.4400 L
  257.5200 110.6400 L
  258.8400 109.2000 L
  260.5200 108.0000 L
  262.3200 107.1600 L
  264.3600 106.6800 L
  266.4000 106.6800 L
  268.4400 107.1600 L
  270.1200 108.0000 L
  271.8000 109.2000 L
  273.1200 110.6400 L
  274.2000 112.4400 L
  274.8000 114.3600 L
  275.0400 116.4000 L
  274.8000 118.4400 L
  274.2000 120.3600 L
  273.1200 122.0400 L
  271.8000 123.4800 L
  270.1200 124.6800 L
  268.4400 125.5200 L
  266.4000 126.0000 L
  264.3600 126.0000 L
  262.3200 125.5200 L
  260.5200 124.6800 L
  258.8400 123.4800 L
  257.5200 122.0400 L
  256.4400 120.3600 L
  255.8400 118.4400 L
  255.6000 116.4000 L
B
U
u
  0.000 0.000 0.000 1.000 k
  112.8000 89.4000 m
  112.9200 87.3600 L
  113.6400 85.4400 L
  114.6000 83.6400 L
  115.9200 82.2000 L
  117.6000 81.0000 L
  119.4000 80.1600 L
  121.4400 79.6800 L
  123.3600 79.6800 L
  125.4000 80.1600 L
  127.2000 81.0000 L
  128.8800 82.2000 L
  130.2000 83.6400 L
  131.2800 85.4400 L
  131.8800 87.3600 L
  132.1200 89.4000 L
  131.8800 91.4400 L
  131.2800 93.3600 L
  130.2000 95.1600 L
  128.8800 96.6000 L
  127.2000 97.8000 L
  125.4000 98.6400 L
  123.3600 99.1200 L
  121.4400 99.1200 L
  119.4000 98.6400 L
  117.6000 97.8000 L
  115.9200 96.6000 L
  114.6000 95.1600 L
  113.6400 93.3600 L
  112.9200 91.4400 L
  112.8000 89.4000 L
B
U
u
  0.000 0.000 0.000 0.000 k
  232.4400 89.4000 m
  232.6800 87.3600 L
  233.2800 85.4400 L
  234.2400 83.6400 L
  235.6800 82.2000 L
  237.2400 81.0000 L
  239.1600 80.1600 L
  241.0800 79.6800 L
  243.1200 79.6800 L
  245.1600 80.1600 L
  246.9600 81.0000 L
  248.6400 82.2000 L
  250.0800 83.6400 L
  251.0400 85.4400 L
  251.6400 87.3600 L
  251.8800 89.4000 L
  251.6400 91.4400 L
  251.0400 93.3600 L
  250.0800 95.1600 L
  248.6400 96.6000 L
  246.9600 97.8000 L
  245.1600 98.6400 L
  243.1200 99.1200 L
  241.0800 99.1200 L
  239.1600 98.6400 L
  237.2400 97.8000 L
  235.6800 96.6000 L
  234.2400 95.1600 L
  233.2800 93.3600 L
  232.6800 91.4400 L
  232.4400 89.4000 L
B
U
u
  0.000 0.000 0.000 1.000 k
  196.5600 79.6800 m
  196.8000 77.6400 L
  197.4000 75.7200 L
  198.3600 73.9200 L
  199.8000 72.6000 L
  201.3600 71.4000 L
  203.2800 70.5600 L
  205.2000 70.0800 L
  207.2400 70.0800 L
  209.2800 70.5600 L
  211.0800 71.4000 L
  212.7600 72.6000 L
  214.2000 73.9200 L
  215.1600 75.7200 L
  215.7600 77.6400 L
  216.0000 79.6800 L
  215.7600 81.7200 L
  215.1600 83.6400 L
  214.2000 85.4400 L
  212.7600 86.8800 L
  211.0800 88.0800 L
  209.2800 88.9200 L
  207.2400 89.4000 L
  205.2000 89.4000 L
  203.2800 88.9200 L
  201.3600 88.0800 L
  199.8000 86.8800 L
  198.3600 85.4400 L
  197.4000 83.6400 L
  196.8000 81.7200 L
  196.5600 79.6800 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 199.6800 76.6800 0 Tp
TP
84.407867 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 0.000 K
0 j
  0.000 0.000 0.000 0.000 k
(n-1\r) Tx
TO
  0.000 0.000 0.000 0.000 K
u
2.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  151.6800 79.6800 m
  150.9600 78.4800 L
  150.3600 77.4000 L
  149.6400 76.4400 L
  148.9200 75.4800 L
  148.2000 74.7600 L
  147.4800 74.0400 L
  146.7600 73.4400 L
  145.9200 72.9600 L
  145.2000 72.4800 L
  144.4800 72.0000 L
  143.7600 71.6400 L
  142.9200 71.2800 L
  142.2000 70.9200 L
  141.4800 70.5600 L
  138.4800 69.4800 L
  135.6000 68.6400 L
  132.8400 68.0400 L
  130.2000 67.6800 L
  127.6800 67.5600 L
  125.2800 67.6800 L
  123.0000 68.0400 L
  120.9600 68.4000 L
  118.9200 69.0000 L
  117.0000 69.8400 L
  115.2000 70.6800 L
  113.4000 71.7600 L
  111.7200 72.8400 L
  110.1600 73.9200 L
  109.3200 74.6400 L
  108.3600 75.3600 L
  107.6400 76.0800 L
  106.8000 76.9200 L
  105.9600 77.7600 L
  105.2400 78.7200 L
  104.4000 79.6800 L
  103.6800 80.6400 L
  102.9600 81.7200 L
  102.2400 82.8000 L
  101.6400 84.1200 L
  100.8000 85.5600 L
  100.0800 87.0000 L
  99.3600 88.6800 L
  98.7600 90.3600 L
  98.2800 92.0400 L
  97.8000 93.8400 L
  97.5600 95.6400 L
  97.4400 97.4400 L
  97.5600 99.2400 L
  97.8000 101.1600 L
  98.2800 102.9600 L
  99.0000 104.8800 L
  99.9600 106.6800 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  90.2400 116.4000 m
  90.4800 114.3600 L
  91.0800 112.4400 L
  92.0400 110.6400 L
  93.4800 109.2000 L
  95.1600 108.0000 L
  96.9600 107.1600 L
  99.0000 106.6800 L
  101.0400 106.6800 L
  102.9600 107.1600 L
  104.8800 108.0000 L
  106.4400 109.2000 L
  107.8800 110.6400 L
  108.8400 112.4400 L
  109.4400 114.3600 L
  109.6800 116.4000 L
  109.4400 118.4400 L
  108.8400 120.3600 L
  107.8800 122.0400 L
  106.4400 123.4800 L
  104.8800 124.6800 L
  102.9600 125.5200 L
  101.0400 126.0000 L
  99.0000 126.0000 L
  96.9600 125.5200 L
  95.1600 124.6800 L
  93.4800 123.4800 L
  92.0400 122.0400 L
  91.0800 120.3600 L
  90.4800 118.4400 L
  90.2400 116.4000 L
B
U
u
2.0000 w
  0.000 0.000 0.000 1.000 K
  250.9200 93.6000 m
  252.3600 93.6000 L
  253.9200 93.7200 L
  255.4800 93.9600 L
  257.1600 94.2000 L
  258.9600 94.5600 L
  260.7600 94.9200 L
  262.5600 95.4000 L
  264.3600 96.0000 L
  266.1600 96.6000 L
  267.9600 97.2000 L
  269.5200 97.9200 L
  271.2000 98.7600 L
  272.7600 99.6000 L
  274.2000 100.4400 L
  275.5200 101.4000 L
  276.4800 102.2400 L
  277.3200 102.9600 L
  278.0400 103.8000 L
  278.7600 104.6400 L
  279.3600 105.4800 L
  279.9600 106.3200 L
  280.4400 107.1600 L
  280.9200 108.0000 L
  281.2800 108.8400 L
  281.5200 109.6800 L
  281.8800 110.4000 L
  282.0000 111.2400 L
  282.2400 111.9600 L
  282.3600 112.6800 L
  282.3600 113.2800 L
  282.4800 113.6400 L
  282.4800 114.1200 L
  282.4800 114.4800 L
  282.4800 114.8400 L
  282.3600 115.2000 L
  282.3600 115.5600 L
  282.3600 115.9200 L
  282.2400 116.1600 L
  282.2400 116.5200 L
  282.1200 116.8800 L
  282.1200 117.2400 L
  281.7600 118.3200 L
  281.5200 119.4000 L
  281.1600 120.4800 L
  280.6800 121.6800 L
  280.2000 122.8800 L
  279.6000 124.0800 L
  278.8800 125.4000 L
  278.1600 126.7200 L
  277.2000 128.0400 L
  276.2400 129.3600 L
  275.1600 130.6800 L
  274.0800 131.8800 L
  272.7600 133.2000 L
  271.5600 134.2800 L
  270.2400 135.2400 L
  268.8000 136.3200 L
  267.4800 137.2800 L
  265.9200 138.1200 L
  264.3600 139.0800 L
  262.6800 139.8000 L
  261.0000 140.6400 L
  259.3200 141.2400 L
  257.5200 141.9600 L
  255.6000 142.4400 L
  253.8000 142.9200 L
  251.8800 143.2800 L
S
U
u
  0.000 0.000 0.000 1.000 K
  216.0000 79.6800 m
  216.6000 78.1200 L
  217.2000 76.8000 L
  218.0400 75.4800 L
  219.0000 74.2800 L
  219.9600 73.2000 L
  221.1600 72.3600 L
  222.3600 71.4000 L
  223.8000 70.6800 L
  225.1200 69.9600 L
  226.6800 69.3600 L
  228.1200 68.8800 L
  229.6800 68.5200 L
  231.2400 68.2800 L
  232.9200 68.0400 L
  234.4800 68.0400 L
  236.0400 68.0400 L
  237.6000 68.0400 L
  239.2800 68.2800 L
  240.8400 68.5200 L
  242.4000 68.7600 L
  243.8400 69.2400 L
  245.4000 69.6000 L
  246.8400 70.2000 L
  248.2800 70.6800 L
  249.7200 71.2800 L
  251.0400 72.0000 L
  252.3600 72.6000 L
  253.5600 73.3200 L
  254.6400 73.9200 L
  255.6000 74.5200 L
  256.5600 75.2400 L
  257.4000 75.9600 L
  258.2400 76.6800 L
  259.0800 77.4000 L
  259.9200 78.2400 L
  260.7600 79.0800 L
  261.4800 79.9200 L
  262.2000 80.8800 L
  262.8000 81.8400 L
  263.4000 82.8000 L
  264.4800 84.4800 L
  265.4400 86.4000 L
  266.1600 88.3200 L
  266.8800 90.3600 L
  267.3600 92.4000 L
  267.7200 94.4400 L
  267.9600 96.6000 L
  267.8400 98.6400 L
  267.6000 100.8000 L
  267.1200 102.8400 L
  266.4000 104.7600 L
  265.4400 106.6800 L
S
U
u
  0.000 0.000 0.000 1.000 K
  112.8000 89.4000 m
  108.7200 90.1200 L
  105.0000 91.0800 L
  101.7600 92.2800 L
  98.7600 93.6000 L
  96.0000 95.1600 L
  93.6000 96.8400 L
  91.5600 98.5200 L
  89.7600 100.4400 L
  88.2000 102.2400 L
  86.8800 104.1600 L
  85.8000 105.9600 L
  84.9600 107.6400 L
  84.3600 109.3200 L
  83.8800 110.8800 L
  83.6400 112.2000 L
  83.5200 113.4000 L
  83.5200 113.6400 L
  83.5200 113.7600 L
  83.5200 113.8800 L
  83.5200 114.1200 L
  83.5200 114.2400 L
  83.5200 114.3600 L
  83.5200 114.4800 L
  83.5200 114.7200 L
  83.6400 114.8400 L
  83.6400 114.9600 L
  83.6400 115.0800 L
  83.6400 115.2000 L
  83.6400 115.3200 L
  83.8800 116.6400 L
  84.2400 117.9600 L
  84.6000 119.4000 L
  84.9600 120.8400 L
  85.4400 122.1600 L
  86.0400 123.6000 L
  86.6400 125.1600 L
  87.3600 126.6000 L
  88.0800 128.1600 L
  88.9200 129.6000 L
  89.8800 131.0400 L
  90.9600 132.4800 L
  92.0400 133.8000 L
  93.3600 135.0000 L
  94.8000 136.3200 L
  96.4800 137.5200 L
  98.4000 138.6000 L
  100.6800 139.6800 L
  103.0800 140.7600 L
  105.9600 141.6000 L
  109.2000 142.5600 L
  112.8000 143.2800 L
S
U
u
  0.000 0.000 0.000 1.000 K
  129.3600 82.5600 m
  129.2400 81.2400 L
  129.3600 79.8000 L
  129.8400 78.2400 L
  130.3200 76.8000 L
  131.1600 75.2400 L
  132.1200 73.8000 L
  133.3200 72.4800 L
  134.6400 71.0400 L
  136.0800 69.6000 L
  137.7600 68.2800 L
  139.5600 66.9600 L
  141.4800 65.6400 L
  143.5200 64.5600 L
  145.6800 63.3600 L
  147.8400 62.4000 L
  150.2400 61.5600 L
  152.6400 60.7200 L
  155.0400 60.1200 L
  157.5600 59.5200 L
  160.2000 59.1600 L
  162.6000 58.9200 L
  165.0000 58.8000 L
  167.5200 58.8000 L
  169.9200 58.9200 L
  172.2000 59.1600 L
  174.7200 59.5200 L
  177.0000 60.0000 L
  179.4000 60.4800 L
  181.5600 61.0800 L
  183.8400 61.8000 L
  185.8800 62.6400 L
  187.9200 63.6000 L
  189.8400 64.5600 L
  191.6400 65.5200 L
  193.3200 66.6000 L
  194.8800 67.8000 L
  196.2000 69.0000 L
  197.4000 70.3200 L
  198.4800 71.6400 L
  199.3200 72.9600 L
S
U
u
  0.000 0.000 0.000 1.000 K
  233.4000 85.3200 m
  233.5200 83.8800 L
  233.5200 82.5600 L
  233.2800 81.1200 L
  232.8000 79.5600 L
  232.3200 78.1200 L
  231.4800 76.6800 L
  230.6400 75.2400 L
  229.5600 73.8000 L
  228.3600 72.4800 L
  227.0400 71.0400 L
  225.6000 69.7200 L
  224.0400 68.4000 L
  222.3600 67.0800 L
  220.5600 65.8800 L
  218.7600 64.8000 L
  216.8400 63.8400 L
  214.8000 62.8800 L
  212.6400 62.0400 L
  210.4800 61.3200 L
  208.3200 60.7200 L
  205.9200 60.2400 L
  203.8800 60.0000 L
  201.6000 59.7600 L
  199.4400 59.6400 L
  197.2800 59.6400 L
  195.1200 59.7600 L
  192.9600 60.0000 L
  190.8000 60.3600 L
  188.6400 60.7200 L
  186.6000 61.2000 L
  184.5600 61.8000 L
  182.5200 62.5200 L
  180.6000 63.2400 L
  178.8000 64.0800 L
  177.1200 65.0400 L
  175.4400 66.0000 L
  173.8800 66.9600 L
  172.5600 68.0400 L
  171.2400 69.2400 L
  170.2800 70.4400 L
  169.2000 71.6400 L
  168.3600 72.9600 L
S
U
u
  0.000 0.000 0.000 1.000 K
  170.1600 75.6000 m
  172.2000 73.3200 L
  174.3600 71.5200 L
  176.6400 70.2000 L
  178.9200 69.1200 L
  181.3200 68.5200 L
  183.6000 68.4000 L
  185.8800 68.5200 L
  188.1600 68.8800 L
  190.3200 69.7200 L
  192.3600 70.8000 L
  194.2800 72.1200 L
  195.9600 73.6800 L
  197.5200 75.6000 L
S
U
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
  112.8000 143.2800 m
  112.9200 141.2400 L
  113.6400 139.3200 L
  114.6000 137.5200 L
  115.9200 136.0800 L
  117.6000 134.8800 L
  119.4000 134.0400 L
  121.4400 133.5600 L
  123.3600 133.5600 L
  125.4000 134.0400 L
  127.2000 134.8800 L
  128.8800 136.0800 L
  130.2000 137.5200 L
  131.2800 139.3200 L
  131.8800 141.2400 L
  132.1200 143.2800 L
  131.8800 145.3200 L
  131.2800 147.2400 L
  130.2000 149.0400 L
  128.8800 150.4800 L
  127.2000 151.6800 L
  125.4000 152.5200 L
  123.3600 153.0000 L
  121.4400 153.0000 L
  119.4000 152.5200 L
  117.6000 151.6800 L
  115.9200 150.4800 L
  114.6000 149.0400 L
  113.6400 147.2400 L
  112.9200 145.3200 L
  112.8000 143.2800 L
B
U
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
  232.4400 143.2800 m
  232.6800 141.2400 L
  233.2800 139.3200 L
  234.2400 137.5200 L
  235.6800 136.0800 L
  237.2400 134.8800 L
  239.1600 134.0400 L
  241.0800 133.5600 L
  243.1200 133.5600 L
  245.1600 134.0400 L
  246.9600 134.8800 L
  248.6400 136.0800 L
  250.0800 137.5200 L
  251.0400 139.3200 L
  251.6400 141.2400 L
  251.8800 143.2800 L
  251.6400 145.3200 L
  251.0400 147.2400 L
  250.0800 149.0400 L
  248.6400 150.4800 L
  246.9600 151.6800 L
  245.1600 152.5200 L
  243.1200 153.0000 L
  241.0800 153.0000 L
  239.1600 152.5200 L
  237.2400 151.6800 L
  235.6800 150.4800 L
  234.2400 149.0400 L
  233.2800 147.2400 L
  232.6800 145.3200 L
  232.4400 143.2800 L
B
U
u
2.0000 w
  0.000 0.000 0.000 1.000 K
  201.4800 71.2800 m
  200.4000 68.7600 L
  198.8400 66.3600 L
  196.9200 64.3200 L
  194.7600 62.4000 L
  192.1200 60.7200 L
  189.2400 59.1600 L
  186.1200 57.9600 L
  182.6400 56.8800 L
  179.0400 55.9200 L
  175.3200 55.2000 L
  171.3600 54.6000 L
  167.5200 54.1200 L
  163.4400 53.7600 L
  159.3600 53.6400 L
  155.2800 53.5200 L
  151.2000 53.6400 L
  147.1200 53.7600 L
  143.2800 54.0000 L
  139.4400 54.3600 L
  135.8400 54.7200 L
  132.3600 55.2000 L
  129.1200 55.8000 L
  126.1200 56.2800 L
  123.4800 57.0000 L
  123.0000 57.1200 L
  122.5200 57.2400 L
  122.1600 57.3600 L
  121.8000 57.4800 L
  121.3200 57.6000 L
  120.9600 57.7200 L
  120.6000 57.8400 L
  120.1200 57.9600 L
  119.7600 58.0800 L
  119.4000 58.2000 L
  118.9200 58.3200 L
  118.5600 58.4400 L
  118.2000 58.6800 L
  117.8400 58.8000 L
  117.4800 58.9200 L
  117.1200 59.0400 L
  116.7600 59.1600 L
  114.6000 60.0000 L
  112.5600 60.9600 L
  110.4000 62.0400 L
  108.3600 63.0000 L
  106.4400 64.2000 L
  104.4000 65.4000 L
  102.4800 66.7200 L
  100.5600 68.0400 L
  98.7600 69.4800 L
  96.8400 71.0400 L
  95.1600 72.6000 L
  93.4800 74.1600 L
  91.8000 75.9600 L
  90.2400 77.7600 L
  88.6800 79.6800 L
  87.3600 81.7200 L
  85.9200 83.7600 L
  84.7200 85.9200 L
  83.5200 88.2000 L
  82.4400 90.6000 L
  81.4800 93.0000 L
  80.6400 95.5200 L
  79.8000 98.1600 L
  79.3200 100.5600 L
  78.7200 102.9600 L
  78.3600 105.4800 L
  78.1200 107.8800 L
  78.0000 110.4000 L
  77.8800 113.0400 L
  78.0000 115.5600 L
  78.3600 118.0800 L
  78.7200 120.6000 L
  79.3200 122.8800 L
  80.0400 125.2800 L
  81.0000 127.6800 L
  82.0800 129.9600 L
  83.4000 132.1200 L
  84.9600 134.2800 L
  86.6400 136.2000 L
  88.6800 138.1200 L
  90.8400 139.9200 L
  93.3600 141.4800 L
  96.0000 142.9200 L
  99.0000 144.2400 L
  102.2400 145.3200 L
  105.7200 146.1600 L
  109.5600 146.8800 L
  113.6400 147.3600 L
S
U
u
  0.000 0.000 0.000 1.000 K
  166.2000 71.4000 m
  167.4000 68.7600 L
  169.0800 66.3600 L
  170.8800 64.2000 L
  173.2800 62.2800 L
  175.9200 60.6000 L
  178.9200 59.0400 L
  182.1600 57.7200 L
  185.5200 56.6400 L
  189.2400 55.6800 L
  192.9600 54.9600 L
  196.9200 54.2400 L
  201.0000 53.7600 L
  205.0800 53.4000 L
  209.1600 53.2800 L
  213.2400 53.1600 L
  217.3200 53.1600 L
  221.2800 53.2800 L
  225.1200 53.5200 L
  228.9600 53.8800 L
  232.5600 54.2400 L
  236.0400 54.7200 L
  239.2800 55.2000 L
  242.1600 55.8000 L
  244.8000 56.4000 L
  245.2800 56.5200 L
  245.7600 56.6400 L
  246.1200 56.7600 L
  246.6000 56.8800 L
  247.0800 57.0000 L
  247.4400 57.1200 L
  247.8000 57.2400 L
  248.2800 57.3600 L
  248.6400 57.4800 L
  249.0000 57.6000 L
  249.3600 57.7200 L
  249.8400 57.9600 L
  250.2000 58.0800 L
  250.5600 58.2000 L
  250.9200 58.3200 L
  251.2800 58.4400 L
  251.6400 58.5600 L
  253.6800 59.5200 L
  255.7200 60.3600 L
  257.7600 61.4400 L
  259.8000 62.5200 L
  261.7200 63.6000 L
  263.6400 64.8000 L
  265.5600 66.1200 L
  267.4800 67.4400 L
  269.1600 68.8800 L
  270.8400 70.4400 L
  272.5200 72.0000 L
  274.2000 73.5600 L
  275.7600 75.3600 L
  277.2000 77.1600 L
  278.6400 79.0800 L
  279.9600 81.1200 L
  281.2800 83.1600 L
  282.4800 85.4400 L
  283.5600 87.7200 L
  284.5200 90.0000 L
  285.3600 92.5200 L
  286.0800 95.0400 L
  286.8000 97.6800 L
  287.2800 100.0800 L
  287.6400 102.4800 L
  288.0000 105.0000 L
  288.1200 107.5200 L
  288.1200 110.0400 L
  288.1200 112.5600 L
  287.8800 115.2000 L
  287.5200 117.7200 L
  287.0400 120.2400 L
  286.3200 122.5200 L
  285.4800 125.0400 L
  284.4000 127.4400 L
  283.2000 129.7200 L
  281.7600 131.8800 L
  280.2000 134.0400 L
  278.2800 136.0800 L
  276.2400 138.0000 L
  273.9600 139.8000 L
  271.4400 141.3600 L
  268.6800 142.8000 L
  265.8000 144.1200 L
  262.5600 145.3200 L
  258.9600 146.2800 L
  255.1200 147.0000 L
  250.9200 147.4800 L
S
U
u
  0.000 0.000 0.000 1.000 K
  272.2800 109.5600 m
  273.3600 106.8000 L
  274.4400 103.9200 L
  275.2800 101.0400 L
  276.0000 98.1600 L
  276.4800 95.2800 L
  276.9600 92.4000 L
  277.0800 89.5200 L
  277.2000 86.6400 L
  277.0800 83.7600 L
  276.8400 81.0000 L
  276.3600 78.2400 L
  275.7600 75.4800 L
  275.0400 72.9600 L
  274.0800 70.3200 L
  273.0000 67.6800 L
  271.6800 65.2800 L
  270.2400 62.7600 L
  268.6800 60.4800 L
  267.0000 58.2000 L
  264.9600 56.0400 L
  262.8000 54.0000 L
  260.4000 51.9600 L
  257.8800 50.1600 L
  255.1200 48.3600 L
  252.2400 46.8000 L
  249.1200 45.2400 L
  245.7600 43.9200 L
  242.2800 42.7200 L
  238.5600 41.6400 L
  234.7200 40.8000 L
  230.6400 39.9600 L
  226.3200 39.4800 L
  221.8800 39.0000 L
  221.2800 39.0000 L
  220.5600 39.0000 L
  219.9600 38.8800 L
  219.4800 38.8800 L
  218.8800 38.8800 L
  218.2800 38.8800 L
  217.5600 38.8800 L
  216.9600 38.7600 L
  216.3600 38.7600 L
  215.6400 38.7600 L
  215.0400 38.7600 L
  214.4400 38.7600 L
  213.7200 38.7600 L
  213.1200 38.7600 L
  212.5200 38.7600 L
  211.8000 38.7600 L
  211.2000 38.7600 L
  210.4800 38.7600 L
  209.8800 38.7600 L
  209.1600 38.7600 L
  208.5600 38.7600 L
  207.8400 38.7600 L
  207.2400 38.7600 L
  206.5200 38.7600 L
  205.9200 38.7600 L
  205.2000 38.7600 L
  204.6000 38.7600 L
  203.8800 38.8800 L
  203.2800 38.8800 L
  202.5600 38.8800 L
  201.9600 38.8800 L
  201.2400 38.8800 L
  200.6400 38.8800 L
  196.2000 39.0000 L
  191.8800 39.1200 L
  187.5600 39.3600 L
  183.2400 39.4800 L
  179.0400 39.7200 L
  174.8400 39.9600 L
  170.7600 40.3200 L
  166.6800 40.5600 L
  162.6000 40.9200 L
  158.5200 41.2800 L
  154.5600 41.7600 L
  150.6000 42.2400 L
  146.7600 42.7200 L
  143.0400 43.2000 L
  139.2000 43.8000 L
  135.6000 44.5200 L
  132.0000 45.1200 L
  128.4000 45.9600 L
  125.0400 46.6800 L
  121.6800 47.5200 L
  118.4400 48.4800 L
  115.2000 49.4400 L
  112.0800 50.5200 L
  109.0800 51.6000 L
  106.0800 52.8000 L
  103.3200 54.0000 L
  100.5600 55.4400 L
  97.9200 56.7600 L
  95.2800 58.2000 L
  92.8800 59.7600 L
  90.6000 61.4400 L
  88.3200 63.1200 L
  86.2800 64.9200 L
  84.2400 66.8400 L
  82.3200 68.8800 L
  80.6400 70.9200 L
  78.9600 73.0800 L
  77.5200 75.2400 L
  76.2000 77.4000 L
  75.1200 79.6800 L
  74.0400 82.0800 L
  73.2000 84.6000 L
  72.3600 87.0000 L
  71.7600 89.6400 L
  71.1600 92.1600 L
  70.6800 94.8000 L
  70.3200 97.4400 L
  70.2000 100.0800 L
  70.0800 102.8400 L
  70.0800 105.4800 L
  70.3200 108.1200 L
  70.5600 110.7600 L
  71.0400 113.4000 L
  71.5200 116.0400 L
  72.2400 118.5600 L
  72.9600 121.0800 L
  73.8000 123.4800 L
  74.7600 125.8800 L
  75.9600 128.2800 L
  77.2800 130.4400 L
  78.7200 132.7200 L
  80.2800 134.7600 L
  81.9600 136.8000 L
  83.7600 138.6000 L
  85.6800 140.4000 L
  87.7200 142.0800 L
  89.8800 143.5200 L
  92.1600 144.9600 L
  94.6800 146.1600 L
  97.2000 147.2400 L
  99.9600 148.2000 L
  102.8400 148.9200 L
  105.7200 149.5200 L
  108.8400 149.8800 L
  112.0800 150.0000 L
  115.5600 150.0000 L
S
U
u
  0.000 0.000 0.000 1.000 K
  237.3600 80.8800 m
  237.0000 78.2400 L
  236.7600 75.8400 L
  236.2800 73.5600 L
  235.9200 71.6400 L
  235.3200 69.7200 L
  234.8400 67.9200 L
  234.2400 66.2400 L
  233.6400 64.8000 L
  232.9200 63.3600 L
  232.2000 62.0400 L
  231.4800 60.8400 L
  230.7600 59.7600 L
  229.9200 58.8000 L
  229.0800 57.8400 L
  228.3600 57.0000 L
  227.4000 56.1600 L
  226.5600 55.3200 L
  225.7200 54.4800 L
  222.0000 51.3600 L
  218.4000 48.6000 L
  214.5600 45.9600 L
  210.7200 43.6800 L
  206.7600 41.5200 L
  202.8000 39.7200 L
  198.7200 38.1600 L
  194.6400 36.8400 L
  190.6800 35.7600 L
  186.6000 34.9200 L
  182.4000 34.3200 L
  178.3200 33.8400 L
  174.2400 33.7200 L
  170.2800 33.7200 L
  166.2000 33.9600 L
  162.2400 34.4400 L
  158.2800 35.1600 L
  154.3200 36.0000 L
  152.5200 36.4800 L
  150.7200 36.9600 L
  148.9200 37.5600 L
  147.2400 38.1600 L
  145.4400 38.8800 L
  143.6400 39.6000 L
  141.8400 40.3200 L
  140.0400 41.1600 L
  138.2400 42.1200 L
  136.4400 43.0800 L
  134.6400 44.0400 L
  132.8400 45.2400 L
  130.9200 46.4400 L
  129.0000 47.6400 L
  127.0800 48.9600 L
  125.1600 50.4000 L
  123.2400 51.9600 L
  121.3200 53.6400 L
  119.1600 55.3200 L
  117.0000 57.2400 L
  114.8400 59.1600 L
  112.6800 61.2000 L
  110.6400 63.3600 L
  108.6000 65.5200 L
  106.5600 67.8000 L
  104.6400 70.0800 L
  102.8400 72.4800 L
  101.1600 74.7600 L
  99.4800 77.1600 L
  98.1600 79.5600 L
  96.8400 82.0800 L
  95.7600 84.6000 L
  94.9200 87.1200 L
  94.3200 89.6400 L
  93.8400 92.1600 L
  93.7200 94.6800 L
  93.8400 97.2000 L
  94.3200 99.7200 L
  95.0400 102.2400 L
  96.1200 104.6400 L
  97.4400 107.0400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  125.0400 80.0400 m
  124.8000 78.6000 L
  124.8000 77.2800 L
  124.8000 75.9600 L
  124.9200 74.7600 L
  125.0400 73.4400 L
  125.2800 72.3600 L
  125.6400 71.0400 L
  126.0000 69.8400 L
  126.4800 68.7600 L
  127.0800 67.5600 L
  127.6800 66.4800 L
  128.5200 65.2800 L
  129.2400 64.2000 L
  130.2000 63.2400 L
  131.1600 62.1600 L
  132.2400 61.2000 L
  133.4400 60.2400 L
  134.7600 59.2800 L
  136.0800 58.3200 L
  137.5200 57.4800 L
  139.0800 56.6400 L
  140.6400 55.8000 L
  142.4400 55.0800 L
  144.2400 54.2400 L
  146.1600 53.5200 L
  148.0800 52.8000 L
  150.2400 52.2000 L
  152.4000 51.4800 L
  154.8000 50.8800 L
  157.2000 50.2800 L
  159.7200 49.8000 L
  162.2400 49.3200 L
  165.0000 48.8400 L
  167.7600 48.3600 L
  170.5200 48.0000 L
  173.2800 47.6400 L
  176.1600 47.2800 L
  179.1600 46.9200 L
  182.1600 46.6800 L
  185.1600 46.4400 L
  188.2800 46.3200 L
  191.2800 46.2000 L
  194.4000 46.0800 L
  197.4000 45.9600 L
  200.4000 45.9600 L
  203.5200 45.9600 L
  206.5200 46.0800 L
  209.4000 46.2000 L
  212.4000 46.3200 L
  215.2800 46.5600 L
  218.0400 46.8000 L
  220.8000 47.0400 L
  223.4400 47.4000 L
  226.0800 47.7600 L
  228.6000 48.1200 L
  231.0000 48.6000 L
  233.4000 49.0800 L
  235.5600 49.6800 L
  237.2400 50.1600 L
  238.6800 50.6400 L
  240.2400 51.1200 L
  241.5600 51.6000 L
  243.0000 52.2000 L
  244.2000 52.6800 L
  245.5200 53.2800 L
  246.7200 53.8800 L
  247.8000 54.6000 L
  248.8800 55.2000 L
  249.9600 55.8000 L
  251.0400 56.5200 L
  252.0000 57.2400 L
  252.8400 57.9600 L
  253.8000 58.6800 L
  254.6400 59.4000 L
  255.3600 60.1200 L
  256.2000 60.8400 L
  256.9200 61.5600 L
  257.6400 62.2800 L
  258.3600 63.1200 L
  258.9600 63.8400 L
  259.6800 64.5600 L
  260.2800 65.4000 L
  260.8800 66.1200 L
  261.4800 66.9600 L
  261.9600 67.6800 L
  262.5600 68.4000 L
  264.0000 70.5600 L
  265.3200 72.7200 L
  266.6400 74.6400 L
  267.7200 76.8000 L
  268.6800 78.8400 L
  269.5200 81.0000 L
  270.2400 83.1600 L
  270.9600 85.3200 L
  271.4400 87.6000 L
  271.8000 89.8800 L
  272.0400 92.1600 L
  272.0400 94.5600 L
  272.0400 97.0800 L
  271.8000 99.6000 L
  271.4400 102.3600 L
  270.8400 105.1200 L
  270.1200 108.0000 L
S
U
0 To
0.9744 0.2249 -0.2249 0.9744 144.3038 155.0400 0 Tp
TP
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.9744 -0.2249 0.2249 0.9744 206.3436 158.6400 0 Tp
TP
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7072 -0.7070 0.7070 0.7072 258.2512 137.4000 0 Tp
TP
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7072 0.7070 -0.7070 0.7072 96.7142 129.0000 0 Tp
TP
/_Helvetica 13.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 1.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  457.3200 99.6000 m
  457.5600 97.5600 L
  458.1600 95.6400 L
  459.2400 93.8400 L
  460.5600 92.2800 L
  462.2400 91.0800 L
  463.9200 90.3600 L
  465.9600 89.8800 L
  468.0000 89.8800 L
  469.9200 90.3600 L
  471.8400 91.0800 L
  473.5200 92.2800 L
  474.8400 93.8400 L
  475.8000 95.6400 L
  476.5200 97.5600 L
  476.6400 99.6000 L
  476.5200 101.5200 L
  475.8000 103.5600 L
  474.8400 105.2400 L
  473.5200 106.8000 L
  471.8400 108.0000 L
  469.9200 108.8400 L
  468.0000 109.2000 L
  465.9600 109.2000 L
  463.9200 108.8400 L
  462.2400 108.0000 L
  460.5600 106.8000 L
  459.2400 105.2400 L
  458.1600 103.5600 L
  457.5600 101.5200 L
  457.3200 99.6000 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 460.4400 96.6000 0 Tp
TP
84.407867 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 0.000 K
0 j
  0.000 0.000 0.000 0.000 k
(n-1\r) Tx
TO
  0.000 0.000 0.000 0.000 K
u
2.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  430.9200 95.4000 m
  432.9600 93.1200 L
  435.2400 91.3200 L
  437.5200 89.8800 L
  439.8000 88.9200 L
  442.0800 88.3200 L
  444.4800 88.0800 L
  446.7600 88.2000 L
  448.9200 88.6800 L
  451.0800 89.5200 L
  453.1200 90.6000 L
  455.0400 91.9200 L
  456.7200 93.6000 L
  458.2800 95.4000 L
S
U
u
  0.000 0.000 0.000 0.000 k
0.5000 w
  0.000 0.000 0.000 1.000 K
  333.0000 100.3200 m
  333.2400 103.9200 L
  333.9600 107.5200 L
  335.1600 111.0000 L
  336.7200 114.4800 L
  338.7600 117.7200 L
  341.1600 120.8400 L
  343.9200 123.6000 L
  347.0400 126.2400 L
  350.5200 128.6400 L
  354.2400 130.6800 L
  358.2000 132.4800 L
  362.4000 133.9200 L
  366.6000 135.0000 L
  371.1600 135.7200 L
  375.6000 136.0800 L
  380.1600 136.0800 L
  384.7200 135.7200 L
  389.1600 135.0000 L
  393.6000 133.9200 L
  397.8000 132.4800 L
  401.7600 130.6800 L
  405.4800 128.6400 L
  408.9600 126.2400 L
  412.0800 123.6000 L
  414.8400 120.8400 L
  417.1200 117.7200 L
  419.1600 114.4800 L
  420.7200 111.0000 L
  421.9200 107.5200 L
  422.5200 103.9200 L
  422.7600 100.3200 L
  422.5200 96.6000 L
  421.9200 93.0000 L
  420.7200 89.5200 L
  419.1600 86.0400 L
  417.1200 82.8000 L
  414.8400 79.6800 L
  412.0800 76.8000 L
  408.9600 74.1600 L
  405.4800 71.8800 L
  401.7600 69.8400 L
  397.8000 68.0400 L
  393.6000 66.6000 L
  389.1600 65.5200 L
  384.7200 64.8000 L
  380.1600 64.4400 L
  375.6000 64.4400 L
  371.1600 64.8000 L
  366.6000 65.5200 L
  362.4000 66.6000 L
  358.2000 68.0400 L
  354.2400 69.8400 L
  350.5200 71.8800 L
  347.0400 74.1600 L
  343.9200 76.8000 L
  341.1600 79.6800 L
  338.7600 82.8000 L
  336.7200 86.0400 L
  335.1600 89.5200 L
  333.9600 93.0000 L
  333.2400 96.6000 L
  333.0000 100.3200 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 345.6000 95.6400 0 Tp
TP
93.387427 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(K\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 353.6400 91.6800 0 Tp
TP
96.536856 Tz
/_Helvetica 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(n/2-1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 371.7600 95.6400 0 Tp
TP
93.387427 Tz
/_Helvetica 12.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
( Graph\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
0.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  412.4400 99.6000 m
  412.6800 97.5600 L
  413.2800 95.6400 L
  414.3600 93.8400 L
  415.5600 92.2800 L
  417.2400 91.0800 L
  419.0400 90.3600 L
  421.0800 89.8800 L
  423.1200 89.8800 L
  425.0400 90.3600 L
  426.9600 91.0800 L
  428.6400 92.2800 L
  429.9600 93.8400 L
  430.9200 95.6400 L
  431.6400 97.5600 L
  431.7600 99.6000 L
  431.6400 101.5200 L
  430.9200 103.5600 L
  429.9600 105.2400 L
  428.6400 106.8000 L
  426.9600 108.0000 L
  425.0400 108.8400 L
  423.1200 109.2000 L
  421.0800 109.2000 L
  419.0400 108.8400 L
  417.2400 108.0000 L
  415.5600 106.8000 L
  414.3600 105.2400 L
  413.2800 103.5600 L
  412.6800 101.5200 L
  412.4400 99.6000 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 419.5200 96.6000 0 Tp
TP
84.407867 Tz
/_Times-Roman 10.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(0\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 174.8400 145.9200 0 Tp
TP
91.441856 Tz
/_Helvetica 24.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(...\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
2.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  239.6400 152.6400 m
  237.6000 154.3200 L
  235.6800 156.0000 L
  233.8800 157.4400 L
  232.3200 158.7600 L
  230.7600 159.9600 L
  229.3200 161.0400 L
  228.1200 162.1200 L
  226.9200 162.9600 L
  225.7200 163.8000 L
  224.6400 164.6400 L
  223.6800 165.3600 L
  222.6000 166.0800 L
  221.6400 166.6800 L
  220.8000 167.2800 L
  217.9200 169.0800 L
  215.1600 170.6400 L
  212.2800 171.9600 L
  209.5200 173.2800 L
  206.6400 174.4800 L
  203.8800 175.5600 L
  201.1200 176.4000 L
  198.2400 177.1200 L
  195.4800 177.7200 L
  192.6000 178.2000 L
  189.6000 178.5600 L
  186.7200 178.6800 L
  183.7200 178.8000 L
  180.6000 178.8000 L
  177.4800 178.6800 L
  174.2400 178.4400 L
  170.8800 178.0800 L
  167.5200 177.6000 L
  164.0400 177.0000 L
  162.3600 176.7600 L
  160.6800 176.4000 L
  159.0000 176.0400 L
  157.3200 175.8000 L
  155.6400 175.3200 L
  153.8400 174.9600 L
  152.0400 174.4800 L
  150.3600 174.0000 L
  148.5600 173.5200 L
  146.7600 173.0400 L
  144.9600 172.4400 L
  143.0400 171.8400 L
  141.2400 171.2400 L
  139.4400 170.6400 L
  137.6400 169.9200 L
  135.7200 169.2000 L
  133.9200 168.3600 L
  132.1200 167.5200 L
  130.2000 166.6800 L
  127.6800 165.3600 L
  125.1600 163.9200 L
  122.6400 162.4800 L
  120.2400 160.8000 L
  117.8400 159.1200 L
  115.5600 157.3200 L
  113.4000 155.4000 L
  111.2400 153.3600 L
  109.3200 151.2000 L
  107.5200 148.9200 L
  105.8400 146.5200 L
  104.2800 144.0000 L
  103.0800 141.2400 L
  102.0000 138.4800 L
  101.0400 135.6000 L
  100.4400 132.4800 L
  100.0800 129.3600 L
  99.9600 126.0000 L
S
U
u
  0.000 0.000 0.000 1.000 K
  127.2000 151.5600 m
  129.2400 153.6000 L
  131.0400 155.4000 L
  132.7200 157.0800 L
  134.4000 158.5200 L
  135.8400 159.9600 L
  137.2800 161.2800 L
  138.4800 162.3600 L
  139.6800 163.4400 L
  140.8800 164.5200 L
  141.9600 165.3600 L
  142.9200 166.3200 L
  143.8800 167.0400 L
  144.8400 167.7600 L
  145.8000 168.4800 L
  146.6400 169.2000 L
  149.6400 171.2400 L
  152.5200 173.2800 L
  155.4000 174.9600 L
  158.2800 176.6400 L
  161.1600 178.0800 L
  164.0400 179.2800 L
  166.8000 180.4800 L
  169.6800 181.4400 L
  172.4400 182.1600 L
  175.3200 182.7600 L
  178.3200 183.2400 L
  181.3200 183.6000 L
  184.3200 183.8400 L
  187.4400 183.9600 L
  190.6800 183.8400 L
  193.9200 183.7200 L
  197.2800 183.3600 L
  200.7600 183.0000 L
  204.2400 182.5200 L
  205.9200 182.1600 L
  207.6000 181.9200 L
  209.2800 181.5600 L
  211.0800 181.2000 L
  212.7600 180.8400 L
  214.5600 180.4800 L
  216.3600 180.0000 L
  218.1600 179.5200 L
  219.8400 179.0400 L
  221.6400 178.4400 L
  223.4400 177.8400 L
  225.2400 177.2400 L
  227.0400 176.5200 L
  228.8400 175.8000 L
  230.7600 175.0800 L
  232.5600 174.2400 L
  234.3600 173.4000 L
  236.2800 172.4400 L
  238.0800 171.4800 L
  240.7200 170.1600 L
  243.2400 168.7200 L
  245.7600 167.0400 L
  248.1600 165.2400 L
  250.5600 163.3200 L
  252.8400 161.2800 L
  255.0000 159.1200 L
  257.1600 156.8400 L
  259.0800 154.4400 L
  260.8800 151.8000 L
  262.4400 149.1600 L
  263.8800 146.2800 L
  265.2000 143.2800 L
  266.1600 140.0400 L
  267.0000 136.6800 L
  267.6000 133.2000 L
  267.8400 129.4800 L
  267.9600 125.6400 L
S
U
u
  0.000 0.000 0.000 1.000 K
  129.3600 150.0000 m
  151.8000 165.7200 L
S
U
u
  0.000 0.000 0.000 1.000 K
  235.2000 150.0000 m
  213.0000 165.7200 L
S
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
 @endspecial 166 2544 a Fl(Fig.)24 b(7.)h(An)f(example)f(of)i(a)f
(simple)e(logical)i(top)s(ology)g(with)f(minim)m(um)e(degree)k
Fi(n=)p Fl(2)8 b Fn(\000)g Fl(1,)24 b(whic)m(h)166 2656
y(is)29 b(not)i(surviv)-5 b(able)28 b(under)h(shortest)i(path)f(ligh)m
(tpath)f(routing.)166 2845 y Fj(F)-8 b(rom)25 b(this)g(example)h(and)g
(the)h(result)f(of)f(Theorem)i(3.1,)e(w)m(e)i(observ)m(e)h(that)e(the)h
(shortest)166 2966 y(path)g(routing)e(can)i(guaran)m(tee)g(the)g
(logical)d(top)s(ology's)h(surviv)-5 b(abilit)m(y)25
b(only)h(when)i(eac)m(h)166 3086 y(no)s(de)36 b(has)g(ric)m(h)f
(connectivit)m(y)-8 b(.)36 b(But)g(the)g(surviv)-5 b(abilit)m(y)34
b(is)h(not)g(guaran)m(teed)i(when)f(the)166 3207 y(minim)m(um)30
b(degree)k(is)f(less)h(than)f(or)g(equal)g(to)g Ff(n=)p
Fj(2)23 b Fe(\000)g Fj(1)33 b(and)g(when)i(the)e(shortest)i(path)166
3327 y(routing)40 b(is)g(applied.)g(In)i(fact,)f(the)g(result)g(in)f
(this)h(example)g(can)g(b)s(e)g(extended)i(to)e(a)166
3447 y(\()p Ff(n=)p Fj(2)20 b Fe(\000)h Fj(1\)-edge)32
b(connected)h(logical)c(top)s(ology)h(b)m(y)j(adding)e
Ff(n=)p Fj(2)20 b Fe(\000)h Fj(2)32 b(more)f(ligh)m(tpaths)166
3568 y(b)s(et)m(w)m(een)43 b(an)m(y)f(t)m(w)m(o)g(no)s(des)g(\()p
Ff(i)p Fj(,)f Ff(j)6 b Fj(\))41 b(for)g Ff(i)h Fe(2)h
Ff(V)1883 3583 y Fc(o)1962 3568 y Fj(and)e Ff(j)49 b
Fe(2)42 b Ff(V)2414 3583 y Fc(e)2492 3568 y Fj(using)f(ph)m(ysical)g
(link)f(\(0,)166 3688 y Ff(n)12 b Fe(\000)g Fj(1\))29
b(if)d(it)h(is)g(the)i(shortest)f(path)g(b)s(et)m(w)m(een)i
Ff(i)e Fj(and)g Ff(j)6 b Fj(.)27 b(Clearly)-8 b(,)27
b(this)h(is)f(alw)m(a)m(ys)h(p)s(ossible)166 3808 y(for)33
b(su\016cien)m(tly)i(large)e Ff(n)p Fj(.)h(Note)g(that)g(the)g(failure)
f(of)g(ph)m(ysical)h(link)f(\(0)p Ff(;)17 b(n)23 b Fe(\000)g
Fj(1\))34 b(w)m(ould)166 3929 y(still)44 b(disconnect)j(the)f(logical)d
(top)s(ology)-8 b(.)45 b(In)h(the)g(next)h(section,)g(w)m(e)g(will)d
(lo)s(ok)g(in)m(to)166 4049 y(the)38 b(shortest)i(path)e(routing)e
(more)i(closely)f(and)i(sho)m(w)g(some)f(in)m(teresting)f(n)m(umerical)
166 4170 y(results.)166 4577 y Fk(4)112 b(Numerical)35
b(Results)166 4918 y Fj(In)47 b(this)g(section,)g(w)m(e)h(presen)m(t)g
(some)f(n)m(umerical)e(results)i(obtained)g(b)m(y)h(a)e(heuristic)166
5038 y(algorithm)30 b(dev)m(elop)s(ed)35 b(based)g(on)e(shortest)i
(path)e(routing.)g(Our)h(heuristic)f(algorithm)166 5159
y(is)f(outlined)f(in)h(the)h(follo)m(wing.)166 5380 y(Giv)m(en)j(a)f
(set)h(of)g(connection)f(requests)j Ff(R)f Fj(and)f(a)f(ring)g(net)m(w)
m(ork)i(with)e Ff(n)h Fj(no)s(des,)h(eac)m(h)1769 5712
y(9)p eop
%%Page: 10 10
10 9 bop 166 83 a Fj(ligh)m(tpath)44 b(is)h(established)g(using)g
(shortest)h(path)g(routing.)e(W)-8 b(e)46 b(then)g(compute)f(the)166
203 y(n)m(um)m(b)s(er)39 b(of)f(connected)j(comp)s(onen)m(ts)e(of)f
(the)i(logical)35 b(top)s(ology)i(after)i(the)g(failure)e(of)166
324 y(eac)m(h)e(ph)m(ysical)f(link.)g(If)g(the)h(logical)c(top)s(ology)
h(remains)i(connected)i(after)e(the)g(failure)166 444
y(of)29 b(an)m(y)i(ph)m(ysical)e(link,)g(then)h(w)m(e)h(do)e(not)h
(need)g(to)g(add)f(an)m(y)i(ligh)m(tpath.)d(Otherwise,)i(let)166
565 y(\()p Ff(m;)17 b(m)q Fj(+)q(1\))22 b(b)s(e)g(the)h(link)e(whose)i
(failure)d(disconnects)k(the)f(logical)c(top)s(ology)h(and)j(creates)
166 685 y(the)44 b(largest)g(n)m(um)m(b)s(er)g(of)f(comp)s(onen)m(ts.)i
(Let)f Ff(C)1992 700 y Fp(1)2031 685 y Ff(;)17 b Fe(\001)g(\001)g(\001)
e Ff(;)i(C)2322 700 y Fc(k)2359 708 y Fa(m)2465 685 y
Fj(b)s(e)44 b(the)g Ff(k)2839 700 y Fc(m)2949 685 y Fj(comp)s(onen)m
(ts)166 805 y(that)e(result)g(from)f(the)i(failure)e(of)g(\()p
Ff(m;)17 b(m)29 b Fj(+)g(1\).)42 b(W)-8 b(e)43 b(then)g(c)m(ho)s(ose)g
(arbitrary)e(no)s(des)166 926 y Ff(u)30 b Fe(2)g Ff(C)418
941 y Fc(k)455 949 y Fa(m)551 926 y Fj(and)35 b Ff(v)e
Fe(2)e Ff(C)990 941 y Fc(k)1027 949 y Fa(m)1085 941 y
Fd(\000)p Fp(1)1179 926 y Fj(.)k(If)e(no)h(ligh)m(tpath)f(exists)i(b)s
(et)m(w)m(een)h Ff(u)d Fj(and)h Ff(v)t Fj(,)g(w)m(e)h(establish)166
1046 y(a)j(ligh)m(tpath)f(b)s(et)m(w)m(een)j Ff(u)e Fj(and)g
Ff(v)k Fj(without)c(using)g(link)f(\()p Ff(m;)17 b(m)27
b Fj(+)e(1\).)39 b(\(Note)f(that)g(this)166 1166 y(newly)43
b(established)g(ligh)m(tpath)e(ma)m(y)h(not)g(b)s(e)h(the)g(shortest)h
(path)e(b)s(et)m(w)m(een)j(the)e(t)m(w)m(o)166 1287 y(no)s(des.\))30
b(If)f(a)g(ligh)m(tpath)f(b)s(et)m(w)m(een)j Ff(u)e Fj(and)h
Ff(v)j Fj(already)28 b(exists,)j(w)m(e)f(c)m(ho)s(ose)g(another)f(no)s
(de)166 1407 y Ff(w)j Fj(suc)m(h)g(that)d(not)h(b)s(oth)g(ligh)m
(tpaths)f(b)s(et)m(w)m(een)j Ff(u)d Fj(and)h Ff(w)i Fj(and)e(b)s(et)m
(w)m(een)i Ff(v)i Fj(and)c Ff(w)i Fj(exist,)166 1528
y(and)d(establish)g(one)h(or)e(t)m(w)m(o)i(ligh)m(tpath\(s\))e(to)h
(set)h(up)g(ligh)m(tpaths)e(b)s(oth)h(b)s(et)m(w)m(een)i
Ff(u)e Fj(and)166 1648 y Ff(w)h Fj(and)e(b)s(et)m(w)m(een)h
Ff(v)j Fj(and)27 b Ff(w)s Fj(,)g(b)s(oth)h(without)f(using)g(link)g(\()
p Ff(m;)17 b(m)12 b Fj(+)g(1\).)27 b(Up)s(on)h(completion)166
1768 y(of)36 b(this)g(pro)s(cess,)h(the)g(n)m(um)m(b)s(er)g(of)e(comp)s
(onen)m(ts)i(of)f(this)g(new)h(logical)c(top)s(ology)i(after)166
1889 y(the)e(failure)f(of)g(\()p Ff(m;)17 b(m)23 b Fj(+)f(1\))33
b(is)f(no)m(w)i(decreased)h(at)e(least)f(b)m(y)i(one.)g(W)-8
b(e)33 b(recompute)g(the)166 2009 y(n)m(um)m(b)s(er)g(of)e(comp)s(onen)
m(ts)i(b)m(y)g(considering)e(the)i(failure)d(of)i(eac)m(h)h(link,)e
(and)h(rep)s(eat)g(the)166 2130 y(ab)s(o)m(v)m(e)h(pro)s(cedure)h(un)m
(til)d(the)i(resulting)f(logical)d(top)s(ology)i(b)s(ecomes)i(surviv)-5
b(able.)166 2531 y(W)d(e)38 b(rep)s(ort)g(sim)m(ulation)d(results)j
(for)f(three)h(di\013eren)m(t)g(ring)f(sizes:)h Ff(n)f
Fj(=)f(100,)i(200)f(and)166 2651 y(300.)c(F)-8 b(or)34
b(eac)m(h)h(net)m(w)m(ork)g(size,)g(the)f(connection)g(request)i(set)f
Ff(R)g Fj(is)f(created)g(using)g(the)166 2772 y(uniform)i(distribution)
g(of)h(probabilit)m(y)f Ff(p)i Fj(that)g(a)f(logical)e(link)i(exists)h
(b)s(et)m(w)m(een)i(pairs)166 2892 y(of)33 b(no)s(des.)i(F)-8
b(or)32 b(eac)m(h)j Ff(p)e Fj(and)h Ff(n)p Fj(,)g(t)m(w)m(o)g(sets)h
(of)e(1000)g(logical)e(top)s(ologies)g(are)j(generated.)166
3012 y(The)41 b(\014rst)g(set)g(is)f(obtained)g(b)m(y)h(generating)f
(1000)f(random)h(logical)d(top)s(ologies)h(\(i.e.,)166
3133 y(1000)32 b(random)h(connection)g(request)i(sets\))f(where)h(some)
e(logical)d(top)s(ologies)h(ma)m(y)i(not)166 3253 y(b)s(e)41
b(connected)i(or)e(ma)m(y)g(b)s(e)g(only)g(1-edge)g(connected.)h(The)g
(second)h(set)f(is)e(obtained)166 3373 y(b)m(y)33 b(generating)f(1000)f
(random)h(logical)d(top)s(ologies)h(whic)m(h)j(are)f(all)f(2-edge)h
(connected.)166 3494 y(F)-8 b(or)32 b(eac)m(h)h Ff(p)p
Fj(,)f Ff(n)p Fj(,)h(and)f(eac)m(h)h(set)g(of)f(1000)f(logical)f(top)s
(ologies,)g(our)i(heuristic)g(algorithm)166 3614 y(is)k(applied,)g(and)
h(the)g(a)m(v)m(erage)h(n)m(um)m(b)s(er)f(of)f(additional)e(logical)g
(links)i(are)g(computed.)166 3735 y(The)e(results)f(are)f(sho)m(wn)i
(in)e(Figures)g(8-10.)166 4136 y(Under)26 b(the)h(same)e(link)f
(probabilit)m(y)-8 b(,)24 b(an)i(arbitrary)e(logical)f(top)s(ology)h
(requires)i(a)g(larger)166 4256 y(a)m(v)m(erage)35 b(n)m(um)m(b)s(er)f
(of)f(additional)e(ligh)m(tpaths)i(than)h(2-edge)g(connected)h(logical)
c(top)s(ol-)166 4377 y(ogy)39 b(b)s(ecause)i(an)e(arbitrary)f(logical)e
(top)s(ology)i(itself)g(can)h(initially)c(b)s(e)40 b(divided)e(in)m(to)
166 4497 y(more)32 b(than)h(one)f(connected)j(comp)s(onen)m(ts.)166
4898 y(W)-8 b(e)38 b(also)f(notice)h(that,)f(as)h(the)h(n)m(um)m(b)s
(er)f(of)f(no)s(des)i(in)e(a)h(logical)c(top)s(ology)j(increases,)166
5019 y(the)27 b(additional)c(n)m(um)m(b)s(er)k(of)f(ligh)m(tpaths)f
(required)i(to)f(ac)m(hiev)m(e)i(surviv)-5 b(abilit)m(y)24
b(decreases)166 5139 y(under)30 b(the)g(same)f(link)f(probabilit)m(y)-8
b(.)27 b(F)-8 b(or)28 b(large)h(net)m(w)m(orks,)i(v)m(ery)g(few)f
(additional)c(ligh)m(t-)166 5259 y(paths)32 b(are)f(required)h(under)g
(shortest)g(path)f(routing)f(ev)m(en)j(with)e(small)e(link)h(probabil-)
166 5380 y(ities.)1745 5712 y(10)p eop
%%Page: 11 11
11 10 bop 310 2163 a @beginspecial 0 @llx 0 @lly 369
@urx 266 @ury 3600 @rwi @setspecial
%%BeginDocument: fig/graph100Revised.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: D:\papers\IS\fig\graph100Revised.ps
%%CreationDate: () ()
%%BoundingBox: 0 0 369 266
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 369 266
%AI3_TileBox: 0 0 369 266
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

u
  0.000 0.000 0.000 0.000 k
 [] 0 d
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  5.1514 5.1514 m
  361.9168 5.1514 L
  361.9168 260.2063 L
  5.1514 260.2063 L
  5.1514 5.1514 L
B
U
u
0.0000 w
  0.000 0.000 0.000 1.000 K
1 J
  54.5092 97.1581 m
  244.3927 97.1581 L
S
U
u
  0.000 0.000 0.000 1.000 K
  54.5092 125.6705 m
  244.3927 125.6705 L
S
U
u
  0.000 0.000 0.000 1.000 K
  54.5092 154.6622 m
  244.3927 154.6622 L
S
U
u
  0.000 0.000 0.000 1.000 K
  54.5092 183.1747 m
  244.3927 183.1747 L
S
U
u
  0.000 0.000 0.000 1.000 K
  54.5092 212.4060 m
  244.3927 212.4060 L
S
U
u
0.5000 w
  0.000 0.000 0.000 0.498 K
  54.5092 212.4060 m
  244.3927 212.4060 L
  244.3927 67.9268 L
  54.5092 67.9268 L
  54.5092 212.4060 L
S
U
u
0.0000 w
  0.000 0.000 0.000 1.000 K
  54.5092 212.4060 m
  54.5092 67.9268 L
S
U
u
  0.000 0.000 0.000 1.000 K
  51.5141 67.9268 m
  54.5092 67.9268 L
S
U
u
  0.000 0.000 0.000 1.000 K
  51.5141 97.1581 m
  54.5092 97.1581 L
S
U
u
  0.000 0.000 0.000 1.000 K
  51.5141 125.6705 m
  54.5092 125.6705 L
S
U
u
  0.000 0.000 0.000 1.000 K
  51.5141 154.6622 m
  54.5092 154.6622 L
S
U
u
  0.000 0.000 0.000 1.000 K
  51.5141 183.1747 m
  54.5092 183.1747 L
S
U
u
  0.000 0.000 0.000 1.000 K
  51.5141 212.4060 m
  54.5092 212.4060 L
S
U
u
  0.000 0.000 0.000 1.000 K
  54.5092 67.9268 m
  244.3927 67.9268 L
S
U
u
  0.000 0.000 0.000 1.000 K
  54.5092 64.9318 m
  54.5092 67.9268 L
S
U
u
  0.000 0.000 0.000 1.000 K
  64.2130 64.9318 m
  64.2130 67.9268 L
S
U
u
  74.7554 64.9318 m
  74.7554 67.9268 L
S
U
u
  84.4592 64.9318 m
  84.4592 67.9268 L
S
U
u
  94.1631 64.9318 m
  94.1631 67.9268 L
S
U
u
  104.7055 64.9318 m
  104.7055 67.9268 L
S
U
u
  114.4093 64.9318 m
  114.4093 67.9268 L
S
U
u
  124.8319 64.9318 m
  124.8319 67.9268 L
S
U
u
  134.5358 64.9318 m
  134.5358 67.9268 L
S
U
u
  144.2396 64.9318 m
  144.2396 67.9268 L
S
U
u
  154.6622 64.9318 m
  154.6622 67.9268 L
S
U
u
  164.4859 64.9318 m
  164.4859 67.9268 L
S
U
u
  174.1897 64.9318 m
  174.1897 67.9268 L
S
U
u
  184.6123 64.9318 m
  184.6123 67.9268 L
S
U
u
  194.4359 64.9318 m
  194.4359 67.9268 L
S
U
u
  204.8586 64.9318 m
  204.8586 67.9268 L
S
U
u
  214.5624 64.9318 m
  214.5624 67.9268 L
S
U
u
  224.2662 64.9318 m
  224.2662 67.9268 L
S
U
u
  234.6889 64.9318 m
  234.6889 67.9268 L
S
U
u
  244.3927 64.9318 m
  244.3927 67.9268 L
S
U
u
0.5000 w
  1.000 1.000 0.498 0.000 K
  109.8569 87.4542 m
  119.6805 84.4592 L
  129.3844 82.1830 L
  139.6872 79.1880 L
  149.5108 77.7504 L
  159.2146 76.9118 L
  169.6373 75.4742 L
  179.4609 74.7554 L
  189.1647 73.9168 L
  199.5874 72.4792 L
  209.4110 71.7604 L
  219.8336 70.2030 L
  229.4176 69.4842 L
  239.2413 67.9268 L
S
U
u
  0.000 1.000 0.000 0.000 K
  89.7304 200.4260 m
  99.4343 154.6622 L
  109.8569 108.4193 L
  119.6805 98.7155 L
  129.3844 88.8918 L
  139.6872 78.4692 L
  149.5108 77.7504 L
  159.2146 76.1930 L
  169.6373 75.4742 L
  179.4609 74.7554 L
  189.1647 73.1980 L
  199.5874 72.4792 L
  209.4110 70.9218 L
  219.8336 70.2030 L
  229.4176 68.7654 L
  239.2413 67.9268 L
S
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  109.8569 89.7304 m
  112.1331 87.4542 L
  109.8569 85.1780 L
  107.7005 87.4542 L
  109.8569 89.7304 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  119.6805 86.7354 m
  121.8369 84.4592 L
  119.6805 82.1830 L
  117.4043 84.4592 L
  119.6805 86.7354 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  129.3844 84.4592 m
  131.6606 82.1830 L
  129.3844 79.9068 L
  127.1082 82.1830 L
  129.3844 84.4592 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  139.6872 81.4642 m
  141.9634 79.1880 L
  139.6872 76.9118 L
  137.5308 79.1880 L
  139.6872 81.4642 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  149.5108 79.9068 m
  151.6672 77.7504 L
  149.5108 75.4742 L
  147.2346 77.7504 L
  149.5108 79.9068 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  159.2146 79.1880 m
  161.4908 76.9118 L
  159.2146 74.7554 L
  156.9384 76.9118 L
  159.2146 79.1880 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  169.6373 77.7504 m
  171.9135 75.4742 L
  169.6373 73.1980 L
  167.4809 75.4742 L
  169.6373 77.7504 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  179.4609 76.9118 m
  181.6173 74.7554 L
  179.4609 72.4792 L
  177.1847 74.7554 L
  179.4609 76.9118 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  189.1647 76.1930 m
  191.4409 73.9168 L
  189.1647 71.7604 L
  186.8885 73.9168 L
  189.1647 76.1930 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  199.5874 74.7554 m
  201.8636 72.4792 L
  199.5874 70.2030 L
  197.4309 72.4792 L
  199.5874 74.7554 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  209.4110 73.9168 m
  211.5674 71.7604 L
  209.4110 69.4842 L
  207.1348 71.7604 L
  209.4110 73.9168 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  219.8336 72.4792 m
  221.9900 70.2030 L
  219.8336 67.9268 L
  217.5574 70.2030 L
  219.8336 72.4792 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  229.4176 71.7604 m
  231.6938 69.4842 L
  229.4176 67.2080 L
  227.2612 69.4842 L
  229.4176 71.7604 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  239.2413 70.2030 m
  241.3977 67.9268 L
  239.2413 65.7704 L
  236.9651 67.9268 L
  239.2413 70.2030 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  87.4542 198.1498 m
  91.8869 198.1498 L
  91.8869 202.5824 L
  87.4542 202.5824 L
  87.4542 198.1498 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  97.1581 152.5058 m
  101.7105 152.5058 L
  101.7105 156.9384 L
  97.1581 156.9384 L
  97.1581 152.5058 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  107.7005 106.1431 m
  112.1331 106.1431 L
  112.1331 110.6955 L
  107.7005 110.6955 L
  107.7005 106.1431 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  117.4043 96.4393 m
  121.8369 96.4393 L
  121.8369 100.8719 L
  117.4043 100.8719 L
  117.4043 96.4393 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  127.1082 86.7354 m
  131.6606 86.7354 L
  131.6606 91.1681 L
  127.1082 91.1681 L
  127.1082 86.7354 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  137.5308 76.1930 m
  141.9634 76.1930 L
  141.9634 80.7454 L
  137.5308 80.7454 L
  137.5308 76.1930 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  147.2346 75.4742 m
  151.6672 75.4742 L
  151.6672 79.9068 L
  147.2346 79.9068 L
  147.2346 75.4742 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  156.9384 73.9168 m
  161.4908 73.9168 L
  161.4908 78.4692 L
  156.9384 78.4692 L
  156.9384 73.9168 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  167.4809 73.1980 m
  171.9135 73.1980 L
  171.9135 77.7504 L
  167.4809 77.7504 L
  167.4809 73.1980 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  177.1847 72.4792 m
  181.6173 72.4792 L
  181.6173 76.9118 L
  177.1847 76.9118 L
  177.1847 72.4792 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  186.8885 70.9218 m
  191.4409 70.9218 L
  191.4409 75.4742 L
  186.8885 75.4742 L
  186.8885 70.9218 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  197.4309 70.2030 m
  201.8636 70.2030 L
  201.8636 74.7554 L
  197.4309 74.7554 L
  197.4309 70.2030 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  207.1348 68.7654 m
  211.5674 68.7654 L
  211.5674 73.1980 L
  207.1348 73.1980 L
  207.1348 68.7654 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  217.5574 67.9268 m
  221.9900 67.9268 L
  221.9900 72.4792 L
  217.5574 72.4792 L
  217.5574 67.9268 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  227.2612 66.4892 m
  231.6938 66.4892 L
  231.6938 70.9218 L
  227.2612 70.9218 L
  227.2612 66.4892 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  236.9651 65.7704 m
  241.3977 65.7704 L
  241.3977 70.2030 L
  236.9651 70.2030 L
  236.9651 65.7704 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 162.9285 240.4393 0 Tp
TP
101.989525 Tz
/_Helvetica-Bold 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(n = 100\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 41.9301 65.1714 0 Tp
TP
94.608704 Tz
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 41.9301 94.4027 0 Tp
TP
94.608704 Tz
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(5\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 36.6589 122.9151 0 Tp
TP
94.608704 Tz
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(10\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 36.6589 151.9068 0 Tp
TP
94.608704 Tz
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(15\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 36.6589 180.4193 0 Tp
TP
94.608704 Tz
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(20\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 36.6589 209.6506 0 Tp
TP
94.608704 Tz
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(25\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7071 0.7071 -0.7071 0.7071 37.1748 35.7005 0 Tp
TP
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.028\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7071 0.7071 -0.7071 0.7071 60.2962 39.4143 0 Tp
TP
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.04\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7071 0.7071 -0.7071 0.7071 80.4227 39.4143 0 Tp
TP
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.06\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7071 0.7071 -0.7071 0.7071 100.6689 39.4143 0 Tp
TP
/_Helvetica-Bold 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.08\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7071 0.7071 -0.7071 0.7071 124.6290 43.2479 0 Tp
TP
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7071 0.7071 -0.7071 0.7071 224.0633 43.2479 0 Tp
TP
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 109.1381 20.3661 0 Tp
TP
102.492763 Tz
/_Helvetica-Bold 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(link probability\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 183.1747 20.3661 0 Tp
TP
102.492763 Tz
/_Helvetica-BoldOblique 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(p\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.0003 1.0000 -1.0000 0.0003 22.7969 60.4992 0 Tp
TP
/_Helvetica-Bold 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(average # of additional lightpaths\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
1 j
  252.6589 124.1131 m
  358.9218 124.1131 L
  358.9218 156.2196 L
  252.6589 156.2196 L
  252.6589 124.1131 L
B
U
u
0.5000 w
  1.000 1.000 0.498 0.000 K
  256.3727 147.2346 m
  276.6190 147.2346 L
S
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  266.1963 149.5108 m
  268.3527 147.2346 L
  266.1963 144.9584 L
  263.9201 147.2346 L
  266.1963 149.5108 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 278.8952 145.1980 0 Tp
TP
94.608704 Tz
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(2 edge-connected\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
  0.000 1.000 0.000 0.000 K
1 j
  256.3727 131.6606 m
  276.6190 131.6606 L
S
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  263.9201 129.3844 m
  268.3527 129.3844 L
  268.3527 133.6972 L
  263.9201 133.6972 L
  263.9201 129.3844 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 278.8952 129.6240 0 Tp
TP
94.608704 Tz
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(arbitrary\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
  0.000 0.000 0.000 1.000 K
1 j
  5.1514 5.1514 m
  361.9168 5.1514 L
  361.9168 260.2063 L
  5.1514 260.2063 L
  5.1514 5.1514 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 96.7987 201.1448 0 Tp
TP
96.643300 Tz
/_Helvetica 8.0000 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(22.953\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 86.6156 105.9035 0 Tp
TP
103.086186 Tz
/_Helvetica-Bold 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(7.037\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 138.1298 90.4493 0 Tp
TP
96.643300 Tz
/_Helvetica 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1.861\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 138.1298 82.4226 0 Tp
TP
96.643300 Tz
/_Helvetica 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1.938\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 218.9950 73.0782 0 Tp
TP
96.643300 Tz
/_Helvetica 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.008\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 218.9950 82.0632 0 Tp
TP
96.643300 Tz
/_Helvetica 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.002\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 86.6156 88.1730 0 Tp
TP
103.086186 Tz
/_Helvetica-Bold 8.0000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3.357\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
1.0000 w
  0.000 0.000 0.000 1.000 K
1 j
  109.8569 106.3827 m
  109.8569 103.9867 L
S
U
u
  109.8569 101.5907 m
  109.8569 99.1947 L
S
U
u
  109.8569 96.7987 m
  109.8569 94.4027 L
S
U
u
  109.8569 92.0067 m
  109.8569 89.6106 L
S
U
u
  109.8569 87.2146 m
  109.8569 84.8186 L
S
U
u
  109.8569 82.4226 m
  109.8569 80.0266 L
S
U
u
  109.8569 77.6306 m
  109.8569 75.2346 L
S
U
u
  109.8569 72.8386 m
  109.8569 70.4426 L
S
U
u
  109.8569 68.0466 m
  109.8569 66.4892 L
S
U
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1667 2402 a Fl(Fig.)30 b(8.)310 4467 y @beginspecial
0 @llx 0 @lly 463 @urx 300 @ury 3600 @rwi @setspecial
%%BeginDocument: fig/graph200Revised.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: D:\papers\IS\fig\graph200Revised.ps
%%CreationDate: () ()
%%BoundingBox: 0 0 463 300
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 463 300
%AI3_TileBox: 0 0 463 300
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

u
  0.000 0.000 0.000 0.000 k
 [] 0 d
  0.000 0.000 0.000 1.000 K
1 j
  5.1514 5.1514 m
  455.3611 5.1514 L
  455.3611 293.8702 L
  5.1514 293.8702 L
  5.1514 5.1514 L
B
U
u
  0.000 0.000 0.000 1.000 K
1 J
  80.7454 94.8819 m
  317.8303 94.8819 L
S
U
u
  0.000 0.000 0.000 1.000 K
  80.7454 111.4143 m
  317.8303 111.4143 L
S
U
u
  0.000 0.000 0.000 1.000 K
  80.7454 127.1082 m
  317.8303 127.1082 L
S
U
u
  0.000 0.000 0.000 1.000 K
  80.7454 142.8020 m
  317.8303 142.8020 L
S
U
u
  0.000 0.000 0.000 1.000 K
  80.7454 158.3760 m
  317.8303 158.3760 L
S
U
u
  0.000 0.000 0.000 1.000 K
  80.7454 174.9085 m
  317.8303 174.9085 L
S
U
u
  0.000 0.000 0.000 1.000 K
  80.7454 190.6023 m
  317.8303 190.6023 L
S
U
u
  0.000 0.000 0.000 1.000 K
  80.7454 206.2962 m
  317.8303 206.2962 L
S
U
u
  0.000 0.000 0.000 1.000 K
  80.7454 222.8286 m
  317.8303 222.8286 L
S
U
u
  0.000 0.000 0.000 1.000 K
  80.7454 238.5225 m
  317.8303 238.5225 L
S
U
u
0.5000 w
  0.000 0.000 0.000 0.498 K
  80.7454 238.5225 m
  317.8303 238.5225 L
  317.8303 79.1880 L
  80.7454 79.1880 L
  80.7454 238.5225 L
S
U
u
0.0000 w
  0.000 0.000 0.000 1.000 K
  80.7454 238.5225 m
  80.7454 79.1880 L
S
U
u
  0.000 0.000 0.000 1.000 K
  76.9118 79.1880 m
  80.7454 79.1880 L
S
U
u
  0.000 0.000 0.000 1.000 K
  76.9118 94.8819 m
  80.7454 94.8819 L
S
U
u
  0.000 0.000 0.000 1.000 K
  76.9118 111.4143 m
  80.7454 111.4143 L
S
U
u
  0.000 0.000 0.000 1.000 K
  76.9118 127.1082 m
  80.7454 127.1082 L
S
U
u
  0.000 0.000 0.000 1.000 K
  76.9118 142.8020 m
  80.7454 142.8020 L
S
U
u
  0.000 0.000 0.000 1.000 K
  76.9118 158.3760 m
  80.7454 158.3760 L
S
U
u
  0.000 0.000 0.000 1.000 K
  76.9118 174.9085 m
  80.7454 174.9085 L
S
U
u
  0.000 0.000 0.000 1.000 K
  76.9118 190.6023 m
  80.7454 190.6023 L
S
U
u
  0.000 0.000 0.000 1.000 K
  76.9118 206.2962 m
  80.7454 206.2962 L
S
U
u
  0.000 0.000 0.000 1.000 K
  76.9118 222.8286 m
  80.7454 222.8286 L
S
U
u
  0.000 0.000 0.000 1.000 K
  76.9118 238.5225 m
  80.7454 238.5225 L
S
U
u
  0.000 0.000 0.000 1.000 K
  80.7454 79.1880 m
  317.8303 79.1880 L
S
U
u
  0.000 0.000 0.000 1.000 K
  80.7454 75.4742 m
  80.7454 79.1880 L
S
U
u
  0.000 0.000 0.000 1.000 K
  93.4443 75.4742 m
  93.4443 79.1880 L
S
U
u
  105.4243 75.4742 m
  105.4243 79.1880 L
S
U
u
  118.1231 75.4742 m
  118.1231 79.1880 L
S
U
u
  130.8220 75.4742 m
  130.8220 79.1880 L
S
U
u
  142.8020 75.4742 m
  142.8020 79.1880 L
S
U
u
  155.5008 75.4742 m
  155.5008 79.1880 L
S
U
u
  168.1997 75.4742 m
  168.1997 79.1880 L
S
U
u
  180.1797 75.4742 m
  180.1797 79.1880 L
S
U
u
  192.8785 75.4742 m
  192.8785 79.1880 L
S
U
u
  205.5774 75.4742 m
  205.5774 79.1880 L
S
U
u
  218.3960 75.4742 m
  218.3960 79.1880 L
S
U
u
  230.3760 75.4742 m
  230.3760 79.1880 L
S
U
u
  243.0749 75.4742 m
  243.0749 79.1880 L
S
U
u
  255.6539 75.4742 m
  255.6539 79.1880 L
S
U
u
  267.6339 75.4742 m
  267.6339 79.1880 L
S
U
u
  280.3328 75.4742 m
  280.3328 79.1880 L
S
U
u
  293.1514 75.4742 m
  293.1514 79.1880 L
S
U
u
  305.1314 75.4742 m
  305.1314 79.1880 L
S
U
u
  317.8303 75.4742 m
  317.8303 79.1880 L
S
U
u
0.5000 w
  1.000 1.000 0.498 0.000 K
  112.1331 153.2246 m
  124.1131 131.5408 L
  136.8120 109.8569 L
  149.5108 88.1730 L
  161.4908 85.1780 L
  174.1897 82.1830 L
  186.8885 79.9068 L
  199.5874 79.9068 L
  211.5674 79.1880 L
  224.3860 79.1880 L
  237.0849 79.1880 L
  249.0649 79.1880 L
  261.6439 79.1880 L
  274.3428 79.1880 L
  286.3228 79.1880 L
  299.1414 79.1880 L
  311.8403 79.1880 L
S
U
u
  0.000 1.000 0.000 0.000 K
  112.1331 220.5524 m
  124.1131 176.3461 L
  136.8120 131.5408 L
  149.5108 87.4542 L
  161.4908 84.4592 L
  174.1897 82.1830 L
  186.8885 79.1880 L
  199.5874 79.1880 L
  211.5674 79.1880 L
  224.3860 79.1880 L
  237.0849 79.1880 L
  249.0649 79.1880 L
  261.6439 79.1880 L
  274.3428 79.1880 L
  286.3228 79.1880 L
  299.1414 79.1880 L
  311.8403 79.1880 L
S
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  112.1331 155.3810 m
  114.4093 153.2246 L
  112.1331 150.9484 L
  109.8569 153.2246 L
  112.1331 155.3810 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  124.1131 133.8170 m
  126.3894 131.5408 L
  124.1131 129.3844 L
  121.8369 131.5408 L
  124.1131 133.8170 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  136.8120 112.1331 m
  139.0882 109.8569 L
  136.8120 107.5807 L
  134.6556 109.8569 L
  136.8120 112.1331 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  149.5108 90.4493 m
  151.6672 88.1730 L
  149.5108 85.8968 L
  147.3544 88.1730 L
  149.5108 90.4493 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  161.4908 87.4542 m
  163.6473 85.1780 L
  161.4908 82.9018 L
  159.2146 85.1780 L
  161.4908 87.4542 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  174.1897 84.4592 m
  176.4659 82.1830 L
  174.1897 79.9068 L
  171.9135 82.1830 L
  174.1897 84.4592 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  186.8885 82.1830 m
  189.1647 79.9068 L
  186.8885 77.6306 L
  184.6123 79.9068 L
  186.8885 82.1830 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  199.5874 82.1830 m
  201.8636 79.9068 L
  199.5874 77.6306 L
  197.4309 79.9068 L
  199.5874 82.1830 L
B
U
u
  1.000 1.000 0.498 0.000 k
  211.5674 81.4642 m
  213.8436 79.1880 L
  211.5674 76.9118 L
  209.4110 79.1880 L
  211.5674 81.4642 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  224.3860 81.4642 m
  226.5424 79.1880 L
  224.3860 76.9118 L
  222.1098 79.1880 L
  224.3860 81.4642 L
B
U
u
  1.000 1.000 0.498 0.000 k
  237.0849 81.4642 m
  239.3611 79.1880 L
  237.0849 76.9118 L
  234.8087 79.1880 L
  237.0849 81.4642 L
B
U
u
  1.000 1.000 0.498 0.000 k
  249.0649 81.4642 m
  251.2213 79.1880 L
  249.0649 76.9118 L
  246.7887 79.1880 L
  249.0649 81.4642 L
B
U
u
  1.000 1.000 0.498 0.000 k
  261.6439 81.4642 m
  263.9201 79.1880 L
  261.6439 76.9118 L
  259.3677 79.1880 L
  261.6439 81.4642 L
B
U
u
  1.000 1.000 0.498 0.000 k
  274.3428 81.4642 m
  276.6190 79.1880 L
  274.3428 76.9118 L
  272.1864 79.1880 L
  274.3428 81.4642 L
B
U
u
  1.000 1.000 0.498 0.000 k
  286.3228 81.4642 m
  288.5990 79.1880 L
  286.3228 76.9118 L
  284.1664 79.1880 L
  286.3228 81.4642 L
B
U
u
  1.000 1.000 0.498 0.000 k
  299.1414 81.4642 m
  301.2978 79.1880 L
  299.1414 76.9118 L
  296.8652 79.1880 L
  299.1414 81.4642 L
B
U
u
  1.000 1.000 0.498 0.000 k
  311.8403 81.4642 m
  314.1165 79.1880 L
  311.8403 76.9118 L
  309.5641 79.1880 L
  311.8403 81.4642 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  109.8569 218.2762 m
  114.4093 218.2762 L
  114.4093 222.8286 L
  109.8569 222.8286 L
  109.8569 218.2762 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  121.8369 174.1897 m
  126.3894 174.1897 L
  126.3894 178.6223 L
  121.8369 178.6223 L
  121.8369 174.1897 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  134.6556 129.3844 m
  139.0882 129.3844 L
  139.0882 133.8170 L
  134.6556 133.8170 L
  134.6556 129.3844 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  147.3544 85.1780 m
  151.6672 85.1780 L
  151.6672 89.6106 L
  147.3544 89.6106 L
  147.3544 85.1780 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  159.2146 82.1830 m
  163.6473 82.1830 L
  163.6473 86.6156 L
  159.2146 86.6156 L
  159.2146 82.1830 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  171.9135 79.9068 m
  176.4659 79.9068 L
  176.4659 84.4592 L
  171.9135 84.4592 L
  171.9135 79.9068 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  184.6123 76.9118 m
  189.1647 76.9118 L
  189.1647 81.4642 L
  184.6123 81.4642 L
  184.6123 76.9118 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  197.4309 76.9118 m
  201.8636 76.9118 L
  201.8636 81.4642 L
  197.4309 81.4642 L
  197.4309 76.9118 L
B
U
u
  0.000 1.000 0.000 0.000 k
  209.4110 76.9118 m
  213.8436 76.9118 L
  213.8436 81.4642 L
  209.4110 81.4642 L
  209.4110 76.9118 L
B
U
u
  0.000 1.000 0.000 0.000 k
  222.1098 76.9118 m
  226.5424 76.9118 L
  226.5424 81.4642 L
  222.1098 81.4642 L
  222.1098 76.9118 L
B
U
u
  0.000 1.000 0.000 0.000 k
  234.8087 76.9118 m
  239.3611 76.9118 L
  239.3611 81.4642 L
  234.8087 81.4642 L
  234.8087 76.9118 L
B
U
u
  0.000 1.000 0.000 0.000 k
  246.7887 76.9118 m
  251.2213 76.9118 L
  251.2213 81.4642 L
  246.7887 81.4642 L
  246.7887 76.9118 L
B
U
u
  0.000 1.000 0.000 0.000 k
  259.3677 76.9118 m
  263.9201 76.9118 L
  263.9201 81.4642 L
  259.3677 81.4642 L
  259.3677 76.9118 L
B
U
u
  0.000 1.000 0.000 0.000 k
  272.1864 76.9118 m
  276.6190 76.9118 L
  276.6190 81.4642 L
  272.1864 81.4642 L
  272.1864 76.9118 L
B
U
u
  0.000 1.000 0.000 0.000 k
  284.1664 76.9118 m
  288.5990 76.9118 L
  288.5990 81.4642 L
  284.1664 81.4642 L
  284.1664 76.9118 L
B
U
u
  0.000 1.000 0.000 0.000 k
  296.8652 76.9118 m
  301.2978 76.9118 L
  301.2978 81.4642 L
  296.8652 81.4642 L
  296.8652 76.9118 L
B
U
u
  0.000 1.000 0.000 0.000 k
  309.5641 76.9118 m
  314.1165 76.9118 L
  314.1165 81.4642 L
  309.5641 81.4642 L
  309.5641 76.9118 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 204.8586 269.9101 0 Tp
TP
101.572833 Tz
/_Helvetica-Bold 14.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(n = 200\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 64.2130 75.1148 0 Tp
TP
93.504636 Tz
/_Helvetica 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 64.2130 90.8087 0 Tp
TP
93.504636 Tz
/_Helvetica 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 64.2130 107.3411 0 Tp
TP
93.504636 Tz
/_Helvetica 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 64.2130 123.0349 0 Tp
TP
93.504636 Tz
/_Helvetica 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 64.2130 138.7288 0 Tp
TP
93.504636 Tz
/_Helvetica 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 64.2130 154.4226 0 Tp
TP
93.504636 Tz
/_Helvetica 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(5\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 64.2130 170.8353 0 Tp
TP
93.504636 Tz
/_Helvetica 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(6\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 64.2130 186.5291 0 Tp
TP
93.504636 Tz
/_Helvetica 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(7\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 64.2130 202.3428 0 Tp
TP
93.504636 Tz
/_Helvetica 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(8\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 64.2130 218.7554 0 Tp
TP
93.504636 Tz
/_Helvetica 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(9\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 57.5042 234.4493 0 Tp
TP
93.504636 Tz
/_Helvetica 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(10\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7071 0.7071 -0.7071 0.7071 59.1766 40.2529 0 Tp
TP
/_Helvetica 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.028\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7071 0.7071 -0.7071 0.7071 89.1267 44.6855 0 Tp
TP
/_Helvetica 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.04\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7071 0.7071 -0.7071 0.7071 113.8056 44.6855 0 Tp
TP
/_Helvetica 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.06\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7071 0.7071 -0.7071 0.7071 138.4845 44.6855 0 Tp
TP
/_Helvetica-Bold 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.08\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7071 0.7071 -0.7071 0.7071 168.3147 49.2379 0 Tp
TP
/_Helvetica 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7071 0.7071 -0.7071 0.7071 293.2665 49.2379 0 Tp
TP
/_Helvetica 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 150.9484 21.3245 0 Tp
TP
102.005057 Tz
/_Helvetica-Bold 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(link probability\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 237.8037 21.3245 0 Tp
TP
102.005057 Tz
/_Helvetica-BoldOblique 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(p\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.0003 1.0000 -1.0000 0.0003 24.0767 63.0150 0 Tp
TP
/_Helvetica-Bold 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(average # of addtional\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.0003 1.0000 -1.0000 0.0003 24.0767 191.9201 0 Tp
TP
/_Helvetica-Bold 11.7500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(lightpaths\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
1 j
  326.0965 140.5258 m
  452.3661 140.5258 L
  452.3661 177.1847 L
  326.0965 177.1847 L
  326.0965 140.5258 L
B
U
u
0.5000 w
  1.000 1.000 0.498 0.000 K
  330.5291 166.6423 m
  350.6556 166.6423 L
S
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  340.2329 168.9185 m
  342.5092 166.6423 L
  340.2329 164.3661 L
  338.0765 166.6423 L
  340.2329 168.9185 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 353.6506 163.4077 0 Tp
TP
93.504636 Tz
/_Helvetica 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(2 edge-connected\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
0.5000 w
  0.000 1.000 0.000 0.000 K
1 j
  330.5291 148.7920 m
  350.6556 148.7920 L
S
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  338.0765 146.5158 m
  342.5092 146.5158 L
  342.5092 150.9484 L
  338.0765 150.9484 L
  338.0765 146.5158 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 353.6506 145.5574 0 Tp
TP
93.504636 Tz
/_Helvetica 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(arbitrary\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 1.000 K
1 j
  5.1514 5.1514 m
  455.3611 5.1514 L
  455.3611 293.8702 L
  5.1514 293.8702 L
  5.1514 5.1514 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 118.8419 226.0632 0 Tp
TP
94.623112 Tz
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(8.889\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 150.9484 106.3827 0 Tp
TP
102.508372 Tz
/_Helvetica-Bold 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.494\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 150.2296 96.6789 0 Tp
TP
102.508372 Tz
/_Helvetica-Bold 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.549\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 183.8935 96.6789 0 Tp
TP
94.623112 Tz
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.023\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 183.8935 86.8552 0 Tp
TP
94.623112 Tz
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.027\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 94.8819 161.6106 0 Tp
TP
94.623112 Tz
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4.632\r) Tx
TO
  0.000 0.000 0.000 1.000 K
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1667 4706 a(Fig.)g(9.)166 4910 y Fk(5)112
b(Concluding)37 b(Remarks)166 5259 y Fj(In)23 b(this)f(pap)s(er,)h(w)m
(e)g(addressed)h(the)f(issue)g(of)f(em)m(b)s(edding)g(surviv)-5
b(able)22 b(logical)e(top)s(ologies)166 5380 y(in)30
b(WDM)g(optical)e(rings.)i(Sp)s(eci\014cally)-8 b(,)29
b(w)m(e)i(considered)h(the)e(problem)f(of)h(main)m(taining)1745
5712 y(11)p eop
%%Page: 12 12
12 11 bop 310 2162 a @beginspecial 0 @llx 0 @lly 415
@urx 299 @ury 3600 @rwi @setspecial
%%BeginDocument: fig/graph300_1.ps
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ImageMark Software Labs
%%For: () ()
%%Title: D:\papers\IS\fig\graph300_1.ps
%%CreationDate: () ()
%%BoundingBox: 0 0 415 299
%%DocumentProcessColors: Black
%%ColorUsage:Color
%%DocumentFonts: Helvetica
%%+Helvetica-Bold
%%+Helvetica-Oblique
%%+Helvetica-BoldOblique
%%+Times-Roman
%%+Times-Bold
%%+Times-Italic
%%+Times-BoldItalic
%%+Courier
%%+Courier-Bold
%%+Courier-Oblique
%%+Courier-BoldOblique
%%+Symbol
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_typography_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.1 0
%%+ procset Adobe_blend_AI5 1.0 0
%%+ procset Adobe_pattern_AI5 1.0 0
%%+ procset Adobe_Illustrator_AI5 1.0 0
%AI5_FileFormat 3.0
%AI3_ColorUsage: Color
%AI3_TemplateBox: 0 0 415 299
%AI3_TileBox: 0 0 415 299
%AI3_DocumentPreview: None
%%Template:
%%PageOrigin:0.0000 0.0000
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 25 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			0
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			1
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop 
			0 eq
			{
				pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				pop
				3
				{
					1 exch sub
					3 index mul 
					1 exch sub
					3 1 roll
				} repeat
				4 -1 roll pop
				setrgbcolor
			} ifelse
		}
		def
	} if
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	level2?
	{
		gsave 1 1 1 1 setcmykcolor currentcmykcolor grestore
		add add add 4 eq
	}
	{
		1 0 0 0 testCMYKColorThrough
		0 1 0 0 testCMYKColorThrough
		0 0 1 0 testCMYKColorThrough
		0 0 0 1 testCMYKColorThrough
		and and and
	} ifelse
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_typography_AI5 1.0 1
%%Title: (Typography Operators)
%%Version: 1.0 
%%CreationDate:(03/26/93) ()
%%Copyright: ((C) 1987-1993 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_typography_AI5 54 dict dup begin
put
/initialize
{
 begin
 begin
	Adobe_typography_AI5 begin
	Adobe_typography_AI5
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
 end
 end
	Adobe_typography_AI5 begin
} def
/terminate
{
	currentdict Adobe_typography_AI5 eq
	{
	 end
	} if
} def
/modifyEncoding
{
	/_tempEncode exch ddef
	/_pntr 0 ddef
	{
		counttomark -1 roll
		dup type dup /marktype eq
		{
			pop pop exit
		}
		{
			/nametype eq
			{
				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll
				put
			}
			{
				/_pntr exch ddef
			} ifelse
		} ifelse
	} loop
	_tempEncode
} def
/TE
{
	StandardEncoding 256 array copy modifyEncoding
	/_nativeEncoding exch def
} def
%
/TZ
{
	dup type /arraytype eq
	{
		/_wv exch def
	}
	{
		/_wv 0 def
	} ifelse
	/_useNativeEncoding exch def
	pop pop
	findfont _wv type /arraytype eq
	{
		_wv makeblendedfont
	} if
	dup length 2 add dict
 begin
	mark exch
	{
		1 index /FID ne
		{
			def
		} if
		cleartomark mark
	} forall
	pop
	/FontName exch def
	counttomark 0 eq
	{
		1 _useNativeEncoding eq
		{
			/Encoding _nativeEncoding def
		} if
		cleartomark
	}
	{
		/Encoding load 256 array copy
		modifyEncoding /Encoding exch def
	} ifelse
	FontName currentdict
 end
	definefont pop
} def
/tr
{
	_ax _ay 3 2 roll
} def
/trj
{
	_cx _cy _sp _ax _ay 6 5 roll
} def
/a0
{
	/Tx
	{
		dup
		currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
	} ddef
	/Tj
	{
		dup
		currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
	} ddef
} def
/a1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		tr _psf
		newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		dup currentpoint 3 2 roll
		trj _pjsf
		newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/e0
{
	/Tx
	{
		tr _psf
	} ddef
	/Tj
	{
		trj _pjsf
	} ddef
} def
/e1
{
	/Tx
	{
		dup currentpoint 4 2 roll gsave
		tr _psf
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll gsave
		trj _pjsf
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/i0
{
	/Tx
	{
		tr sp
	} ddef
	/Tj
	{
		trj jsp
	} ddef
} def
/i1
{
	W N
} def
/o0
{
	/Tx
	{
		tr sw rmoveto
	} ddef
	/Tj
	{
		trj swj rmoveto
	} ddef
} def
/r0
{
	/Tx
	{
		tr _ctm _pss
	} ddef
	/Tj
	{
		trj _ctm _pjss
	} ddef
} def
/r1
{
	/Tx
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		tr _ctm _pss
		grestore 3 1 roll moveto tr sp
	} ddef
	/Tj
	{
		dup currentpoint 4 2 roll currentpoint gsave newpath moveto
		trj _ctm _pjss
		grestore 3 1 roll moveto tr jsp
	} ddef
} def
/To
{
	pop _ctm currentmatrix pop
} def
/TO
{
	iTe _ctm setmatrix newpath
} def
/Tp
{
	pop _tm astore pop _ctm setmatrix
	_tDict begin
	/W
	{
	} def
	/h
	{
	} def
} def
/TP
{
 end
	iTm 0 0 moveto
} def
/Tr
{
	_render 3 le
	{
		currentpoint newpath moveto
	} if
	dup 8 eq
	{
		pop 0
	}
	{
		dup 9 eq
		{
			pop 1
		} if
	} ifelse
	dup /_render exch ddef
	_renderStart exch get load exec
} def
/iTm
{
	_ctm setmatrix _tm concat 0 _rise translate _hs 1 scale
} def
/Tm
{
	_tm astore pop iTm 0 0 moveto
} def
/Td
{
	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto
} def
/iTe
{
	_render -1 eq
	{
	}
	{
		_renderEnd _render get dup null ne
		{
			load exec
		}
		{
			pop
		} ifelse
	} ifelse
	/_render -1 ddef
} def
/Ta
{
	pop
} def
/Tf
{
	dup 1000 div /_fScl exch ddef
%
	selectfont
} def
/Tl
{
	pop
	0 exch _leading astore pop
} def
/Tt
{
	pop
} def
/TW
{
	3 npop
} def
/Tw
{
	/_cx exch ddef
} def
/TC
{
	3 npop
} def
/Tc
{
	/_ax exch ddef
} def
/Ts
{
	/_rise exch ddef
	currentpoint
	iTm
	moveto
} def
/Ti
{
	3 npop
} def
/Tz
{
	100 div /_hs exch ddef
	iTm
} def
/TA
{
	pop
} def
/Tq
{
	pop
} def
/Th
{
	pop pop pop pop pop
} def
/TX
{
	pop
} def
/Tk
{
	exch pop _fScl mul neg 0 rmoveto
} def
/TK
{
	2 npop
} def
/T*
{
	_leading aload pop neg Td
} def
/T*-
{
	_leading aload pop Td
} def
/T-
{
	_hyphen Tx
} def
/T+
{
} def
/TR
{
	_ctm currentmatrix pop
	_tm astore pop
	iTm 0 0 moveto
} def
/TS
{
	currentfont 3 1 roll
	/_Symbol_ _fScl 1000 mul selectfont
	
	0 eq
	{
		Tx
	}
	{
		Tj
	} ifelse
	setfont
} def
/Xb
{
	pop pop
} def
/Tb /Xb load def
/Xe
{
	pop pop pop pop
} def
/Te /Xe load def
/XB
{
} def
/TB /XB load def
currentdict readonly pop
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient_Sep 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient_Sep 5 dict dup begin put
/AGM_Gradient_Sep_private 100 dict def
/initialize{
	AGM_Gradient_Sep begin
	AGM_Gradient_Sep_private begin
	_compositeJob{
		initializeSinglePassSeps
	}{
		initializeMultiPassSeps
	}ifelse
	initializeSeps
	AGM_Gradient_private begin
		/_fillSD newSpotDict def
		/_rampSD newSpotDict def
		/_nCustomColorSD nd
 end
	AGM_Gradient_Sep_private 
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient_Sep
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop	
 end
}def
/terminate{
	currentdict AGM_Gradient_Sep eq{
	 end
	}if
}def
 
AGM_Gradient_Sep_private begin
/initializeSeps{
	_noImage not _level2PS not and{
		/_whiteBytes 1 makeByte8 pt
		/knockOut{
			8 setImageParms _whiteBytes /_image load 5 execImage
		}def
		/linealFill{
			mySave
			8 setImageParms
			_color{
				_nCustomColorSD begin
					cyan magenta yellow black
					_spotColor{
						spot1 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
						spot2 begin
							/tintImage tintValue 1 exch sub makeByte8 def
					 end
					}if
			 end
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 _nCustomColorSD ncolorimage
			}{
				_nCustomColorSD/black get 1 exch sub makeByte8 
				_nCustomColorSD bwImage
			}ifelse
			myRestore
		}def
	}{
		 /knockOut{
			gsave
			false setoverprint
			1 setgray 
			0 0 1 1 rectfill
			grestore
		}def
	}ifelse
	/newSpotDict{
		11 dict dup begin
			/nSpots 2 def
			/spot1 7 dict def
			/spot2 7 dict def
	 end
	}def
	/initSpotData
	{
	 begin
			/name nd
			/tintImage nd
			/tintValue nd
			/spot_C nd
			/spot_M nd
			/spot_Y nd
			/spot_K nd
	 end
	}def
	/initSpotDict{
	 begin
			/cyanInk false def
			/magentaInk false def
			/yellowInk false def
			/blackInk false def
			/cyan nd
			/magenta nd
			/yellow nd
			/black nd
			spot1 initSpotData
			spot2 initSpotData
	 end
	}def
	/copySpotDict{
		/_dst xp
	 begin
			cyanInk magentaInk yellowInk blackInk
			cyan magenta yellow black
			spot1 spot2
	 end
		_dst begin
			/spot1 spot1 maxlength dict def
			/spot2 spot2 maxlength dict def
			spot2 copy pop
			spot1 copy pop
			/black xd
			/yellow xd
			/magenta xd
			/cyan xd
			/blackInk xd
			/yellowInk xd
			/magentaInk xd
			/cyanInk xd
	 end
	}def
	/setCustomColor
	{
		1 index /Black eq{
			6 1 roll 5 npop
			1 exch sub
			setgray
		}{
			6 1 roll _ccAry1 astore exch
			dup null eq{
				pop 0
			}if
			setcustomcolor
		}ifelse
	}def
	/setCStop{
		/_colorStyle exch pt
		
		_colorStyle 0 eq{
			0 0 0
			4 -1 roll
			1 exch sub
			_spotColor{
				/_colorStyle 3 pt
				/Black
				1 index
				1 exch sub
			}if
		}if
		_colorStyle 2 eq{
			3 npop
		}if
		_rampSD _fillSD copySpotDict
		
		_colorStyle 4 eq{ 
			pop
			9 2 roll 3 npop 6 -2 roll
		} if
		
		_colorStyle 3 eq _colorStyle 4 eq or{
				
			_fillSD begin
				exch
				dup spot1/name get eq{
					spot1 spot2
				}{
					spot2 spot1
				}ifelse
			 begin
				 begin
						/name xd
						1 exch sub /tintValue xd
						4{
							tintValue mul 4 1 roll
						}repeat
						_spotColor not{
							/tintValue null def
						}if
				 end
					/tintValue 0 def
			 end
		 end
		}if
		_fillSD nsetcustomcolor
	}def
	/renderCMYK{
		spot1/name get null eq
		spot2/name get null eq and
		dup not{
			pop
			spot1 spotConverted
		}if
		dup not{
			pop
			spot2 spotConverted
		}if
	}def
	/fill_ /fill load def
	/fillOvp{
		currentoverprint{
			_inRipSep{
				currentcolorspace 0 get
				dup /DeviceGray eq
				1 index /DeviceCMYK eq or{
					pop
					currentcmykcolor add add add 0 eq{
						newpath
					}if
				}{
					/Separation eq{
						currentcolor 0 eq{
							newpath
						}if
					}if
				}ifelse
			}{
				currentgray 1 eq{
					newpath
				}if
			}ifelse
		}if
		fill_
	}def
	/fill{
		_nCustomColorSD begin
			renderCMYK
			{
				fillOvp
			}{
				spot1 begin
					gsave
					name null ne{
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
					}{
						1 setgray
					}ifelse
					fillOvp 
					grestore
			 end
				spot2 begin
					name null ne{
						gsave
						true setoverprint
						spot_C spot_M spot_Y spot_K name tintValue setCustomColor
						fillOvp
						grestore
					}if
			 end
				newpath
			}ifelse
	 end
	}def
	/expandSpot{
		_spotColor{
			/_len xp
			_rampSD begin
				spot1 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
				spot2 begin
					tintImage null ne{
						tintImage _len expandOne /tintImage xd
					}if
			 end
		 end
		}{
			pop
		}ifelse
	}def
	/rampImage{
		_rampSD begin
			_color{
				/cyanInk _cyanData 0 ne def
				/magentaInk _magentaData 0 ne def
				/yellowInk _yellowData 0 ne def
				/blackInk _blackData 0 ne def
				_nSamples setImageParms
				_nSamples expandSpot
				_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
				true 4 _rampSD ncolorimage
			}{
				/cyanInk false def
				/magentaInk false def
				/yellowInk false def
				/blackInk true def
				_nSamples setImageParms 
				_blackData _rampSD bwImage
			}ifelse
	 end
	}def
	/nsetcustomcolor where{
		pop
	}{
		/nsetcustomcolor
		{
			/_nCustomColorSD xp
			_nCustomColorSD begin
				4 copy
				/black xd
				/yellow xd
				/magenta xd
				/cyan xd
				4 copy
				0 ne /blackInk xd
				0 ne /yellowInk xd
				0 ne /magentaInk xd
				0 ne /cyanInk xd
		 end
			setcmykcolor
		}def
	}ifelse
	/nsetcustomcolorend where{
		pop
	}{
		/nsetcustomcolorend
		{
			/_nCustomColorSD null pt
		}def
	}ifelse
}def
/initializeSinglePassSeps{
	/_decodeNorm	[0 1] pt
	/_decodeInvert 	[1 0] pt
	/spotConverted
	{
	 begin
			name null eq{
				false
			}{
				tintValue null eq tintImage null eq and{
					true
				}{
					false
					currentpagedevice/SeparationOrder get{name eq or}forall
					not
				}ifelse
			}ifelse
	 end
	}def
	/dictImage
	{
		20 dict dup begin
			/Dict xd
			/Decode xd
			/DataSource xd
			/ImageMatrix xd
			/BitsPerComponent xd
			/Height xd
			/Width xd
			/ImageType 1 def
			Dict
	 end
		/_image load 1 execImage
	}def
	/bwImage{
	 begin
			gsave
			currentoverprint{
				blackInk{
					[/Separation /Black /DeviceGray{}] setcolorspace
					_decodeInvert dictImage
				}{
					5 npop
				}ifelse
			}{
				/DeviceGray setcolorspace
				_decodeNorm dictImage
			}ifelse
			grestore
	 end
	}def
	/ncolorimage where{
		pop
	}{
		/ncolorimage{
		 begin
				renderCMYK
				{
					cyanInk 
					magentaInk and
					yellowInk and
					blackInk and
					not
					currentoverprint 
					and
					{
						pop pop
						gsave
						cyanInk{
							8 copy
							[/Separation /Cyan /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}if
						magentaInk{
							8 copy
							[/Separation /Magenta /DeviceGray{}] setcolorspace
							4 -1 roll
							3 npop
							_decodeNorm dictImage
						}if
						yellowInk{
							8 copy
							[/Separation /Yellow /DeviceGray{}] setcolorspace
							4 -2 roll
							3 npop
							_decodeNorm dictImage
						}if
						blackInk{
							4 -3 roll
							[/Separation /Black /DeviceGray{}] setcolorspace
							3 npop
							_decodeNorm dictImage
						}{
							8 npop
						}ifelse
						grestore
					}{
						/_colorimage load 10 execImage
					}ifelse
				}{
					6 npop
					gsave
					spot1 begin
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							4 copy
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							1 setgray fill
						}ifelse
				 end
					spot2 begin
						true setoverprint
						name null ne tintImage null ne and{
							[/Separation name /DeviceGray{}] setcolorspace
							tintImage 
							name /Black eq{
								_decodeNorm
							}{
								_decodeInvert
							}ifelse 
							dictImage
						}{
							4 npop
							1 setgray fill
						}ifelse
				 end
					grestore
				}ifelse
		 end
		}def
	}ifelse
}def
/initializeMultiPassSeps{
	/_isCMYKSep
		_cyanPlate _magentaPlate or _yellowPlate or _blackPlate or
	pt
	/invertXfer{
		[
		{
			1 exch sub
		}/exec load systemdict /currenttransfer get exec /exec load
		] cvx systemdict /settransfer get exec
	}def
	/ccThrough{
		gsave
		1 setCustomColor
		currentcmykcolor
		grestore
		add add add 0 ne
	}def
	/spotConverted
	{
	 begin
			_isCMYKSep not{
				false
			}{
				name null eq{
					false
				}{
					tintValue null eq tintImage null eq and{
						true
					}{
						spot_C spot_M spot_Y spot_K name ccThrough
					}ifelse
				}ifelse
			}ifelse
	 end
	}def
	/spotChannel
	{
		_isCMYKSep{
			pop false
		}{
		 begin
				name null eq{
					false
				}{
					spot_C spot_M spot_Y spot_K name ccThrough 
				}ifelse
		 end
		}ifelse
	}def
	/getChannelData
	{
		_isCMYKSep dup{
			pop renderCMYK
		}if
		{
			_blackPlate{
				4 1 roll 3 npop blackInk
			}{
				_yellowPlate{
					4 2 roll 3 npop yellowInk
				}{
					_magentaPlate{
						4 3 roll 3 npop magentaInk
					}{
						3 npop cyanInk
					}ifelse
				}ifelse
			}ifelse
			{
				true /nonZeroData
			}{
				true /zeroData
			}ifelse
		}{
			4 npop
			spot1/name get null ne 
			spot1 spotChannel and{
				spot1/tintImage get dup null ne{
					false /nonZeroData
				}{
					pop false /noData
				}ifelse
			}{
				spot2/name get null ne 
				spot2 spotChannel and{
					spot2/tintImage get dup null ne{
						false /nonZeroData
					}{
						pop false /noData
					}ifelse
				}{
					false /noData
				}ifelse
			}ifelse
		}ifelse
	}def
	/renderChannelData
	{
		/_tmp xp
		_tmp /nonZeroData ne currentoverprint and{
			pop
			_tmp /zeroData eq{pop}if
			4 npop
		}{
			_tmp /nonZeroData eq{
				{
					invertXfer
				}if
					systemdict/image
				get 5 execImage
			}{
				pop
				_tmp /zeroData eq{pop}if
				4 npop
				knockOut
			}ifelse
		}ifelse
	}def
	/bwImage{
	 begin
			gsave
			dup dup dup
			getChannelData
			exch pop false exch
			renderChannelData
			grestore
	 end
	}def
	/ncolorimage{
	 begin
			pop pop
			gsave
			spot2/name get null ne spot2 spotChannel and{
				true setoverprint
			}if
			getChannelData 
			renderChannelData
			grestore
	 end
	}def
}def
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset AGM_Gradient 1.0 0
%%Title: (AGM Gradient Procset)
%%Version: 1.0 0
%%CreationDate: (4/26/96) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /AGM_Gradient 20 dict dup begin put
/AGM_Gradient_private 200 dict def
/initialize
{
	AGM_Gradient begin
	AGM_Gradient_private begin
	initializeVars
	
	/bd systemdict/mark get def
	/ed
		_level2PS 
		{
			(>>)
		}{
			(counttomark 2 idiv dup dict begin {def} repeat pop currentdict end)
		} ifelse
	cvx def
	
	_level2PS{
		initializeLev2
	}{
		initializeLev1
	}ifelse
	
	queryDevice
	
	initializeShading
	initializeOps
	_producingSeps{
		AGM_Gradient_Sep/initialize get exec
	}{
		initializeComposite
	}ifelse
	_illustrator{
		/f{}def
		/F{}def
		/s{}def
		/S{}def
		/b{}def
		/B{}def
	}if
	/image where{
		/image get /_image xd
	}if
	/colorimage where{
		/colorimage get /_colorimage xd
	}if
	/rectfill where dup{
		exch pop not _producingSeps or
	}{
		not
	}ifelse
	{
		/rectfill{
			gsave
			newpath
			4 2 roll moveto
			1 index 0 rlineto
			0 1 index rlineto
			1 index neg 0 rlineto
			pop pop
			closepath
			fill
			grestore
		}def
	}if
	/linealImage _noImage{
		/rectImage load
	}{
		_producingSeps{
			AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			/rampImage load
		 end
		}{
			/rampImage load
		}ifelse
	}ifelse
	def
	AGM_Gradient_private
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
	AGM_Gradient
	{
		dup xcheck 1 index type /arraytype eq and
		{
			bind
		}if
		pop pop
	}forall
 end
	
	currentdict readonly pop
 end
}def
/initializeAI
{
	pop pop 
	AGM_Gradient/AGM_Gradient_private get /_illustrator true put
	AGM_Gradient/initialize get exec
		AGM_Gradient begin
}def
/unload{
	systemdict/languagelevel known{
		systemdict/languagelevel get 2 ge{
			userdict/AGM_Gradient_Sep 2 copy known{
				undef
			}{
				pop pop
			}ifelse
			userdict/AGM_Gradient 2 copy known{
				undef
			}{
				pop pop
			}ifelse
		}if
	}if
}def
/terminate{
	currentdict AGM_Gradient eq{
	 end
	}if
}def
 
AGM_Gradient_private begin
/initializeVars{
	/_d255 256 array def
	0 1 255{
		_d255 exch dup 255 div put
	}bind for
	/_d255- 256 array def
	0 1 255{
		_d255- exch 1 _d255 2 index get sub put
	}bind for
	/_sSave nd
	/_dUserSpace matrix defaultmatrix def
	/_bUMatrix matrix def
	/_imageMatrix matrix def
	/_saveMatrix matrix def
	/_xm matrix def
	/_ccAry1 5 array def
	/_level2PS 
		systemdict/languagelevel known dup{
			pop systemdict/languagelevel get 2 ge
		}if
	def
	/_level3PS
		_level2PS systemdict/shfill known and
	def
	currentdict /_illustrator known not{
		/_illustrator false def
	}if
	
}def
/initializeOps
{
	AGM_Gradient begin
	currentdict/Bc known not{
		/Bc{
		
			_renderFlag 2 eq{
				6 npop
			}{
				pushBSpace
				_rampIndex 0 eq{
					pop pop
					setCStop
				}if
				linealFill
				popBSpace
			}ifelse
		
		}def
	}if
	
	currentdict/Bg known not{
		/Bg{
			10 npop
			/_gradName xp
			/_renderFlag xp
		
			_renderFlag 2 ne{
		
				_illustrator{
					_of setoverprint
				}if
		
				_illustrator _eo and _renderFlag 3 eq or{
					eoclip
				}{
					clip
				}ifelse
		
				_gradNames _gradName 2 copy known{
					get
					mark exch aload pop
					/_gradType xp
					1 sub dup /_rampIndex xp
					/_maxRampIndex xp
					mark exch aload pop
					0 0
				}if
				pop pop
				getRampData
			}{
				mark mark
			}ifelse
		}def
	}if
	
	currentdict/Bm known not{
		/Bm{
			_renderFlag 2 ne{
				_gradType 0 eq{
					linealRamp
				}{
					radialGrad
				}ifelse
			}{
				6 npop
			}ifelse
		}def
	}if
	
	currentdict/Bh known not{
		/Bh{
			2 npop
			/_yHi xp
			/_xHi xp
			/_radHilite _xHi 0 ne _yHi 0 ne or pt
		}def
	}if
	
	currentdict/Bn known not{
		/Bn{
			AGM_Gradient_private begin
				dict /_gradNames xp
		 end
		}def
	}if
	
	currentdict/Bd known not{
		/Bd{
			AGM_Gradient begin
			AGM_Gradient_private begin
				/_nColorsBd xp
				/_gradType xp
				/_gradName xp
		}def
	}if
	
	currentdict/BD known not{
		/BD{
				currentdict/_gradNames known not{
					/_gradNames 20 dict def
				}if
				] _nColorsBd _gradType
				]  _gradName exch /_gradNames xput
		 end
		 end
		}def
	}if
	
	currentdict/Bb known not{
		/Bb{
		
			AGM_Gradient begin
			AGM_Gradient_private begin
			_producingSeps{
				AGM_Gradient_Sep/AGM_Gradient_Sep_private get begin
			}if
			mySave
		}def
	}if
	
	currentdict/BB known not{
		/BB{
		
			/_tmp xp
			cleartomark cleartomark
		
			_tmp dup
			_renderFlag
		
			myRestore
		
			_producingSeps{
			 end
			}if
		
			_illustrator
		 end
		 end
		
			{
				2 ne exch 0 gt and{
					2 eq{
						s
					}{
						S
					}ifelse
				}{
					pop newpath
				}ifelse
			}{
				pop newpath
			}ifelse
		
		
		}def
	}if
	
	currentdict/Xm known not{
		/Xm{
			_xm astore pop
		}def
	}if
	
 end
}def
/queryDevice{
	/_inRipSep
		_level2PS{
			currentpagedevice/Separations 2 copy known{
				get
			}{
				pop pop false
			}ifelse
		}{
			false
		}ifelse
	def
	/_noImage /lv1Fix where{
		pop lv1Fix
	}{
		false
	}ifelse
	def
	/_useShells where{
		pop
	}{
		/_useShells true def
	}ifelse
	
	/_useSmoothShade where{
		pop
	}{
		/_useSmoothShade false def 
	}ifelse
	/_cyanPlate 1 0 0 0 testCMYKColorThrough def
	/_magentaPlate 0 1 0 0 testCMYKColorThrough def
	/_yellowPlate 0 0 1 0 testCMYKColorThrough def
	/_blackPlate 0 0 0 1 testCMYKColorThrough def
	/_compositeJob
		_cyanPlate _magentaPlate and _yellowPlate and _blackPlate and
	def
	/_compositeSpotDevice where{
		pop
	}{
		/_compositeSpotDevice _compositeJob not _inRipSep or{
			1
		}{
			0
		}ifelse
		def
	}ifelse
	/_producingSeps _compositeSpotDevice 0 ne def
	/_deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt def
	/_dpiThreshold where{
		pop
	}{
		/_dpiThreshold 600 def
	}ifelse
	/_screenFreqThreshold where{
		pop
	}{
		/_screenFreqThreshold 150 def
	}ifelse
	/_contoneDevice where{
		pop
	}{
		/_contoneDevice false def
	}ifelse
	/_subSampleOK 
		_deviceDPI _dpiThreshold le 
		currentScreenFreq _screenFreqThreshold le and 
		_contoneDevice not and 
		_producingSeps not and
	def
}def
/initializeLev1{
	/makeByte8{
		/_tmp 0 pt
		255 mul cvi
		8 string 8{
			dup _tmp 3 index put 
			/_tmp _tmp 1 add pt
		}repeat
		exch pop
	}def
	/currentScreenFreq{
		currentscreen pop pop
	}def
	/_byte 1 string def
	/colorimage where{
		pop
	}{
		/colorimage{
			pop pop
			/_blackTmp xp
			/_yellowTmp xp
			/_magentaTmp xp
			/_cyanTmp xp
			/_cnt 0 pt
			[
			_byte dup 0
			_cyanTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .3 /mul cvx
			_magentaTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .59 /mul cvx
			_yellowTmp
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx .11 /mul cvx
			_blackTmp 
				/_cnt cvx /get cvx _d255 /exch cvx /get cvx
			/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/dup cvx 1 /gt cvx{
				pop 1
			}/if cvx
			255 /mul cvx /cvi cvx
			256 /mod cvx
			/dup cvx 0 /lt cvx{
				pop 0
			}/if cvx
			/put cvx
			/_cnt dup cvx 1 /add cvx /pt cvx
			] cvx
			bind
			/_image load 5 execImage
		}def
	}ifelse
}def
/initializeLev2{
	/level2ScreenFreq{
	 begin
		60
		HalftoneType 1 eq{
			pop Frequency
		}if
		HalftoneType 2 eq{
			pop GrayFrequency
		}if
		HalftoneType 5 eq{
			pop Default level2ScreenFreq
		}if
		 end
	}def
	/currentScreenFreq{
		currenthalftone level2ScreenFreq
	}def
}def
/initializeShading{
	_useSmoothShade _level3PS and{
		/_usingSmoothShade true pt
		initializeLev3_Ops
	}{
		/_usingSmoothShade false pt
	}ifelse
}def
/initializeLev3_Ops
{
	/initShFill{
		/_index _gradType 0 eq {0}{_maxRampIndex 1 sub} ifelse pt
		/_rampFuncsArray _maxRampIndex array pt
		/_boundsArray _maxRampIndex 1 sub array pt
		/_encodeArray _maxRampIndex 2 mul array pt
		/_beginCoord _rampPoint pt
		/_colorSpace null pt
		/_firstFill _rampIndex _maxRampIndex eq pt
		/_lastFill false pt
	}def
	/getRampColorSpace{
		_nSamples 1 gt{ 
			/_ndx 0 pt
			[blendColor] cvx exec
		}if
		/_C0 [currentcolor] pt
		/_C0_Space currentcolorspace pt
		
		_nSamples 1 gt{ 
			/_ndx _nSamples 1 sub pt
			[blendColor] cvx exec
		}if
		/_C1 [currentcolor] pt
		/_C1_Space currentcolorspace pt
		
		_C0_Space _C1_Space eq{
			/_rampColorSpace _C0_Space pt
		}{
			(colorspace conflict!) ==
			showpage
			stop
		}ifelse
		
		_spotColor{
			nsetcustomcolorend
		}if
	}def
	/linealShFill{
		popBSpace
		_xm aload pop pushBSpace
		
		/_size _index 1 add pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray 0 _size getinterval pt
			/_boundsArray _boundsArray 0 _size 1 sub getinterval pt
			/_encodeArray _encodeArray 0 _size 2 mul getinterval pt
		}if
		
		bd
			/ShadingType 2
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_firstFill _lastFill]
			/Domain [0 1] 
			/Coords [_beginCoord 0 _endCoord 0]
		ed
		shfill
	}def
	
	/radialShFill{
		/_size _maxRampIndex _index sub pt
		_size _maxRampIndex lt {
			/_rampFuncsArray _rampFuncsArray _index _size getinterval pt
			/_boundsArray _boundsArray _index _size 1 sub getinterval pt
			/_encodeArray _encodeArray _index 2 mul _size 2 mul getinterval pt
		}if
		
		/_rampLen _beginCoord _endCoord sub pt
		bd
			/ShadingType 3
			/ColorSpace _colorSpace
			/Function 
				bd
					/FunctionType 3
					/Domain [0 1]
					/Functions _rampFuncsArray
					/Bounds _boundsArray
					/Encode _encodeArray
				ed
			/Extend [_lastFill _firstFill]
			/Domain [0 1] 
			/Coords [_xHi _rampLen mul _yHi _rampLen mul _endCoord 0 0 _beginCoord] 
		ed
		shfill
		
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
	}def
	
	/fillRamp{ 
	
	
		/_invert _midPoint 0.5 lt pt
		_rampIndex _maxRampIndex eq {
			initShFill
		}if
		
		getRampColorSpace
		
		_colorSpace null eq{
			/_colorSpace _rampColorSpace pt
		}{
			_colorSpace _rampColorSpace ne{
				/_index _index 1 
				_gradType 0 eq{
					sub pt
					linealShFill
				}{
					add pt
					radialShFill
				}ifelse
				initShFill
				/_colorSpace _rampColorSpace pt
			} if
		}ifelse
		/_endCoord _endPoint pt	
		_rampFuncsArray _index
		bd
			/FunctionType 2
			/Domain [0 1]
			/N 0.5 log _invert{1 _midPoint sub}{_midPoint}ifelse log div
			_gradType 0 eq{
				_invert{/C1}{/C0}ifelse _C0
				_invert{/C0}{/C1}ifelse _C1
			}{
				_invert{/C0}{/C1}ifelse _C1
				_invert{/C1}{/C0}ifelse _C0
			}ifelse
		ed
		put
		
		_rampIndex 1 ne{
			_boundsArray _index _gradType 1 eq{1 sub}if _endCoord put
		} if
		
		0 1 _invert {exch}if
		_encodeArray _index 2 mul 1 add 3 -1 roll put
		_encodeArray _index 2 mul 3 -1 roll put
		_rampIndex 1 eq {
			/_lastFill true pt
			_gradType 0 eq{
				linealShFill
			}{
				radialShFill
			}ifelse
		}if
		/_index _index 1 
		_gradType 0 eq{
			add pt
		}{
			sub pt
		}ifelse
	}def
	
	/radialRamp
		/fillRamp load def
	
	/rampImage
		/fillRamp load def
	
	AGM_Gradient begin
	/Bc{
		6 npop
	}def
	
 end
	
	
}def
/initializeComposite{
	/bwImage{
		pop /_image load 5 execImage 
	}def
	currentdict/rampImage known not{
		/rampImage{
			_color{
				_nSamples setImageParms
	
				
				_rgbRamp{
					_redData _greenData _blueData _nSamples 3 expandColor
					true 3 null ncolorimage
				}{
					_cyanData _magentaData _yellowData _blackData _nSamples 4 expandColor
					true 4 null ncolorimage
				}ifelse
			}{
				_nSamples setImageParms _blackData null bwImage
			}ifelse
		}def
	}if
	/setCStop{
		/_colorStyle exch pt
		_colorStyle 0 eq{
			1 exch sub
			0 0 0
			4 -1 roll
		}if
		
		_colorStyle 2 eq{
			setrgbcolor 4 npop
		}if
		
		_colorStyle 3 eq{
			1 exch sub /_tmp xp
			pop
			4{
				_tmp mul 4 1 roll
			}repeat
		}if
		
		_colorStyle 4 eq{
			3 -1 roll pop pop
			1 exch sub /_tmp xp
			3{
				1 exch sub _tmp mul 1 exch sub 3 1 roll
			}repeat
			setrgbcolor 
			4 npop
		}if
		_colorStyle 2 ne _colorStyle 4 ne and{
			null nsetcustomcolor
		}if
	}def
	/nsetcustomcolor
	{
		pop setcmykcolor
	}def
	/nsetcustomcolorend
	{
	}def
	/ncolorimage{
		pop 
		/_colorimage load 10 execImage
	}def
	_noImage not _level2PS not and{
		/linealFill{
			8 setImageParms
			_color{
				currentcmykcolor
				4{
					makeByte8 4 1 roll
				}repeat
				true 4 null ncolorimage
			}{
				currentgray makeByte8 null bwImage
			}ifelse
		}def
	}if
}def
/npop{
	{pop}repeat
}def
/xd{
	exch def
}def
/nd{
	null def
}def
/pt{
	AGM_Gradient_private 3 1 roll put
}def
/xp{
	exch pt
}def
/xput{
	dup load dup length exch maxlength eq{
		dup dup load dup
		length 2 mul dict copy def
	}if
	load begin
		def
  end
}def
/mySave{
	save /_sSave xp
}def
/myRestore{
	_sSave type /savetype eq{
		_sSave restore
	}if
}def
/gMark{
	counttomark 2 add -1 roll
}def
/execImage{
	/_tmp xp
	{
		exec
	}stopped{
		$error /errorname get /undefinedresult ne{
			stop
		}{
			_tmp npop
		}ifelse
	}if
}def
/pushBSpace{
	newpath gsave
	_bUMatrix astore concat 
}def
/popBSpace{
	grestore
}def
/setImageParms{
	1 8 2 index 0 0 1 0 0 _imageMatrix astore
}def
/linealFill{
	0 0 1 1 rectfill
}def
/testCMYKColorThrough{
	gsave
	setcmykcolor currentcmykcolor
	grestore
	add add add 0 ne
}def
/expandOne	{
	/_tmp xp
	dup type /stringtype ne{
		_tmp string
		exch
		dup 0 ne{
			255 mul cvi
			0 1 _tmp 1 sub{
				3 copy
				exch put pop
			}for
		}if
		pop
	}if
}def
/expandColor{
	/_channels xp
	/_len xp
	_channels{
		_len expandOne _channels 1 roll
	}repeat
}def
/blendColor{
	
	_color{
		_rgbRamp _producingSeps not and{
			_redData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_greenData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blueData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			/setrgbcolor cvx
		}{
			_cyanData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_magentaData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_yellowData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
			_blackData dup type /stringtype eq{
				/_ndx cvx /get cvx _d255 /exch cvx /get cvx
			}if
	
			_spotColor{
				_rampSD begin
					/_rampSD cvx /begin cvx
	
					spot1 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
	
					spot2 begin
						tintImage dup type /stringtype eq{
							/_ndx cvx /get cvx _d255- /exch cvx /get cvx
						}{
							dup null ne{
								name type /nametype ne{
									1 exch sub
								}if
							}if
						}ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/_rampSD cvx
				/nsetcustomcolor cvx
			}{
				/setcmykcolor cvx
			}ifelse
		}ifelse
	}{
		_blackData /_ndx cvx /get cvx
		_d255 /exch cvx /get cvx
		
		_usingSmoothShade{
			1 /exch cvx /sub cvx 0 0 0 4 -1 /roll cvx /setcmykcolor cvx
		}{
			 /setgray cvx
		}ifelse
	}ifelse
}def
/linealRamp{
	pushBSpace
	_ramp{
		linealImage
	}{
		linealFill
	}ifelse
	popBSpace
	/_rampIndex _rampIndex 1 sub pt
	_rampIndex 0 gt{
		getRampData
	}if
}def
/radialGrad{
	/_firstShell true pt
	_usingSmoothShade not{
		fill
	}if
	pushBSpace
	
	_radHilite{
		_xHi _yHi _bUMatrix idtransform /_yHi xp /_xHi xp
		_rampPoint 1 lt{
			1 _rampPoint sub dup _xHi mul exch _yHi mul translate
		}if
	}if
	_rampIndex{
			radialRamp
		/_rampIndex _rampIndex 1 sub pt
		_rampIndex 0 gt{
			getRampData
		}if
	}repeat
	
	popBSpace
	
}def
/getNSamples{
	0 exch
	{
		dup type /stringtype eq{
			length exch pop exit
		}if
		pop
	}forall
	dup 0 eq{
		pop 1
	}if
}def
/getRampData{
	/_rampType gMark pt
	/_color _rampType 0 gt pt
	/_ccRGB _rampType 5 eq _rampType 6 eq or pt
	/_rgbRamp _rampType 4 eq _ccRGB or pt
	/_ccProcess _rampType 2 eq _rampType 3 eq or pt
	_producingSeps{
		_rampSD initSpotDict
		/_spotColor _ccProcess _ccRGB or pt
	}{
		/_spotColor false pt
	}ifelse
	/_ramp true pt
	100 div /_rampPoint xp
	100 div /_midPoint xp
	
	dup /_colorStyle xp
	_colorStyle 0 eq{ 
		2
	}{
		_colorStyle 1 eq{ 
			5
		}{
			_colorStyle 2 eq{
				8
			}{
				_colorStyle 3 eq{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 3 index def
								/spot_K 4 index def
								/spot_Y 5 index def
								/spot_M 6 index def
								/spot_C 7 index def
						 end
					 end
					}if
					7
				}{
					_producingSeps{
						_rampSD begin
							spot1 begin
								/name 4 index def
								/spot_K 8 index def
								/spot_Y 9 index def
								/spot_M 10 index def
								/spot_C 11 index def
						 end
					 end
					}if
					11
				} ifelse
			}ifelse
		}ifelse
	}ifelse
	/_tmp xp
	_tmp index 100 div /_endPoint xp
	
	_gradType 1 eq{
		_tmp 1 add index 100 div /_midPoint xp
	}if
	
	_producingSeps{
		_tmp 2 add index /_nextColorStyle xp
		_nextColorStyle 3 eq{
			/_tmp _tmp 4 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 2 add index def
						/spot_Y _tmp 3 add index def
						/spot_M _tmp 4 add index def
						/spot_C _tmp 5 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
		_nextColorStyle 4 eq{
			/_tmp _tmp 5 add pt
			_tmp index dup
			_rampSD begin
				spot1 /name get ne{
					spot2 begin
						/name xd
						/spot_K _tmp 5 add index def
						/spot_Y _tmp 6 add index def
						/spot_M _tmp 7 add index def
						/spot_C _tmp 8 add index def
				 end
				}{
					pop
				}ifelse
		 end
		}if
	}if
	_rampType 3 eq _rampType 6 eq or{
		/_tint2Data gMark pt
	}if
	_ccProcess _ccRGB or{
		/_tint1Data gMark pt
	}if
	_rgbRamp{
		/_blueData gMark pt
		/_greenData gMark pt
		/_redData gMark pt
	}if
	
	_producingSeps{
		_rampSD begin
			_ccProcess _ccRGB or{
				_rampType 3 eq _rampType 6 eq or{
					spot2 begin
						/tintImage _gradType 0 eq{
							_tint2Data
						}{
							_tint1Data
						}ifelse
						def
						name null eq{
							/name /Black def
						}if
				 end
				}if
				spot1 begin
					/tintImage _gradType 0 eq _rampType 2 eq or _rampType 5 eq or{
						_tint1Data
					}{
						_tint2Data
					}ifelse
					def
					_rampType 2 eq _rampType 5 eq or{
						name null eq{
							/name spot2 /name get def
							spot2 /name null put
						}if
					}{
						name null eq{
							/name /Black def
						}if
					}ifelse
			 end
			}if
	 end
	}if
	/_blackData gMark pt
	_rampType 0 gt{
		counttomark 4 add -3 roll
		/_yellowData xp
		/_magentaData xp
		/_cyanData xp
	}if
	_ramp{
		/_nSamples
			[
			_rampType 0 eq {_blackData}if
			_rampType 1 eq {_cyanData _magentaData _yellowData _blackData}if
			_rampType 2 eq {_cyanData _magentaData _yellowData _blackData _tint1Data}if
			_rampType 3 eq {_cyanData _magentaData _yellowData _blackData _tint1Data _tint2Data}if
			_rampType 4 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData}if
			_rampType 5 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data}if
			_rampType 6 eq {_cyanData _magentaData _yellowData _blackData _redData _greenData _blueData _tint1Data _tint2Data}if
			] getNSamples pt
		_usingSmoothShade not {/_ramp _nSamples 1 gt pt} if
	} if
	
	setCStop
}def
/rectImage{
	gsave
	/_sInc 1 pt
	/_bInc 1 _nSamples div pt
	/_uRampLen 1 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt pt
	/_pChange _uRampLen 0 eq{0}{_nSamples _uRampLen div}ifelse pt
	0
	_nSamples
	[
	/dup cvx
	/_ndx /exch cvx /pt cvx
	blendColor
	0 0 _bInc 1 /rectfill cvx
	_bInc 0 /translate cvx
	_sInc /add cvx
	] cvx
	bind
	repeat
	pop
	_spotColor{
		nsetcustomcolorend
	}if
	grestore
}def
/radialInit{
	/_nRadSamples _nSamples dup 0 eq{pop 1}if pt
	/_sInc -1 pt
	/_rampLen _rampPoint _endPoint sub pt
	/_bInc _rampLen _nSamples div neg pt
	/_optimize false pt
	_subSampleOK{
		/_uRampLen
			_rampLen 0 dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			0 _rampLen dtransform _dUserSpace idtransform dup mul exch dup mul add sqrt
			2 copy lt{
				exch
			}if pop
		pt
		/_pChange 
			_uRampLen 0 eq{
				0
			}{
				_nSamples _uRampLen div
			}ifelse
		pt
		_pChange .5 gt dup /_optimize xp{
			/_nRadSamples _uRampLen 2 div round cvi dup 1 le{pop 2}if pt
			/_bInc _rampLen _nRadSamples div neg pt
			/_sInc _nSamples 1 sub _nRadSamples 1 sub div neg pt
		}if
	}if
	_radHilite{
		/_xBCInc _xHi _rampLen mul _nRadSamples div pt
		/_yBCInc _yHi _rampLen mul _nRadSamples div pt
	}if
}def
currentdict/radialRamp known not{
	/radialRamp{
	
		/_saveMatrix _saveMatrix currentmatrix def
		
		radialInit
	
		_rampPoint
	
		_nSamples 1 sub
	
		_nRadSamples 
		[
			/dup cvx
	
			_optimize{
				/round cvx /cvi cvx
			}if
	
			/_ndx /exch cvx /pt cvx
			
			_useShells{
				/_firstShell cvx{
					/_firstShell false pt
				}{
					0 0 3 index 360 0 arcn fill
				}/ifelse cvx
			}if
	
			blendColor
	
			_useShells{
				0 0 3 /index cvx 0 360 /arc cvx 
			}{
				0 0 3 /index cvx 0 360 /arc cvx /fill cvx
			}ifelse
	
			/exch cvx _bInc /add cvx /exch cvx
	
			_sInc /add cvx
	
			_radHilite{
				_xBCInc _yBCInc /translate cvx
			}if
		] cvx bind
		repeat
	
		pop pop
	
		_saveMatrix setmatrix
	
		_radHilite{
			_xHi _rampLen mul _yHi _rampLen mul translate
		}if
		
		_useShells _rampIndex 1 eq and{
			fill
		}if
		_spotColor{
			nsetcustomcolorend
		}if
	
		
	}def
}if
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.1 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 24 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize
{ 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6
	{
		dup type /arraytype eq
		{
			dup xcheck
			{
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not
{
	/Adobe_ColorImage_AI6_Vars 15 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/channelcount 0 def
	/sourcecount 0 def
	/sourcearray 4 array def
	/plateindex -1 def
	/XIMask 0 def
	/XIBinary 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIBuffer null def
	/XIDataProc null def
	/XIVersion 6 def
end
/WalkRGBString null def
/WalkCMYKString null def
/StuffRGBIntoGrayString null def
/RGBToGrayImageProc null def
/StuffCMYKIntoGrayString null def
/CMYKToGrayImageProc null def
/ColorImageCompositeEmulator null def
/SeparateCMYKImageProc null def
/FourEqual null def
/TestPlateIndex null def
currentdict /_colorimage known not
{
	/colorimage where
	{
		/colorimage get /_colorimage exch def
	}
	{
		/_colorimage null def
	} ifelse
} if
/_currenttransfer systemdict /currenttransfer get def
/colorimage null def
/XI null def
/WalkRGBString
{
	0 3 index
	dup length 1 sub 0 3 3 -1 roll
	{
		3 getinterval { } forall
		5 index exec
		3 index
	} for
	
	 5 { pop } repeat
} def
/WalkCMYKString
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll
	{
		4 getinterval { } forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/StuffRGBIntoGrayString
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/RGBToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		dup length 3 idiv string
		dup 3 1 roll 
		
		/StuffRGBIntoGrayString load exch
		WalkRGBString
 end
} def
/StuffCMYKIntoGrayString
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/CMYKToGrayImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		dup length 4 idiv string
		dup 3 1 roll 
		
		/StuffCMYKIntoGrayString load exch
		WalkCMYKString
 end
} def
/ColorImageCompositeEmulator
{
	pop true eq
	{
		Adobe_ColorImage_AI6_Vars /sourcecount get 5 add { pop } repeat
	}
	{
		Adobe_ColorImage_AI6_Vars /channelcount get 1 ne
		{
			Adobe_ColorImage_AI6_Vars begin
				sourcearray 0 3 -1 roll put
			
				channelcount 3 eq 
				{ 
					/RGBToGrayImageProc 
				}
				{ 
					/CMYKToGrayImageProc
				} ifelse
				load
		 end
		} if
		image
	} ifelse
} def
/SeparateCMYKImageProc
{	
	Adobe_ColorImage_AI6_Vars begin
		sourcecount 0 ne
		{
			sourcearray plateindex get exec
		}
		{			
			sourcearray 0 get exec
			
			dup length 4 idiv string
			
			0 2 index
			
			plateindex 4 2 index length 1 sub
			{
				get 255 exch sub
				
				3 copy put pop 1 add
				
				2 index
			} for
			pop pop exch pop
		} ifelse
 end
} def
	
/FourEqual
{
	4 index ne
	{
		pop pop pop false
	}
	{
		4 index ne
		{
			pop pop false
		}
		{
			4 index ne
			{
				pop false
			}
			{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/TestPlateIndex
{
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where
		{
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 FourEqual 
			{ 
				/plateindex 0 def
			}
			{
				0 1 0 0 FourEqual
				{ 
					/plateindex 1 def
				}
				{
					0 0 1 0 FourEqual
					{
						/plateindex 2 def
					}
					{
						0 0 0 1 FourEqual
						{ 
							/plateindex 3 def
						}
						{
							0 0 0 0 FourEqual
							{
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/colorimage
{
	Adobe_ColorImage_AI6_Vars begin
		/channelcount 1 index def
		/sourcecount 2 index 1 eq { channelcount 1 sub } { 0 } ifelse def
		4 sourcecount add index dup 
		8 eq exch 1 eq or not
 end
	
	{
		/_colorimage load null ne
		{
			_colorimage
		}
		{
			Adobe_ColorImage_AI6_Vars /sourcecount get
			7 add { pop } repeat
		} ifelse
	}
	{
		dup 3 eq
		TestPlateIndex
		dup -1 eq exch 5 eq or or
		{
			/_colorimage load null eq
			{
				ColorImageCompositeEmulator
			}
			{
				dup 1 eq
				{
					pop pop image
				}
				{
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						gsave
						
						0 _currenttransfer exec
						1 _currenttransfer exec
						eq
						{ 0 _currenttransfer exec 0.5 lt }
						{ 0 _currenttransfer exec 1 _currenttransfer exec gt } ifelse
						
						{ { pop 0 } } { { pop 1 } } ifelse
						systemdict /settransfer get exec
					} if
					
					_colorimage
					
					Adobe_ColorImage_AI6_Vars /plateindex get 5 eq
					{
						grestore
					} if
				} ifelse
			} ifelse
		}
		{
			dup 1 eq
			{
				pop pop
				image
			}
			{
				pop pop
				Adobe_ColorImage_AI6_Vars begin
					sourcecount -1 0
					{			
						exch sourcearray 3 1 roll put
					} for
					/SeparateCMYKImageProc load
			 end
				systemdict /image get exec
			} ifelse
		} ifelse
	} ifelse
} def
/XG
{
	pop pop
} def
/XF
{
	13 {pop} repeat
} def
/Xh
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		XIMask
		{
			/_lp /null ddef
			_fc
			/_lp /imagemask ddef
		}
		if
		/XIVersion 7 def
 end
} def
/XH
{
	Adobe_ColorImage_AI6_Vars begin
		/XIVersion 6 def
		grestore
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIMask exch 0 ne def
		/XIBinary exch 0 ne def
		pop
		pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq
		{
			XIImageWidth 8 div ceiling cvi
		}
		{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIBuffer exch string def
		XIBinary
		{
			/XIDataProc { currentfile XIBuffer readstring pop } def
			XIVersion 6 le
			{
				currentfile 128 string readline pop pop
			}
			if
		}
		{
			/XIDataProc { currentfile XIBuffer readhexstring pop } def
		} ifelse
		
		XIVersion 6 le
		{
			0 0 moveto
			XIImageMatrix concat
			XIImageWidth XIImageHeight scale
			XIMask
			{
				/_lp /null ddef
				_fc
				/_lp /imagemask ddef
			} if
		} if
		
		XIMask
		{
			XIImageWidth XIImageHeight
			false
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			imagemask
		}
		{
			XIImageWidth XIImageHeight
			XIBitsPerPixel
			[ XIImageWidth 0 0 XIImageHeight neg 0 0 ]
			/XIDataProc load
			
			XIChannelCount 1 eq
			{
				gsave
				0 setgray
				image
				grestore
			}
			{
				false
				XIChannelCount
				colorimage
			} ifelse
		} ifelse
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Full Prolog)
%%Version: 1.1 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 81 dict dup begin
put
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_rise 0 def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fScl 0 def
/_cnt 0 def
/_hs 1 def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_wv 0 def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 91 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/sw
{
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
} def
/swj
{
	dup 4 1 roll
	dup length exch stringwidth
	exch 5 -1 roll 3 index mul add
	4 1 roll 3 1 roll mul add
	6 2 roll /_cnt 0 ddef
	{
		1 index eq
		{
			/_cnt _cnt 1 add ddef
		} if
	} forall
	pop
	exch _cnt mul exch _cnt mul 2 index add 4 1 roll 2 index add 4 1 roll pop pop
} def
/ss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put pop
		gsave
		false charpath currentpoint
		4 index setmatrix
		stroke
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	3 npop
} def
/jss
{
	4 1 roll
	{
		2 npop
		(0) exch 2 copy 0 exch put
		gsave
		_sp eq
		{
			exch 6 index 6 index 6 index 5 -1 roll widthshow
			currentpoint
		}
		{
			false charpath currentpoint
			4 index setmatrix stroke
		} ifelse
		grestore
		moveto
		2 copy rmoveto
	} exch cshow
	6 npop
} def
/sp
{
	{
		2 npop (0) exch
		2 copy 0 exch put pop
		false charpath
		2 copy rmoveto
	} exch cshow
	2 npop
} def
/jsp
{
	{
		2 npop
		(0) exch 2 copy 0 exch put
		_sp eq
		{
			exch 5 index 5 index 5 index 5 -1 roll widthshow
		}
		{
			false charpath
		} ifelse
		2 copy rmoveto
	} exch cshow
	5 npop
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		ashow
	} ddef
	/_pjsf
	{
		_fc
		awidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		endString eq
		{
			cleartomark stop
		} if
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer readline not
		{
		stop
		} if
		dup beginString eq
		{
			pop /layerCnt dup load 1 add store
		}
		{
			endString eq
			{
				layerCnt 1 eq
				{
					cleartomark stop
				}
				{
					/layerCnt dup load 1 sub store
				} ifelse
			} if
		} ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	4 npop
	6 1 roll
	pop
	4 1 roll
	pop pop pop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 3 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_blend_AI5 1.4 0
%%Title: (Adobe Illustrator (R) Version 5.0 Blend ProcSet)
%%Version: 1.4 0
%%CreationDate: (11/19/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_blend_AI5 70 dict dup begin
put
/bd
{
	bind def
} bind def
/xs
{
	exch store
} bd
/nullProc
{
	{
	}
} def
/initialize
{
	pop pop
	Adobe_blend_AI5 begin
		Adobe_blend_AI5_vars begin
			/_contoneDevice where
			{
				pop
			}
			{
				/_contoneDevice false def	
			} ifelse
					
			/_dpiThreshold where
			{
				pop
			}
			{	
				/_dpiThreshold 600 def
			} ifelse
			
			/_screenFreqThreshold where
			{
				pop
			}
			{	
				/_screenFreqThreshold 150 def
			} ifelse
			
			/tRectOK? deviceDPI _dpiThreshold le currentScreenFreq _screenFreqThreshold le and _contoneDevice not and def
	/invertXfer
	{
		[
		{
			1 exch sub
				} /exec load systemdict/currenttransfer get exec /exec load
				] cvx systemdict/settransfer get exec
			} bd
			/spotDict 3 dict dup begin
				/nSpots 2 def
				/spot1 7 dict def
				/spot2 7 dict def
		 end
			def
			composite?
			{
				/_setgray_ /setgray load def
				/_fill_ /fill load def
				/_image_ /image load def
			}
			{
				/_setgray_ systemdict/setgray get def
				/_fill_ systemdict/fill get def
				/_image_ systemdict/image get def
			} ifelse
		} bd
		/terminate
		{
			currentdict Adobe_blend_AI5_vars eq
			{
		 end
			currentdict Adobe_blend_AI5 eq
			{
		 end
		} if
	} if
} bd
/_compositeSpotDevice where
{
 begin
		_compositeSpotDevice 0 ne {userdict /composite? true put} if
 end
}
{
	/_compositeSpotDevice 0 def	
} ifelse
	
/nullString () def
/d255 256 array def
0 1 255
{
	d255 exch dup 255 div put
} bind for
/d255- 256 array def
0 1 255
{
	d255- exch 1 d255 2 index get sub put
} bind for
/dUserSpace matrix defaultmatrix def
currentdict /Adobe_blend_AI5_vars 89 dict dup begin
put
{
	/f /F /s /S /b /B
}
{
	null def
} bind forall
/byte 1 string def
/sSave null def
/setSSave
{
	save /sSave exch store
} bind def
/Bm null def
/doBlend null def
/startC? false def
/endC? false def
/fCMYK? null def
/startTint 0 def
/endTint 0 def
/bSMatrix matrix def
/bUMatrix matrix def
/dMatrix matrix def
/inLine? true def
/pTState? false def
/bHi? false def
/yHi 0 def
/xHi 0 def
/noImg /lv1Fix where
{
	pop lv1Fix
}
{
	false
} ifelse
def
/ccAry1 5 array def
/ccTint 0 def
/spotColor? false def
/colorimage? true def
[
/tint1Data
/tint2Data
/spotDict
/bAxis
/ubAxis
/pChange
/optimize?
/nSamples
/sInc
/blendProc
/_bn
/xBCInc
/yBCInc
/bInc
/bRender
/cBName
/cBType
/nColors
/color?
/blend?
/colorType
/cData
/cDataLen
/bDataLen
/rampPoint
/midPoint
/endPoint
/blendLength
/blackData
/yeData
/mgData
/cyData
/cnt1
/ndx
/_fill
/tmp
counttomark
{
	null def
} bind
repeat
pop
currentdict
end
currentdict
end
exch
begin
begin
/unitSq
{
	0 0 moveto 0 1 lineto 1 1 lineto 1 0 lineto closepath
} bd
/gMark
{
	counttomark 2 add -1 roll
} bd
/setCustomColor
{
	dup /ccTint exch store
	1 exch sub 6 1 roll
	ccAry1 astore
	exch setcustomcolor
} bd
/currentCustomColor
{
	ccAry1 aload pop ccTint
} bd
/nsetcustomcolor where 
{
	pop
}
{
	/nsetcustomcolor
	{
		pop setcmykcolor	
	} bd
} ifelse
/nsetcustomcolorend where 
{
	pop
}
{
	/nsetcustomcolorend
	{
	} bd
} ifelse
/setBSpace
{
	newpath bUMatrix astore concat unitSq
} bd
/setCStop
{
	dup 0 eq
	{
		pop
		
		spotColor?
			{
			dup 1 exch sub /ccTint exch def
			ccAry1 4 /Black put
			} if
		setgray
	}
	{
		1 eq
		{
			setcmykcolor
		}
		{
			composite? not colorType 2 lt and
			{
				forceCMYK
			}
			{
				setCustomColor
			} ifelse
		} ifelse
	} ifelse
} bd
/makeByte
{
	/tmp 0 store
	255 mul cvi
	8 string 8
	{
		dup tmp 3 index put /tmp tmp 1 add store
	} repeat
	exch pop
} bd
/setImgSpace
{
	cDataLen 1 8
	2 index 0 0 1 0 0 dMatrix astore
} bd
/bwImage
{
	setImgSpace cData /_image_ load
	{
		exec
	} stopped
	{
		$error /errorname get /undefinedresult ne
		{
			stop
		}
		{
			pop pop pop pop pop
		} ifelse
	} if
} bd
level2?
{
	/bFill
	{
		_fill
	} def
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		expandCMYK
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
} if
/expandOne
{
			dup type /stringtype ne
			{
				cDataLen string
				exch
				dup 0 ne
				{
					255 mul cvi
					0 1 cDataLen 1 sub
					{
						3 copy
						exch put pop
					} for
				} if
				pop
			} if
} bd
/expandSpot
{
	spotColor?
	{
		spotDict begin
			spot1 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
			spot2 begin
				tintImage type /nulltype ne
				{
					tintImage expandOne /tintImage exch def
				} if
		  end
	 end
	} if
} bd
/expandCMYK
{
	4
	{
		expandOne 4 1 roll
	} repeat
} bd
/colorimage where dup
{
	exch pop
	
	/ncolorimage where
	{
		pop
	}
	{
		/ncolorimage {pop colorimage} bd
	} ifelse
} if
not
{
	/ncolorimage where 
	{
		pop
	}
	{
		/colorimage? false store
		/ncolorimage
		{
			pop pop pop
	
		setSSave
		/blackData xs
		/yeData xs
		/mgData xs
		/cyData xs
		/cnt1 0 store
		[
		byte dup 0
		cyData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .3 /mul cvx
		}
		{
			.3 mul
		} ifelse
		mgData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .59 /mul cvx
		}
		{
			.59 mul
		} ifelse
		yeData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx .11 /mul cvx
		}
		{
			.11 mul
		} ifelse
		blackData dup type /stringtype eq
		{
			/cnt1 cvx /get cvx d255 /exch cvx /get cvx
		} if
		/add cvx /add cvx /add cvx 1 /exch cvx /sub cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/dup cvx 1 /gt cvx
		{
			pop 1
		} /if cvx
		255 /mul cvx /cvi cvx
		256 /mod cvx
		/dup cvx 0 /lt cvx
		{
			pop 0
		} /if cvx
		/put cvx
		/cnt1 dup cvx 1 /add cvx /store cvx
		] cvx
		bind
			_image_ 
		sSave restore
	} bd
	} ifelse
} if
level2? not
{
	/bCImg
	{
		/cDataLen bDataLen store
		setImgSpace
		setSSave
		expandSpot
		cyData mgData yeData cData
		colorimage? 
		{
			expandCMYK
		} if
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bwFill
	{
		setSSave
		/cDataLen 8 store
		/cData currentgray makeByte store
		bwImage
		sSave restore
	} bd
	/c1ImgFill
	{
		setSSave
		/cDataLen 8 store
		setImgSpace
		spotColor?
		{
			spotDict begin
				spot1 begin
					currentCustomColor makeByte /tintImage exch def
					/name exch def
					/spot_K exch def
					/spot_Y exch def
					/spot_M exch def
					/spot_C exch def
			 end
				spot2 initSpotData
		 end
		} if
		currentcmykcolor
		4
		{
			makeByte 4 1 roll
		} repeat
		true 4 spotDict
		{
			ncolorimage
		} stopped
		{
			$error /errorname get /undefinedresult ne
			{
				stop
			}
			{
				10
				{
					pop
				} repeat
			} ifelse
		} if
		sSave restore
	} bd
	/bFill
	noImg
	{
		{
			_fill
		}
	}
	{
		{
			color?
			{
				c1ImgFill
			}
			{
				bwFill
			} ifelse
		}
	} ifelse
	bd
} if
composite?
{
	/bCFun
	{
		color?
		{
			cyData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			mgData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			yeData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			cData dup type /stringtype eq
			{
				/ndx cvx /get cvx d255 /exch cvx /get cvx
			} if
			spotColor?
			{
				spotDict begin
					/spotDict cvx /begin cvx
					spot1 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot1 cvx /tintValue 3 -1 /roll cvx /put cvx
					spot2 begin
						tintImage dup type /stringtype eq
						{
							/ndx cvx /get cvx d255- /exch cvx /get cvx
						}
						{
							dup type /nulltype ne 
							{
								name type /nametype ne {1 exch sub} if
							} if
						} ifelse
				 end
					/spot2 cvx /tintValue 3 -1 /roll cvx /put cvx
					/end cvx
			 end
				/spotDict cvx
				/nsetcustomcolor cvx
			}
			{
				/setcmykcolor cvx
			} ifelse
		}
		{
			cData /ndx cvx /get cvx
			d255 /exch cvx /get cvx
			/setgray cvx
		} ifelse
	} bd
	/Bc
	{
		newpath
		gsave
		setBSpace
		nColors 1 eq
		{
			pop pop
			setCStop
		} if
		bFill
		grestore
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			linImg
		}
		{
			bFill
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		_fill
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			_fill
			blend? bHi? or
			{
				rdBlend
			} if
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/cGetRData
	{
		setCStop
		/blend?
		cData type /stringtype eq
		dup not color? and
		{
			pop
			cyData type /stringtype eq
			mgData type /stringtype eq
			yeData type /stringtype eq
			or or
		} if
		store
	} def
	/cGetRData
} if
/eCStop
{
	mark
	1 index 3 mul 3 add dup 8 gt
	{
		pop 8
	} if
	1 roll
	cleartomark
} bd
composite? not
{
	/knockOut
	level2?
	{
		{
			0 0 0 0 setcmykcolor _fill
		}
	}
	{
		/bFill noImg
		{
			{
				_fill
			}
		}
		{
			{
				_of true eq
				{
					currentgray 1 ne
					{
						bwFill
					} if
				}
				{
					bwFill
				} ifelse
			}
		} ifelse
		def
		/whiteByte 1 makeByte def
		noImg
		{
			{
				0 0 0 0 setcmykcolor _fill
			}
		}
		{
			{
				cBType 0 eq
				{
					setSSave
					/cData whiteByte store
					/cDataLen 8 store
					bwImage
					sSave restore
				}
				{
					_fill
				} ifelse
			}
		} ifelse
	} ifelse
	bd
	/bCFun
	{
		cData dup type /stringtype ne
		{
			color?
			{
				1 exch sub
			} if
		}
		{
			/ndx cvx /get cvx
			color? customColor? not and
			{
				d255-
			}
			{
				d255
			} ifelse
			/exch cvx /get cvx
		} ifelse
		/_setgray_ cvx
	} bd
	/eCCBlend
	{
		dup 3 eq
		{
			pop
			mark 7 1 roll
			6 copy ccThrough? dup /blend? xs
			{
				/startC? true store
				setCustomColor
				customColor?
				{
					/cData tint1Data store
					setCDataLen
				} if
				/endC?
				3 index 3 eq
				{
					4 index 1 ne
				}
				{
					false
				} ifelse
				store
			} if
			cleartomark
			stop
		} if
		1 eq
		{
			pop pop pop
		} if
		pop
		/startC? false store
		6
		{
			8 index
		} repeat
		ccThrough? dup /blend? xs
		{
			/endC? true store
			blend? not
			{
				stop
			} if
			customColor?
			{
				/cData tint1Data store
				setCDataLen
			} if
		} if
	} bd
	/handleOP
	{
		_of not
		{
			knockOut
		} if
	} bd
	/handleROP
	{
		_of not
		{
			0 0 0 0 setcmykcolor _fill
		}
		{
			newpath	
		} ifelse
	} bd
	/rdBm
	{
		/nColors dup load 1 sub store
		blend? 
		{
			_fill
		}
		{
			handleROP
		} ifelse
		gsave
		bUMatrix astore concat
		bHi?
		{
			xHi yHi bUMatrix idtransform /yHi exch store /xHi exch store
			rampPoint 1 lt
			{
				1 rampPoint sub dup xHi mul exch yHi mul translate
			} if
		} if
		nColors
		{
			0 0 rampPoint 0 360 arc
			blend?
			{
				cData type /stringtype ne bHi? not and
				{
					cData color?
					{
						1 exch sub
					} if
					_setgray_ 
					_fill_ 
				}
				{
					cData type /stringtype ne
					{
						/cDataLen 1 store
						/bDataLen 1 store
					} if
					rdBlend
				} ifelse
			}
			{
				
				handleROP
				
				pTState?
				{
					/bAxis rampPoint endPoint sub store
					xHi bAxis mul yHi bAxis mul translate
				} if
			} ifelse
				
			nColors 1 gt
			{
				getRData
			} if
			/nColors dup load 1 sub store
		} repeat
		/nColors 1 store
		grestore
	} bd
	/ccThrough?
	{
		gsave
		pop 0 setCustomColor
		currentcmykcolor
		grestore
		anyColor?
	} bd
	/forceCMYK
	{
		exch pop
		1 exch sub 5 1 roll
		4
		{
			4 index mul 4 1 roll
		} repeat
		0
		cCMYKData dup /cData ne
		{
			dup /yeData eq
			{
				pop 1 add
			}
			{
				/mgData eq
				{
					2
				}
				{
					3
				} ifelse
				add
			} ifelse
			0
		} if
		pop
		index
		0 eq
		{
			pop pop pop pop 0 0 0 0
		} if
		setcmykcolor
		pop
		/fCMYK? true store
	} bd
	/endCapSepBc
	{
		pop pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				colorType 1 eq
				{
					forceCMYK
				}
				{
					fCMYK?
					{
						forceCMYK
					}
					{
						setCustomColor
					} ifelse
				} ifelse
			} ifelse
		} ifelse
		currentcmykcolor anyColor? 
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
		
	} bd
} if
/cCMYKData 0 def
composite? dup not
{
	pop customColor?
} if
not
{
	/cCMYKData
	/cyData /mgData /yeData /cData
	black? not
	{
		yellow?
		{
			exch
		}
		{
			magenta?
			{
				3
			}
			{
				4
			} ifelse
			-1 roll
		} ifelse
	} if
	4 1 roll pop pop pop
	store
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			
			blend? currentcmykcolor anyColor? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cCMYKData load dup type /stringtype eq
			{
				dup length /cDataLen xs
				/cData xs
				gsave
				colorType 0 ne noImg not and
				{
					invertXfer
				} if
				linImg
				grestore
			}
			{
				pop bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/cmykGetRData
	{
		/fCMYK? false store
		blend?
		{
			{
				cmykDataProcs colorType get exec
			} stopped
			pop
			blend?
			{
				/cData cCMYKData load store
				setCDataLen
			} if
		} if
	} def
	/cmykDataProcs
	[
	{
		pop
		black? dup /blend? xs
		{
			setgray
			0
		} if
		pop
	}
	{
		cCMYKData load dup type /stringtype ne
		{
			0 0 0
			cyan? not
			{
				4 magenta?
				{
					1
				}
				{
					yellow?
					{
						2
					}
					{
						3
					} ifelse
				} ifelse
				roll
			} if
			4 copy add add add 0 eq
			{
				/blend? false store
			} if
			
			setcmykcolor
			/startC? true store
			/endC? true store
			eCStop
			stop
		} if
		pop
		dup 0 eq
		{
			pop
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				forceCMYK
			} ifelse
		} ifelse
	} bind
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			black?
			{
				setgray
			}
			{
				0 0 0 4 -1 roll 1 exch sub setcmykcolor
			} ifelse
			black?
			{
				/blend? true store
			} if
			6
			{
				8 index
			} repeat
			ccThrough?
			{
				/blend? true store
			}
			{
				black?
				{
					/cData tint1Data store
					setCDataLen
				}
				{
					/blend? false store
				} ifelse
			} ifelse
		}
		{
			mark 7 1 roll
			6 copy ccThrough?
			{
				forceCMYK
				pop
				stop
			} if
			9 index 0 eq
			{
				black? dup /blend? xs
				{
					pop 1 setgray
					/cData tint2Data store
					setCDataLen
					0
				} if
				pop
			}
			{
				/blend?
				6
				{
					16 index
				} repeat
				ccThrough?
				store
				blend?
				{
					forceCMYK
				} if
			} ifelse
			cleartomark
		} ifelse
	} bind
	] def
	/cmykGetRData
} if
composite? dup not
{
	pop isCMYKSep?
} if
not
{
	/endCapSepBc
	{
		/white? false store
		pop pop
		dup 0 eq
		{
			pop
			/white? 1 index 1 eq store
			setgray
		}
		{
			1 eq
			{
				setcmykcolor
			}
			{
				setCustomColor
			} ifelse
		} ifelse
%
		currentcmykcolor anyColor?
		endC? or
		blend? and
		{
			bFill
		}
		{
			handleOP
		} ifelse
	} bd
	/Bc
	{
		gsave
		setBSpace
		nColors 1 gt
		{
			blend? startC? and
			{
				bFill
			}
			{
				handleOP
			} ifelse
		}
		{
			endCapSepBc
		} ifelse
		grestore
		newpath
	} bd
	/linealBm
	{
		/nColors dup load 1 sub store
		newpath
		gsave
		setBSpace
		blend?
		{
			cData type /stringtype eq
			{
				linImg
			}
			{
				bFill
			} ifelse
		}
		{
			handleOP
		} ifelse
		grestore
		nColors 1 gt
		{
			getRData
		} if
	} bd
	/discardCMY
	{
		counttomark 4 add -3 roll pop pop pop
	} bd
	/testTopCC
	{
		6 copy ccThrough?
	} bd
	/getCRamp
	{
		{
			ccDataProcs colorType 2 sub get exec
		} stopped pop
		blend? cDataLen 0 eq and
		{
			/cDataLen bDataLen store
		} if
	} bd
	/ccGetRData
	{
		/fCMYK? false store
		/startC? false store
		/endC? false store
		colorType 2 lt
		{
			/blend? false def
		} if
		blend?
		{
			getCRamp
		}
		{
			setCStop
		} ifelse
		blend?
		{
			/blend? cData 1 ne store
			blend?
			{
				cData dup type /stringtype ne
				{
					1 exch sub /cData xs 0
				} if
				pop
			} if
		} if
	} def
	/ccDataProcs
	[
	/eCCBlend load
	{
		cBType 1 eq
		{
			tint1Data tint2Data
			/tint1Data xs
			/tint2Data xs
		} if
		0 eq
		{
			/blend? false store
			pop
		}
		{
			mark 7 1 roll
			testTopCC
			{
				/blend? 1 index 1 ne store
				/startC? blend? store
				/endC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint1Data store
				setCDataLen
				setCustomColor
				pop
				stop
			} if
			cleartomark
		} ifelse
		2 index 0 eq
		{
			/blend? false store
		}
		{
			mark 6
			{
				9 index
			} repeat
			testTopCC dup /blend? xs
			{
				/blend? 1 index 1 ne store
				/endC? blend? store
				/startC? false store
				blend? not
				{
					cleartomark stop
				} if
				/cData tint2Data store
				setCDataLen
			} if
			cleartomark
		} ifelse
	} bind
	] def
	/ccGetRData
} if
load Adobe_blend_AI5_vars /getData 3 -1 roll put
/setCDataLen
{
	/cDataLen 0 cData dup type /stringtype eq
	{
		length exch
	} if
	pop store
} bd
/initSpotData
{
 begin
		/name null def
		/tintImage null def
		/tintValue null def
		/spot_C  null def
		/spot_M  null def
		/spot_Y  null def
		/spot_K  null def
 end
} bd
/getRData
{
	/colorType gMark store
	_compositeSpotDevice 0 ne
	{
		spotDict begin
			spot1 initSpotData
			spot2 initSpotData
	 end
		/spotColor? colorType 2 eq colorType 3 eq or def
	} 
	{
		/spotColor? false store
	} ifelse
	/blend? true store
	0 0 0 0 setcmykcolor
	100 div /rampPoint xs
% (between 13 and 87%) 
	100 div /midPoint xs
	dup 0 eq
	{
		2
	}
	{
		dup 1 eq
		{
			5
		}
		{
			_compositeSpotDevice 0 ne
			{
				spotDict begin
					spot1 begin
						/name 3 index def
						/spot_K 4 index def
						/spot_Y 5 index def
						/spot_M 6 index def
						/spot_C 7 index def
				 end
			 end
			} if
			7
		} ifelse
	} ifelse
	/tmp exch def
	tmp index 100 div /endPoint xs
	_compositeSpotDevice 0 ne
	{
		tmp 2 add index 3 eq
		{
			/tmp tmp 4 add def
			tmp index dup 
			spotDict begin
				spot1/name get ne
				{
					spot2 begin
						/name exch def
						/spot_K tmp 2 add index def
						/spot_Y tmp 3 add index def
						/spot_M tmp 4 add index def
						/spot_C tmp 5 add index def
				 end
				}
				{
					pop
				} ifelse
		 end
		} if
	} if
	/color? colorType 0 gt store
	
	colorType 3 eq
	{
		/tint2Data gMark store
	} if
	
	colorType 2 ge
	{
		/tint1Data gMark store
	} if
	_compositeSpotDevice 0 ne
	{
		spotDict begin
		
			colorType 2 ge
			{
				colorType 3 eq
				{
					spot2 begin
						/tintImage cBType 0 eq {tint2Data} {tint1Data} ifelse def
						name null eq {/name /Black def} if
				 end
				} if
				spot1 begin
					/tintImage cBType 0 eq colorType 2 eq or {tint1Data} {tint2Data} ifelse def
					colorType 2 eq 
					{
						name null eq 
						{
							/name spot2/name get def
							spot2/name null put
						} if
					}
					{
						name null eq {/name /Black def} if
					} ifelse
			 end
			} if
	 end
	} if
	
	/cData gMark store
	setCDataLen
	colorType 0 gt
	{
		counttomark 4 add -3 roll
		/yeData xs
		/mgData xs
		/cyData xs
	} if
	blend?
	{
		/bDataLen
		cDataLen dup 0 eq color? and
		{
			[
			cyData mgData yeData
			]
			{
				dup type /stringtype eq
				{
					length exch pop exit
				} if
				pop
			} forall
		} if
		store
		bDataLen 0 eq
		{
			/bDataLen 1 store
		} if
		getData
		blend?
		{
			composite? cDataLen 0 eq and
			{
				/cDataLen bDataLen store
			} if
		} if
	}
	{
		setCStop
	} ifelse
} bd
/Bg
{
	0 0 0 0 setcmykcolor
	6
	{
		pop
	} repeat
	/blendLength xs
	pop pop pop
	/cBName xs
	/bRender xs
	bRender 2 ne
	{
		composite? not
		{
			_of setoverprint
		} if
		_eo {eoclip} {clip} ifelse
		_bn cBName 2 copy known
		{
			get
			mark exch aload pop
			/cBType xs
			/nColors xs
			mark exch aload pop
			0 0
		} if
		pop pop
		getRData
		cBType 0 eq
		{
			/linealBm
		}
		{
			bHi?
			{
				/pTState? nColors 2 gt store
			} if
			/doBlend /rdBlend load store
			/rdBm
		} ifelse
	}
	{
		inLine? not
		{
			mark mark
		} if
		/Bc dup
		{
			cleartomark mark
		} bd
		/nullProc
	} ifelse
	load /Bm xs
} bd
/linImg
noImg
{
	{
		newpath doRctBlend
	}
}
{
	{
		/doBlend
		color? composite? and
		{
			/bCImg
		}
		{
			/bwImage
		} ifelse
		load
		store
	
		0 0 moveto
		tRectOK? composite? and
		{
			{
				mark
				0 1 dtransform atan cvi 90 mod 0 eq
				1 0 dtransform atan cvi 90 mod 0 eq
			} stopped
			{
				cleartomark
			}
			{
				and exch pop
				{
					newpath
					doRctBlend
				}
				{
					doBlend
				} ifelse
			} ifelse
		}
		{
			doBlend
		} ifelse
	} 
} ifelse
bd
/doRctBlend
{
	gsave
	/sInc 1 store
	/nSamples bDataLen store
	/bInc 1 bDataLen div store
	/ubAxis 1 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt store
	/pChange ubAxis 0 eq
	{
		0
	}
	{
		bDataLen ubAxis div
	} ifelse
	store
	pChange .5 gt noImg not and dup /optimize? xs
	{
		/nSamples ubAxis 2 div round cvi dup 1 le
		{
			pop 2
		} if
		store
		/bInc 1 nSamples div store
		/sInc bDataLen 1 sub nSamples 1 sub div store
	} if
	0
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	/rectfill where dup
	{
		exch pop _compositeSpotDevice 1 ne and
	} if
	{
		0 0 bInc 1 /rectfill cvx	
	}
	{
		0 0 /moveto cvx
		bInc 0 /lineto cvx
		bInc 1 /lineto cvx
		0 1 /lineto cvx
		/closepath cvx
		/_fill_ cvx
	} ifelse
	bInc 0 /translate cvx
	sInc /add cvx
	] cvx
	bind
	repeat
	pop
	spotColor? {nsetcustomcolorend} if
	
	grestore
} bd
/rdPrep
{
	/nSamples bDataLen dup 0 eq
	{
		pop 1
	} if
	store
	/sInc -1 store
	/bAxis rampPoint endPoint sub store
	/bInc bAxis bDataLen div neg store
	/optimize? false store
	tRectOK?
	{
		/ubAxis
		bAxis 0 dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		0 bAxis dtransform dUserSpace idtransform dup mul exch dup mul add sqrt
		2 copy lt
		{
			exch
		} if
		pop store
		/pChange ubAxis 0 eq
		{
			0
		}
		{
			bDataLen ubAxis div
		} ifelse
		store
		pChange .5 gt noImg not and dup /optimize? xs
		{
			/nSamples ubAxis 2 div round cvi dup 1 le
			{
				pop 2
			} if
			store
			/bInc bAxis nSamples div neg store
			/sInc bDataLen 1 sub nSamples 1 sub div neg store
		} if
	} if
	bHi?
	{
		/xBCInc xHi bAxis mul nSamples div store
		/yBCInc yHi bAxis mul nSamples div store
	} if
} bd
/rdBlend
{
	newpath
	gsave
	rdPrep
	rampPoint
	bDataLen 1 sub
	nSamples
	[
	/dup cvx
	optimize?
	{
		/round cvx /cvi cvx
	} if
	/ndx /exch cvx /store cvx
	bCFun
	0 0 3 /index cvx 0 360 /arc cvx /_fill_ cvx
	/exch cvx bInc /add cvx /exch cvx
	sInc /add cvx
	bHi?
	{
		xBCInc yBCInc /translate cvx
	} if
	] cvx
	bind
	repeat
	pop pop
	spotColor? {nsetcustomcolorend} if
	grestore
	pTState?
	{
		xHi bAxis mul yHi bAxis mul translate
	} if
} bd
/Bh
{
	pop pop
	/pTState? false store
	2 copy 0 ne exch 0 ne or dup /bHi? xs
	{
		/yHi xs
		/xHi xs
		0 0
	} if
	pop pop
} bd
/BD
{
	inLine? not
	{
		] nColors cBType
		] _bn cBName 3 -1 roll put
 end
} if
} bd
/Bn
{
1 add dict
dup nullString null put
/_bn xs
} bd
/Bd
{
Adobe_blend_AI5_vars begin
	3 -1 roll dup nullString eq dup
	{
		setSSave
	} if
	/inLine? exch def
	/cBName exch def
	/nColors exch def
	/cBType exch def
} bd
/Bb
{
	sSave null eq
	{
		Adobe_blend_AI5_vars begin
		setSSave
	} if
	composite?
	{
		/_fill /fill load store
	}
	{
		/__fill /fill load store
			/_fill
			{
				_of true eq
				{
					currentgray 1 ne
					{
						__fill
					} if
				}
				{
					__fill
				} ifelse
			} def
	} ifelse
	/fill
	{
	} def
	} bd
	/BB
	{
	/cBType xs
	cleartomark cleartomark
	cBType dup
	bRender
	sSave dup type /savetype eq
	{
		restore 0
	} if
	pop
	currentdict Adobe_blend_AI5_vars eq
	{
	 end
	} if
	2 ne exch 0 gt and
	{
		2 eq
		{
			s
		}
		{
			S
		} ifelse
	}
	{
		pop newpath
	} ifelse
} bd
currentdict readonly pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_pattern_AI5 1.1 0
%%Title: (Adobe Illustrator (R) Version 5.0 Pattern Operators)
%%Version: 1.1 0
%%CreationDate: (03/26/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 95 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/@
{
} def
/&
{
} def
/dp
{
	dup null eq
	{
		pop
		_dp 0 ne
		{
			0 1 _dp 1 sub _dl mod
			{
				_da exch get 3 get
			} for
			_dp 1 sub _dl mod 1 add packedarray
			_da 0 get aload pop 8 -1 roll 5 -1 roll pop 4 1 roll
			definepattern pop
		} if
	}
	{
		_dp 0 ne _dp _dl mod 0 eq and
		{
			null dp
		} if
		7 packedarray _da exch _dp _dl mod exch put
		_dp _dl mod _da 0 get 4 get 2 packedarray
		/_dp _dp 1 add def
	} ifelse
} def
/E
{
	_ed begin
	dup 0 get type /arraytype ne
	{
		0
		{
			dup 1 add index type /arraytype eq
			{
				1 add
			}
			{
				exit
			} ifelse
		} loop
		array astore
	} if
	/_dd exch def
	/_ury exch def
	/_urx exch def
	/_lly exch def
	/_llx exch def
	/_n exch def
	/_y 0 def
	/_dl 4 def
	/_dp 0 def
	/_da _dl array def
	0 1 _dd length 1 sub
	{
		/_d exch _dd exch get def
		0 2 _d length 2 sub
		{
			/_x exch def
			/_c _d _x get _ ne def
			/_r _d _x 1 add get cvlit def
			_r _ ne
			{
				_urx _llx sub _ury _lly sub
				[
				1 0 0 1 0 0
				]
				[
				/save cvx
				_llx neg _lly neg /translate cvx
				_c
				{
					nc /begin cvx
				} if
				_r dup type /stringtype eq
				{
					cvx
				}
				{
					{
						exec
					} /forall cvx
				} ifelse
				_c
				{
					/end cvx
				} if
				/restore cvx
				] cvx
				/_fn 12 _n length add string def
				_y _fn cvs pop
				/_y _y 1 add def
				_fn 12 _n putinterval
				_fn _c false dp
				_d exch _x 1 add exch put
			} if
		} for
	} for
	null dp
	_n _dd /_pd
 end
	xput
} def
/fc
{
	_fm dup concatmatrix pop
} def
/p
{
	/_fm exch ddef
	9 -2 roll _pm translate fc
	7 -2 roll _pm scale fc
	5 -1 roll _pm rotate fc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate fc
		1 -1 _pm scale fc
		neg _pm rotate fc
	}
	{
		pop
	} ifelse
	dup _pm rotate fc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore fc
	neg _pm rotate fc
	_pd exch get /_fdd exch ddef
	/_pf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					patternfill
				}
				{
					pop
					fill
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_psf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					9 copy 6 npop patternashow
				}
				{
					pop
					6 copy 3 npop hvashow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		sw rmoveto
	} ddef
	/_pjsf
	{
		save
		/_doClip 0 ddef
		0 1 _fdd length 1 sub
		{
			/_fd exch _fdd exch get ddef
			_fd
			0 2 _fd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _fc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _fm
					12 copy 6 npop patternawidthshow
				}
				{
					pop 9 copy 3 npop hvawidthshow
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		swj rmoveto
	} ddef
	/_lp /none ddef
} def
/sc
{
	_sm dup concatmatrix pop
} def
/P
{
	/_sm exch ddef
	9 -2 roll _pm translate sc
	7 -2 roll _pm scale sc
	5 -1 roll _pm rotate sc
	4 -2 roll exch 0 ne
	{
		dup _pm rotate sc
		1 -1 _pm scale sc
		neg _pm rotate sc
	}
	{
		pop
	} ifelse
	dup _pm rotate sc
	exch dup sin exch cos div 1 0 0 1 0 6 2 roll
	_pm astore sc
	neg _pm rotate sc
	_pd exch get /_sdd exch ddef
	/_ps
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					patternstroke
				}
				{
					pop stroke
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		newpath
	} ddef
	/_pss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					10 copy 6 npop patternashowstroke
				}
				{
					pop 7 copy 3 npop ss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop sw rmoveto
	} ddef
	/_pjss
	{
		save
		/_doClip 0 ddef
		0 1 _sdd length 1 sub
		{
			/_sd exch _sdd exch get ddef
			_sd
			0 2 _sd length 2 sub
			{
				gsave
				2 copy get dup _ ne
				{
					cvx exec _sc
				}
				{
					pop
				} ifelse
				2 copy 1 add get dup _ ne
				{
					aload pop findfont _sm
					13 copy 6 npop patternawidthshowstroke
				}
				{
					pop 10 copy 3 npop jss
				} ifelse
				grestore
				pop
			} for
			pop
		} for
		restore
		pop swj rmoveto
	} ddef
	/_lp /none ddef
} def
end
userdict /Adobe_pattern_AI5 18 dict dup begin
put
/initialize
{
	/definepattern where
	{
		pop
	}
	{
	 begin
	 begin
		Adobe_pattern_AI5 begin
		Adobe_pattern_AI5
		{
			dup xcheck
			{
				bind
			} if
			pop pop
		} forall
		mark
		cachestatus 7 1 roll pop pop pop pop exch pop exch
		{
			{
				10000 add
				dup 2 index gt
				{
					exit
				} if
				dup setcachelimit
			} loop
		} stopped
		cleartomark
	 end 	
		
	 end
	 end
		
		Adobe_pattern_AI5 begin
	} ifelse
} def
/terminate
{
	currentdict Adobe_pattern_AI5 eq
	{
	 end
	} if
} def
errordict
/nocurrentpoint
{
	pop
	stop
} put
errordict
/invalidaccess
{
	pop
	stop
} put
/patternencoding
256 array def
0 1 255
{
	patternencoding exch ( ) 2 copy exch 0 exch put cvn put
} for
/definepattern
{
	17 dict begin
	/uniform exch def
	/cache exch def
	/key exch def
	/procarray exch def
	/mtx exch matrix invertmatrix def
	/height exch def
	/width exch def
	/ctm matrix currentmatrix def
	/ptm matrix def
	/str 32 string def
	/slice 9 dict def
	slice /s 1 put
	slice /q 256 procarray length div sqrt floor cvi put
	slice /b 0 put
	/FontBBox
	[
	0 0 0 0
	] def
	/FontMatrix mtx matrix copy def
	/Encoding patternencoding def
	/FontType 3 def
	/BuildChar
	{
		exch
	 begin
		/setstrokeadjust where {pop true setstrokeadjust} if
		slice begin
		dup q dup mul mod s idiv /i exch def
		dup q dup mul mod s mod /j exch def
		q dup mul idiv procarray exch get
		/xl j width s div mul def
		/xg j 1 add width s div mul def
		/yl i height s div mul def
		/yg i 1 add height s div mul def
		uniform
		{
			1 1
		}
		{
			width 0 dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
			0 height dtransform
			dup mul exch dup mul add sqrt dup 1 add exch div
		} ifelse
		width 0 cache
		{
			xl 4 index mul yl 4 index mul xg 6 index mul yg 6 index mul
			setcachedevice
		}
		{
			setcharwidth
		} ifelse
		gsave
		scale
		newpath
		xl yl moveto
		xg yl lineto
		xg yg lineto
		xl yg lineto
		closepath
		clip
		newpath
	 end
	 end
		exec
		grestore
	} def
	key currentdict definefont
 end
} def
/patterncachesize
{
	gsave
	newpath
	0 0 moveto
	width 0 lineto
	width height lineto
	0 height lineto
	closepath
	patternmatrix setmatrix
	pathbbox
	exch ceiling 4 -1 roll floor sub 3 1 roll
	ceiling exch floor sub
	mul 1 add
	grestore
} def
/patterncachelimit
{
	cachestatus 7 1 roll 6 npop 8 mul
} def
/patternpath
{
	exch dup begin
	setfont
	ctm setmatrix
	concat
	slice exch /b exch slice /q get dup mul mul put
	FontMatrix concat
	uniform
	{
		width 0 dtransform round width div exch round width div exch
		0 height dtransform round height div exch height div exch
		0 0 transform round exch round exch
		ptm astore setmatrix
	}
	{
		ptm currentmatrix pop
	} ifelse
	{
		currentpoint
	} stopped not
	{
		2 npop
		pathbbox
		true
		4 index 3 index eq
		4 index 3 index eq
		and
		{
			pop false
			{
				{
					2 npop
				}
				{
					3 npop true
				}
				{
					7 npop true
				}
				{
					pop true
				} pathforall
			} stopped
			{
				5 npop true
			} if
		} if
		{
			height div ceiling height mul 4 1 roll
			width div ceiling width mul 4 1 roll
			height div floor height mul 4 1 roll
			width div floor width mul 4 1 roll
			2 index sub height div ceiling cvi exch
			3 index sub width div ceiling cvi exch
			4 2 roll moveto
			FontMatrix mtx invertmatrix
			dup dup 4 get exch 5 get rmoveto
			ptm ptm concatmatrix pop
			slice /s
			patterncachesize patterncachelimit div ceiling sqrt ceiling cvi
			dup slice /q get gt
			{
				pop slice /q get
			} if
			put
			0 1 slice /s get dup mul 1 sub
			{
				slice /b get add
				gsave
				0 1 str length 1 sub
				{
					str exch 2 index put
				} for
				pop
				dup
				{
					gsave
					ptm setmatrix
					1 index str length idiv
					{
						str show
					} repeat
					1 index str length mod str exch 0 exch getinterval show
					grestore
					0 height rmoveto
				} repeat
				grestore
			} for
			2 npop
		}
		{
			4 npop
		} ifelse
	} if
 end
} def
/patternclip
{
	_eo {eoclip} {clip} ifelse
} def
/patternstrokepath
{
	strokepath
} def
/patternmatrix
matrix def
/patternfill
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternclip
	Adobe_pattern_AI5 /patternpath get exec
	grestore
	newpath
} def
/patternstroke
{
	dup type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get
	} if
	gsave
	patternstrokepath
	true
	{
		{
			{
				newpath
				moveto
			}
			{
				lineto
			}
			{
				curveto
			}
			{
				closepath
				3 copy
				Adobe_pattern_AI5 /patternfill get exec
			} pathforall
			3 npop
		} stopped
		{
			5 npop
			patternclip
			Adobe_pattern_AI5 /patternfill get exec
		} if
	}
	{
		patternclip
		Adobe_pattern_AI5 /patternfill get exec
	} ifelse
	grestore
	newpath
} def
/vpatternawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index 5 index 5 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			6 index 6 index 6 index Adobe_pattern_AI5 /patternfill get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	3 npop
} def
/hpatternawidthshow
{
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		9 index 9 index 9 index
		Adobe_pattern_AI5 /patternfill get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	8 npop
} def
/patternashow
{
0 0 0 6 3 roll
patternawidthshow
} def
/patternawidthshow
{
	6 index type /dicttype eq
	{
		Adobe_pattern_AI5 /patternmatrix get 7 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshow } { vpatternawidthshow } ifelse
} def
/vpatternawidthshowstroke
{
	7 1 roll
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			3 index setmatrix
			6 index 6 index 6 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			_fontRotateAdjust sub
			moveto
			_hvwb eq { _hvcx _hvcy rmoveto } if
			_hvax _hvay rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			_hvax sub
			3 index _hvwb eq { _hvcx sub } if
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
			gsave
			2 index false charpath
			4 index setmatrix
			7 index 7 index 7 index Adobe_pattern_AI5 /patternstroke get exec
			grestore
			newpath moveto pop pop
		} ifelse
	} cforall
	4 npop
} def
/hpatternawidthshowstroke
{
	7 1 roll
	{
		dup cstring exch
		gsave
		3 index eq { 5 index 5 index rmoveto } if
		false charpath currentpoint
		7 index setmatrix
		10 index 10 index 10 index
		Adobe_pattern_AI5 /patternstroke get exec
		grestore
		newpath moveto
		2 copy rmoveto
	} cforall
	9 npop
} def
/patternashowstroke
{
	0 0 0 7 3 roll
	patternawidthshowstroke
} def
/patternawidthshowstroke
{
	7 index type /dicttype eq
	{
		patternmatrix /patternmatrix get 8 1 roll
	} if
	_lineorientation 0 eq { hpatternawidthshowstroke } { vpatternawidthshowstroke } ifelse
} def
end
setpacking
%%EndResource
%%EndProlog
%%BeginSetup
Adobe_level2_AI5 /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_blend_AI5 /initialize get exec
Adobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_pattern_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
[
39/quotesingle 96/grave 130/quotesinglbase 131/florin 132/quotedblbase
133/ellipsis 134/dagger 135/daggerdbl 136/circumflex 137/perthousand 
138/Scaron 139/guilsinglleft 140/OE 145/quoteleft 146/quoteright 
147/quotedblleft 148/quotedblright 149/bullet 150/endash 151/emdash 
152/tilde 153/trademark 154/scaron 155/guilsinglright 156/oe 157/dotlessi 
159/Ydieresis 164/currency 166/brokenbar 168/dieresis 169/copyright 
170/ordfeminine 172/logicalnot 174/registered 175/macron 176/ring 
177/plusminus 178/twosuperior 179/threesuperior 180/acute 181/mu 
183/periodcentered 184/cedilla 185/onesuperior 186/ordmasculine 
188/onequarter 189/onehalf 190/threequarters 192/Agrave 193/Aacute 
194/Acircumflex 195/Atilde 196/Adieresis 197/Aring 198/AE 199/Ccedilla 
200/Egrave 201/Eacute 202/Ecircumflex 203/Edieresis 204/Igrave 205/Iacute 
206/Icircumflex 207/Idieresis 208/Eth 209/Ntilde 210/Ograve 211/Oacute 
212/Ocircumflex 213/Otilde 214/Odieresis 215/multiply 216/Oslash 
217/Ugrave 218/Uacute 219/Ucircumflex 220/Udieresis 221/Yacute 222/Thorn 
223/germandbls 224/agrave 225/aacute 226/acircumflex 227/atilde 228/adieresis 
229/aring 230/ae 231/ccedilla 232/egrave 233/eacute 234/ecircumflex 
235/edieresis 236/igrave 237/iacute 238/icircumflex 239/idieresis 
240/eth 241/ntilde 242/ograve 243/oacute 244/ocircumflex 245/otilde 
246/odieresis 247/divide 248/oslash 249/ugrave 250/uacute 251/ucircumflex 
252/udieresis 253/yacute 254/thorn 255/ydieresis
TE
%AI3_BeginEncoding: _Helvetica Helvetica
[
/_Helvetica/Helvetica 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Bold Helvetica-Bold
[
/_Helvetica-Bold/Helvetica-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-Oblique Helvetica-Oblique
[
/_Helvetica-Oblique/Helvetica-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Helvetica-BoldOblique Helvetica-BoldOblique
[
/_Helvetica-BoldOblique/Helvetica-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Roman Times-Roman
[
/_Times-Roman/Times-Roman 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Bold Times-Bold
[
/_Times-Bold/Times-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-Italic Times-Italic
[
/_Times-Italic/Times-Italic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Times-BoldItalic Times-BoldItalic
[
/_Times-BoldItalic/Times-BoldItalic 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier Courier
[
/_Courier/Courier 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Bold Courier-Bold
[
/_Courier-Bold/Courier-Bold 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-Oblique Courier-Oblique
[
/_Courier-Oblique/Courier-Oblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Courier-BoldOblique Courier-BoldOblique
[
/_Courier-BoldOblique/Courier-BoldOblique 0 0 1 TZ
%AI3_EndEncoding AdobeType
%AI3_BeginEncoding: _Symbol Symbol
[
/_Symbol/Symbol 0 0 1 TZ
%AI3_EndEncoding AdobeType
%%EndSetup

1 XR

u
  0.000 0.000 0.000 0.000 k
 [] 0 d
  0.000 0.000 0.000 1.000 K
1 j
  5.1514 5.1514 m
  407.4409 5.1514 L
  407.4409 293.7504 L
  5.1514 293.7504 L
  5.1514 5.1514 L
B
U
u
  0.000 0.000 0.000 1.000 K
1 J
  60.4992 91.1681 m
  278.7754 91.1681 L
S
U
u
  0.000 0.000 0.000 1.000 K
  60.4992 106.8619 m
  278.7754 106.8619 L
S
U
u
  0.000 0.000 0.000 1.000 K
  60.4992 121.7171 m
  278.7754 121.7171 L
S
U
u
  0.000 0.000 0.000 1.000 K
  60.4992 137.5308 m
  278.7754 137.5308 L
S
U
u
  0.000 0.000 0.000 1.000 K
  60.4992 152.5058 m
  278.7754 152.5058 L
S
U
u
  0.000 0.000 0.000 1.000 K
  60.4992 168.1997 m
  278.7754 168.1997 L
S
U
u
  0.000 0.000 0.000 1.000 K
  60.4992 183.1747 m
  278.7754 183.1747 L
S
U
u
  0.000 0.000 0.000 1.000 K
  60.4992 198.7488 m
  278.7754 198.7488 L
S
U
u
  0.000 0.000 0.000 1.000 K
  60.4992 213.7238 m
  278.7754 213.7238 L
S
U
u
  0.000 0.000 0.000 1.000 K
  60.4992 229.4176 m
  278.7754 229.4176 L
S
U
u
  0.000 0.000 0.000 1.000 K
  60.4992 244.3927 m
  278.7754 244.3927 L
S
U
u
0.5000 w
  0.000 0.000 0.000 0.498 K
  60.4992 244.3927 m
  278.7754 244.3927 L
  278.7754 76.1930 L
  60.4992 76.1930 L
  60.4992 244.3927 L
S
U
u
0.0000 w
  0.000 0.000 0.000 1.000 K
  60.4992 244.3927 m
  60.4992 76.1930 L
S
U
u
  0.000 0.000 0.000 1.000 K
  56.7854 76.1930 m
  60.4992 76.1930 L
S
U
u
  0.000 0.000 0.000 1.000 K
  56.7854 91.1681 m
  60.4992 91.1681 L
S
U
u
  0.000 0.000 0.000 1.000 K
  56.7854 106.8619 m
  60.4992 106.8619 L
S
U
u
  0.000 0.000 0.000 1.000 K
  56.7854 121.7171 m
  60.4992 121.7171 L
S
U
u
  0.000 0.000 0.000 1.000 K
  56.7854 137.5308 m
  60.4992 137.5308 L
S
U
u
  0.000 0.000 0.000 1.000 K
  56.7854 152.5058 m
  60.4992 152.5058 L
S
U
u
  0.000 0.000 0.000 1.000 K
  56.7854 168.1997 m
  60.4992 168.1997 L
S
U
u
  0.000 0.000 0.000 1.000 K
  56.7854 183.1747 m
  60.4992 183.1747 L
S
U
u
  0.000 0.000 0.000 1.000 K
  56.7854 198.7488 m
  60.4992 198.7488 L
S
U
u
  0.000 0.000 0.000 1.000 K
  56.7854 213.7238 m
  60.4992 213.7238 L
S
U
u
  0.000 0.000 0.000 1.000 K
  56.7854 229.4176 m
  60.4992 229.4176 L
S
U
u
  0.000 0.000 0.000 1.000 K
  56.7854 244.3927 m
  60.4992 244.3927 L
S
U
u
  0.000 0.000 0.000 1.000 K
  60.4992 76.1930 m
  278.7754 76.1930 L
S
U
u
  0.000 0.000 0.000 1.000 K
  60.4992 72.4792 m
  60.4992 76.1930 L
S
U
u
  0.000 0.000 0.000 1.000 K
  71.7604 72.4792 m
  71.7604 76.1930 L
S
U
u
  83.7404 72.4792 m
  83.7404 76.1930 L
S
U
u
  94.8819 72.4792 m
  94.8819 76.1930 L
S
U
u
  106.1431 72.4792 m
  106.1431 76.1930 L
S
U
u
  118.0033 72.4792 m
  118.0033 76.1930 L
S
U
u
  129.2646 72.4792 m
  129.2646 76.1930 L
S
U
u
  141.2446 72.4792 m
  141.2446 76.1930 L
S
U
u
  152.5058 72.4792 m
  152.5058 76.1930 L
S
U
u
  163.6473 72.4792 m
  163.6473 76.1930 L
S
U
u
  175.6273 72.4792 m
  175.6273 76.1930 L
S
U
u
  186.7687 72.4792 m
  186.7687 76.1930 L
S
U
u
  198.0300 72.4792 m
  198.0300 76.1930 L
S
U
u
  210.0100 72.4792 m
  210.0100 76.1930 L
S
U
u
  221.2712 72.4792 m
  221.2712 76.1930 L
S
U
u
  233.2512 72.4792 m
  233.2512 76.1930 L
S
U
u
  244.3927 72.4792 m
  244.3927 76.1930 L
S
U
u
  255.6539 72.4792 m
  255.6539 76.1930 L
S
U
u
  267.5141 72.4792 m
  267.5141 76.1930 L
S
U
u
  278.7754 72.4792 m
  278.7754 76.1930 L
S
U
u
0.5000 w
  1.000 1.000 0.498 0.000 K
  66.4892 161.4908 m
  77.7504 123.2745 L
  88.8918 84.4592 L
  100.8719 80.7454 L
  112.1331 76.9118 L
  123.9933 76.1930 L
  135.2546 76.1930 L
  146.5158 76.1930 L
  158.4958 76.1930 L
  169.6373 76.1930 L
  180.8985 76.1930 L
  192.7587 76.1930 L
  204.0200 76.1930 L
  215.2812 76.1930 L
  227.2612 76.1930 L
  238.4027 76.1930 L
  250.3827 76.1930 L
  261.5241 76.1930 L
S
U
u
  0.000 1.000 0.000 0.000 K
  66.4892 233.9700 m
  77.7504 159.2146 L
  88.8918 84.4592 L
  100.8719 80.7454 L
  112.1331 76.9118 L
  123.9933 76.1930 L
  135.2546 76.1930 L
  146.5158 76.1930 L
  158.4958 76.1930 L
  169.6373 76.1930 L
  180.8985 76.1930 L
  192.7587 76.1930 L
  204.0200 76.1930 L
  215.2812 76.1930 L
  227.2612 76.1930 L
  238.4027 76.1930 L
  250.3827 76.1930 L
  261.5241 76.1930 L
S
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  66.4892 163.6473 m
  68.7654 161.4908 L
  66.4892 159.2146 L
  64.2130 161.4908 L
  66.4892 163.6473 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  77.7504 125.5507 m
  79.9068 123.2745 L
  77.7504 120.9983 L
  75.4742 123.2745 L
  77.7504 125.5507 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  88.8918 86.7354 m
  91.1681 84.4592 L
  88.8918 82.1830 L
  86.7354 84.4592 L
  88.8918 86.7354 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  100.8719 82.9018 m
  103.1481 80.7454 L
  100.8719 78.4692 L
  98.7155 80.7454 L
  100.8719 82.9018 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  112.1331 79.1880 m
  114.2895 76.9118 L
  112.1331 74.7554 L
  109.8569 76.9118 L
  112.1331 79.1880 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  123.9933 78.4692 m
  126.2696 76.1930 L
  123.9933 73.9168 L
  121.7171 76.1930 L
  123.9933 78.4692 L
B
U
u
  1.000 1.000 0.498 0.000 k
  1.000 1.000 0.498 0.000 K
  135.2546 78.4692 m
  137.5308 76.1930 L
  135.2546 73.9168 L
  132.9784 76.1930 L
  135.2546 78.4692 L
B
U
u
  1.000 1.000 0.498 0.000 k
  146.5158 78.4692 m
  148.6722 76.1930 L
  146.5158 73.9168 L
  144.2396 76.1930 L
  146.5158 78.4692 L
B
U
u
  1.000 1.000 0.498 0.000 k
  158.4958 78.4692 m
  160.6522 76.1930 L
  158.4958 73.9168 L
  156.2196 76.1930 L
  158.4958 78.4692 L
B
U
u
  1.000 1.000 0.498 0.000 k
  169.6373 78.4692 m
  171.9135 76.1930 L
  169.6373 73.9168 L
  167.4809 76.1930 L
  169.6373 78.4692 L
B
U
u
  1.000 1.000 0.498 0.000 k
  180.8985 78.4692 m
  183.1747 76.1930 L
  180.8985 73.9168 L
  178.6223 76.1930 L
  180.8985 78.4692 L
B
U
u
  1.000 1.000 0.498 0.000 k
  192.7587 78.4692 m
  195.0349 76.1930 L
  192.7587 73.9168 L
  190.4825 76.1930 L
  192.7587 78.4692 L
B
U
u
  1.000 1.000 0.498 0.000 k
  204.0200 78.4692 m
  206.2962 76.1930 L
  204.0200 73.9168 L
  201.7438 76.1930 L
  204.0200 78.4692 L
B
U
u
  1.000 1.000 0.498 0.000 k
  215.2812 78.4692 m
  217.4376 76.1930 L
  215.2812 73.9168 L
  213.0050 76.1930 L
  215.2812 78.4692 L
B
U
u
  1.000 1.000 0.498 0.000 k
  227.2612 78.4692 m
  229.4176 76.1930 L
  227.2612 73.9168 L
  224.9850 76.1930 L
  227.2612 78.4692 L
B
U
u
  1.000 1.000 0.498 0.000 k
  238.4027 78.4692 m
  240.6789 76.1930 L
  238.4027 73.9168 L
  236.2463 76.1930 L
  238.4027 78.4692 L
B
U
u
  1.000 1.000 0.498 0.000 k
  250.3827 78.4692 m
  252.6589 76.1930 L
  250.3827 73.9168 L
  248.2263 76.1930 L
  250.3827 78.4692 L
B
U
u
  1.000 1.000 0.498 0.000 k
  261.5241 78.4692 m
  263.8003 76.1930 L
  261.5241 73.9168 L
  259.3677 76.1930 L
  261.5241 78.4692 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  64.2130 231.6938 m
  68.7654 231.6938 L
  68.7654 236.2463 L
  64.2130 236.2463 L
  64.2130 231.6938 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  75.4742 156.9384 m
  79.9068 156.9384 L
  79.9068 161.4908 L
  75.4742 161.4908 L
  75.4742 156.9384 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  86.7354 82.1830 m
  91.1681 82.1830 L
  91.1681 86.7354 L
  86.7354 86.7354 L
  86.7354 82.1830 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  98.7155 78.4692 m
  103.1481 78.4692 L
  103.1481 82.9018 L
  98.7155 82.9018 L
  98.7155 78.4692 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  109.8569 74.7554 m
  114.2895 74.7554 L
  114.2895 79.1880 L
  109.8569 79.1880 L
  109.8569 74.7554 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  121.7171 73.9168 m
  126.2696 73.9168 L
  126.2696 78.4692 L
  121.7171 78.4692 L
  121.7171 73.9168 L
B
U
u
  0.000 1.000 0.000 0.000 k
  0.000 1.000 0.000 0.000 K
  132.9784 73.9168 m
  137.5308 73.9168 L
  137.5308 78.4692 L
  132.9784 78.4692 L
  132.9784 73.9168 L
B
U
u
  0.000 1.000 0.000 0.000 k
  144.2396 73.9168 m
  148.6722 73.9168 L
  148.6722 78.4692 L
  144.2396 78.4692 L
  144.2396 73.9168 L
B
U
u
  0.000 1.000 0.000 0.000 k
  156.2196 73.9168 m
  160.6522 73.9168 L
  160.6522 78.4692 L
  156.2196 78.4692 L
  156.2196 73.9168 L
B
U
u
  0.000 1.000 0.000 0.000 k
  167.4809 73.9168 m
  171.9135 73.9168 L
  171.9135 78.4692 L
  167.4809 78.4692 L
  167.4809 73.9168 L
B
U
u
  0.000 1.000 0.000 0.000 k
  178.6223 73.9168 m
  183.1747 73.9168 L
  183.1747 78.4692 L
  178.6223 78.4692 L
  178.6223 73.9168 L
B
U
u
  0.000 1.000 0.000 0.000 k
  190.4825 73.9168 m
  195.0349 73.9168 L
  195.0349 78.4692 L
  190.4825 78.4692 L
  190.4825 73.9168 L
B
U
u
  0.000 1.000 0.000 0.000 k
  201.7438 73.9168 m
  206.2962 73.9168 L
  206.2962 78.4692 L
  201.7438 78.4692 L
  201.7438 73.9168 L
B
U
u
  0.000 1.000 0.000 0.000 k
  213.0050 73.9168 m
  217.4376 73.9168 L
  217.4376 78.4692 L
  213.0050 78.4692 L
  213.0050 73.9168 L
B
U
u
  0.000 1.000 0.000 0.000 k
  224.9850 73.9168 m
  229.4176 73.9168 L
  229.4176 78.4692 L
  224.9850 78.4692 L
  224.9850 73.9168 L
B
U
u
  0.000 1.000 0.000 0.000 k
  236.2463 73.9168 m
  240.6789 73.9168 L
  240.6789 78.4692 L
  236.2463 78.4692 L
  236.2463 73.9168 L
B
U
u
  0.000 1.000 0.000 0.000 k
  248.2263 73.9168 m
  252.6589 73.9168 L
  252.6589 78.4692 L
  248.2263 78.4692 L
  248.2263 73.9168 L
B
U
u
  0.000 1.000 0.000 0.000 k
  259.3677 73.9168 m
  263.8003 73.9168 L
  263.8003 78.4692 L
  259.3677 78.4692 L
  259.3677 73.9168 L
B
U
0 To
1.0000 0.0000 0.0000 1.0000 186.1697 273.2646 0 Tp
TP
101.964190 Tz
/_Helvetica-Bold 11.7500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(n = 300\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 45.5241 72.1198 0 Tp
TP
90.965275 Tz
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 45.5241 87.0948 0 Tp
TP
90.965275 Tz
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(1\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 45.5241 102.7887 0 Tp
TP
90.965275 Tz
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 45.5241 117.6439 0 Tp
TP
90.965275 Tz
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(3\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 45.5241 133.3378 0 Tp
TP
90.965275 Tz
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(4\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 45.5241 148.3128 0 Tp
TP
90.965275 Tz
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(5\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 45.5241 164.0067 0 Tp
TP
90.965275 Tz
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(6\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 45.5241 178.9817 0 Tp
TP
90.965275 Tz
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(7\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 45.5241 194.6755 0 Tp
TP
90.965275 Tz
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(8\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 45.5241 209.6506 0 Tp
TP
90.965275 Tz
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(9\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 39.5341 225.3444 0 Tp
TP
90.965275 Tz
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(10\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 39.5341 240.3195 0 Tp
TP
90.965275 Tz
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(11\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7073 0.7070 -0.7070 0.7073 41.5246 39.0549 0 Tp
TP
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.028\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7073 0.7070 -0.7070 0.7073 68.4797 43.6073 0 Tp
TP
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.05\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7073 0.7070 -0.7070 0.7073 91.7209 43.6073 0 Tp
TP
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.07\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7073 0.7070 -0.7070 0.7073 114.8424 43.6073 0 Tp
TP
/_Helvetica-Bold 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.09\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7073 0.7070 -0.7070 0.7073 137.9639 43.6073 0 Tp
TP
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.11\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7073 0.7070 -0.7070 0.7073 160.4863 43.6073 0 Tp
TP
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.13\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7073 0.7070 -0.7070 0.7073 183.7276 43.6073 0 Tp
TP
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.15\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.7073 0.7070 -0.7070 0.7073 256.2068 47.3211 0 Tp
TP
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.2\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 125.5507 21.3245 0 Tp
TP
99.839936 Tz
/_Helvetica-Bold 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(link probability\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 205.4576 21.3245 0 Tp
TP
99.839936 Tz
/_Helvetica-BoldOblique 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(p\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
0.0003 1.0000 -1.0000 0.0003 24.5466 72.4792 0 Tp
TP
/_Helvetica-Bold 11.2500 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(average # of addtional  lightpaths\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 0.000 k
  0.000 0.000 0.000 1.000 K
1 j
  287.0416 142.6822 m
  404.4459 142.6822 L
  404.4459 177.9035 L
  287.0416 177.9035 L
  287.0416 142.6822 L
B
U
u
  1.000 1.000 0.498 0.000 k
0.5000 w
  1.000 1.000 0.498 0.000 K
  300.4592 170.4759 m
  302.7354 168.1997 L
  300.4592 165.9235 L
  298.1830 168.1997 L
  300.4592 170.4759 L
B
U
u
  1.000 1.000 0.498 0.000 K
  290.7554 168.1997 m
  311.0017 168.1997 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 313.9967 164.8453 0 Tp
TP
90.965275 Tz
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(2 edge-connected\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 1.000 0.000 0.000 k
0.5000 w
  0.000 1.000 0.000 0.000 K
1 j
  298.1830 148.6722 m
  302.7354 148.6722 L
  302.7354 153.2246 L
  298.1830 153.2246 L
  298.1830 148.6722 L
B
U
u
  0.000 1.000 0.000 0.000 K
  290.7554 150.9484 m
  311.0017 150.9484 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 313.9967 147.5940 0 Tp
TP
90.965275 Tz
/_Helvetica 11.2500 Tf
0.0000 Tc
 0 Tr
0.0000 w
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(arbitrary\r) Tx
TO
  0.000 0.000 0.000 1.000 K
u
  0.000 0.000 0.000 1.000 K
1 j
  5.1514 5.1514 m
  407.4409 5.1514 L
  407.4409 293.7504 L
  5.1514 293.7504 L
  5.1514 5.1514 L
S
U
0 To
1.0000 0.0000 0.0000 1.0000 92.7255 112.2529 0 Tp
TP
94.585203 Tz
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 K
0 j
  0.000 0.000 0.000 1.000 k
(0.533\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 63.4942 166.1631 0 Tp
TP
94.585203 Tz
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(5.585\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 92.7255 101.8303 0 Tp
TP
94.585203 Tz
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.545\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 115.0083 80.1464 0 Tp
TP
102.467303 Tz
/_Helvetica-Bold 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.027\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 115.0083 91.4077 0 Tp
TP
102.467303 Tz
/_Helvetica-Bold 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(0.027\r) Tx
TO
  0.000 0.000 0.000 1.000 K
0 To
1.0000 0.0000 0.0000 1.0000 70.2030 234.2097 0 Tp
TP
94.585203 Tz
/_Helvetica 9.5000 Tf
0.0000 Tc
 0 Tr
  0.000 0.000 0.000 1.000 k
(10.293\r) Tx
TO
  0.000 0.000 0.000 1.000 K
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_pattern_AI5 /terminate get exec
Adobe_blend_AI5 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_typography_AI5 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF

%%EndDocument
 @endspecial 1644 2401 a Fl(Fig.)30 b(10.)166 2865 y
Fj(the)40 b(connectivit)m(y)f(of)g(a)f(logical)e(top)s(ology)i(ev)m(en)
j(when)f(a)f(single)f(ph)m(ysical)g(link)g(fails,)166
2986 y(using)32 b(minim)m(um)e(extra)j(ligh)m(tpaths.)166
3280 y(W)-8 b(e)37 b(\014rst)h(presen)m(ted)h(some)d(examples)h(that)g
(sho)m(w)h(the)f(complexit)m(y)f(of)h(the)g(problem.)166
3400 y(In)30 b(particular,)d(w)m(e)k(sho)m(w)m(ed)g(that)e(for)g
(2-edge,)g(3-edge,)h(and)f(4-edge-connected)i(logical)166
3521 y(top)s(ologies,)46 b(there)k(exist)e(logical)e(top)s(ologies)g
(whic)m(h)j(are)f(not)h(surviv)-5 b(able)48 b(under)h(a)166
3641 y(single)31 b(link)f(failure,)h(no)g(matter)g(ho)m(w)i(the)f(top)s
(ology)e(is)i(em)m(b)s(edded)h(o)m(v)m(er)f(the)h(ph)m(ysical)166
3761 y(top)s(ology)-8 b(,)31 b(i.e.,)g(no)h(matter)g(ho)m(w)g(the)h
(ligh)m(tpaths)e(are)h(routed.)h(W)-8 b(e)32 b(then)h(sho)m(w)m(ed)h
(that)166 3882 y(if)h(shortest-path)i(routing)e(is)h(used)i(to)e(em)m
(b)s(ed)g(a)g(logical)d(top)s(ology)-8 b(,)35 b(then)i(the)g(logical)
166 4002 y(top)s(ology)32 b(ma)m(y)h(not)h(b)s(e)g(surviv)-5
b(able)33 b(ev)m(en)i(if)d(it)h(is)g(\()p Ff(n=)p Fj(2)22
b Fe(\000)i Fj(1\)-edge)33 b(connected,)i(where)166 4122
y Ff(n)f Fj(is)f(the)h(n)m(um)m(b)s(er)g(of)f(no)s(des)h(in)f(the)h
(ring.)e(Corresp)s(ondingly)-8 b(,)33 b(w)m(e)i(sho)m(w)m(ed)h(that)d
(if)f(the)166 4243 y(logical)39 b(top)s(ology)h(is)i(ric)m(h)f(enough)i
(so)f(that)f(the)i(minim)m(um)38 b(degree)43 b(of)f(an)m(y)g(no)s(de)g
(is)166 4363 y(at)d(least)g Fe(d)p Fj(2)p Ff(n=)p Fj(3)p
Fe(e)p Fj(,)h(then)g(shortest-path)g(routing)e(of)h(the)h(ligh)m
(tpaths)e(guaran)m(tees)i(the)166 4484 y(surviv)-5 b(abilit)m(y)35
b(of)i(the)h(logical)c(top)s(ology)-8 b(.)35 b(Finally)-8
b(,)35 b(w)m(e)j(presen)m(ted)i(a)c(simple)g(heuristic)166
4604 y(to)27 b(solv)m(e)h(the)f(surviv)-5 b(able)27 b(logical)d(top)s
(ology)i(em)m(b)s(edding)h(problem)f(based)i(on)f(shortest-)166
4724 y(path)e(routing)f(and)h(presen)m(ted)i(some)e(n)m(umerical)e
(results.)j(These)h(results)e(indicate)f(that)166 4845
y(the)33 b(heuristic)f(is)g(almost)f(optimal.)166 5139
y(F)-8 b(uture)48 b(w)m(ork)h(ma)m(y)e(concen)m(trate)i(on)f(sharp)s
(ening)f(the)i(b)s(ounds)f(presen)m(ted)i(in)d(this)166
5259 y(pap)s(er.)33 b(The)i(complexit)m(y)d(of)h(the)h(problem)e(in)g
(other)i(ph)m(ysical)f(top)s(ologies)e(is)i(another)166
5380 y(p)s(ossible)f(topic)g(for)g(future)h(in)m(v)m(estigation.)1745
5712 y(12)p eop
%%Page: 13 13
13 12 bop 166 83 a Fk(References)166 416 y Fl([1])71
b(O.)27 b(Cro)s(c)m(hat)h(and)e(J-Y.)i(Le)f(Boudec.)36
b(Design)27 b(protection)g(for)g(WDM)h(optical)f(net)m(w)m(orks.)332
529 y Fo(IEEE)32 b(J.)g(Sel.)h(A)n(r)-5 b(e)g(as)33 b(Comm.)p
Fl(,)f(16\(7\):1158{1165,)37 b(Sept.)30 b(1998.)166 715
y([2])71 b(O.)40 b(Cro)s(c)m(hat,)h(J-Y.)f(Le)g(Boudec)g(and)g(O.)f
(Gerstel.)69 b(Protection)41 b(In)m(terop)s(erabilit)m(y)d(for)332
828 y(WDM)43 b(Optical)d(Net)m(w)m(orks.)74 b Fo(IEEE/A)n(CM)41
b(T)-7 b(r)i(ans.)44 b(on)f(Networking)p Fl(,)f(V)-8
b(ol.)42 b(8,)g(No.)g(3,)332 941 y(June)30 b(2000.)166
1127 y([3])71 b(E.)41 b(Mo)s(diano)g(and)f(A.)h(Narula-T)-8
b(am.)72 b(Surviv)-5 b(able)39 b(routing)h(of)h(logical)f(top)s
(ologies)h(in)332 1240 y(WDM)32 b(net)m(w)m(orks.)41
b(In)30 b Fo(Pr)-5 b(o)g(c.)33 b(INF)n(OCOM)p Fl(,)c(pages)i(348{57,)j
(April)28 b(2001.)166 1427 y([4])71 b(H.)25 b(Lee,)f(H.)g(Choi,)f(S.)h
(Subramaniam,)e(and)h(H.-A.)i(Choi.)k(Surviv)-5 b(able)21
b(Logical)j(T)-8 b(op)s(ology)332 1540 y(Design)22 b(in)e(WDM)j
(Optical)e(Ring)f(Net)m(w)m(orks.)28 b Fo(Pr)-5 b(o)g(c.)25
b(39th)i(A)n(nnual)d(A)n(l)5 b(lerton)25 b(Confer)-5
b(enc)g(e)332 1653 y(on)33 b(Communic)-5 b(ations,)35
b(Contr)-5 b(ol,)35 b(and)e(Computing,)f Fl(Octob)s(er,)e(2001,)j(In)m
(vited)c(P)m(ap)s(er.)1745 5712 y Fj(13)p eop
%%Trailer
end
userdict /end-hook known{end-hook}if
%%EOF
